[{
		"path":	"src/",
		"original_path":	"src/",
		"dir":	"src/"
	}, {
		"path":	"src/base64/",
		"original_path":	"src/base64/",
		"dir":	"src/base64/"
	}, {
		"path":	"src/base64/base64.c",
		"original_path":	"src/base64/base64.c",
		"dir":	"src/base64/",
		"full_name":	"base64.c",
		"name":	"base64",
		"extension":	"c",
		"hardware_sha256":	"b589bf57772db176e26bcb6de68f20159cfd38afc412c322e0b977e8e50a938a",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2462,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2462,
		"content_sha256":	"b589bf57772db176e26bcb6de68f20159cfd38afc412c322e0b977e8e50a938a",
		"is_binary":	false,
		"content":	"\n\nchar *dtw_base64_encode(unsigned char *data, long input_length){\n    if (data == NULL) return NULL;\n\n    size_t output_length = 4 * ((input_length + 2) / 3);\n\n    char *encoded_data = (char *)malloc(output_length + 1);\n\n\n    long i, j;\n    for (i = 0, j = 0; i < input_length; ) {\n        unsigned char b0 = i < input_length ? data[i++] : 0;\n        unsigned char b1 = i < input_length ? data[i++] : 0;\n        unsigned char b2 = i < input_length ? data[i++] : 0;\n\n        unsigned char b = b0 >> 2;\n        encoded_data[j++] = dtw_base64_table[b];\n\n        b = (b0 << 4) & 0x3F;\n        b |= b1 >> 4;\n        encoded_data[j++] = dtw_base64_table[b];\n\n        b = (b1 << 2) & 0x3F;\n        b |= b2 >> 6;\n        encoded_data[j++] = i <= input_length + 1 ? dtw_base64_table[b] : '=';\n\n        b = b2 & 0x3F;\n        encoded_data[j++] = i <= input_length ? dtw_base64_table[b] : '=';\n    }\n\n    encoded_data[j] = '\\0';\n    return encoded_data;\n}\n\n\nunsigned char *dtw_base64_decode(const char *data, long *output_length){\n    long input_length = (long)strlen(data);\n    if (input_length % 4 != 0) return NULL;\n\n    *output_length = input_length / 4 * 3;\n    if (data[input_length - 1] == '=') (*output_length)--;\n    if (data[input_length - 2] == '=') (*output_length)--;\n\n    unsigned char *decoded_data = (unsigned char*) malloc(*output_length +2);\n\n\n    long i, j;\n    for (i = 0, j = 0; i < input_length; ) {\n        unsigned char b0 = data[i] == '=' ? 0 & i++ : strchr(dtw_base64_table, data[i++]) - dtw_base64_table;\n        unsigned char b1 = data[i] == '=' ? 0 & i++ : strchr(dtw_base64_table, data[i++]) - dtw_base64_table;\n        unsigned char b2 = data[i] == '=' ? 0 & i++ : strchr(dtw_base64_table, data[i++]) - dtw_base64_table;\n        unsigned char b3 = data[i] == '=' ? 0 & i++ : strchr(dtw_base64_table, data[i++]) - dtw_base64_table;\n\n        unsigned char b = (b0 << 2) | (b1 >> 4);\n        decoded_data[j++] = b;\n\n        if (j < *output_length) {\n            b = (b1 << 4) | (b2 >> 2);\n            decoded_data[j++] = b;\n        }\n        if (j < *output_length) {\n            b = (b2 << 6) | b3;\n            decoded_data[j++] = b;\n        }\n    }\n    decoded_data[*output_length] = '\\0';\n\n    return decoded_data;\n}\n\nchar *dtw_convert_binary_file_to_base64(const char *path){\n     long size;\n     unsigned char *data  = dtw_load_binary_content(path, &size);\n    char *b64   = dtw_base64_encode(data, size);\n    free(data);\n    return b64;\n}"
	}, {
		"path":	"src/base64/base64.h",
		"original_path":	"src/base64/base64.h",
		"dir":	"src/base64/",
		"full_name":	"base64.h",
		"name":	"base64",
		"extension":	"h",
		"hardware_sha256":	"0f79be2b4641fecec6a4febd5cb1ba79b0ca3bedad71b4295b97884ab14f23de",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	202,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	202,
		"content_sha256":	"0f79be2b4641fecec6a4febd5cb1ba79b0ca3bedad71b4295b97884ab14f23de",
		"is_binary":	false,
		"content":	"\n\nchar *dtw_base64_encode(unsigned char *data, long input_length);\n\n\nunsigned char *dtw_base64_decode(const char *data, long *output_length);\n\n\nchar *dtw_convert_binary_file_to_base64(const char *path);"
	}, {
		"path":	"src/declaration.h",
		"original_path":	"src/declaration.h",
		"dir":	"src/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"b52eb28e02d825c44980b7c31489f1b36ae32a35678fdf573ab9ffe04eb515fb",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1288,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1288,
		"content_sha256":	"b52eb28e02d825c44980b7c31489f1b36ae32a35678fdf573ab9ffe04eb515fb",
		"is_binary":	false,
		"content":	"\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifndef DO_THE_WORLD_H\n\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <time.h>\n\n#include <stdarg.h>\n\n#include <errno.h>\n#include <sys/file.h>\n#include <sys/time.h>\n\n\n\n#ifdef __linux__\n#include <sys/wait.h>\n  #include <dirent.h>\n  #include <unistd.h>\n#elif _WIN32\n  #include <windows.h>\n  #include <tchar.h>\n  #include <wchar.h>\n  #include <locale.h>\n  #include <direct.h>\n#endif\n\n#include \"dependencies/declaration.h\"\n#include \"string_array/string_array.h\"\n#include \"sha256/sha256.h\"\n#include \"base64/base64.h\"\n#include \"randonizer/randonizer.h\"\n#include \"extras/extras.h\"\n#include \"string_functions/string_functions.h\"\n#include \"io/io.h\"\n#include \"numeral_io/numeral_io.h\"\n#include \"listage_wrappers/listage_wrappers.h\"\n#include \"monodimension_listage/monodimension_listage.h\"\n#include \"multidimension_listage/multidimension_listage.h\"\n#include \"path/declaration.h\"\n#include \"tree/declarations.h\"\n\n#include \"lockers/declaration.h\"\n\n#include \"transaction/declaration.h\"\n#include \"resource/declaration.h\"\n#include \"hash/hash.h\"\n#include \"namespace/declaration.h\"\n#define DO_THE_WORLD_H\n#endif\n\n#ifdef __cplusplus\n}\n#endif"
	}, {
		"path":	"src/definition.c",
		"original_path":	"src/definition.c",
		"dir":	"src/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"96af97f7ac0c8096b6dd41796b01f04b1cbe096f00cc0a46603db8a13af0821b",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	762,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	762,
		"content_sha256":	"96af97f7ac0c8096b6dd41796b01f04b1cbe096f00cc0a46603db8a13af0821b",
		"is_binary":	false,
		"content":	"\n\n\n#include \"declaration.h\"\n#include \"globals.c\"\n\n#include \"sha256/sha256.c\"\n#include \"base64/base64.c\"\n#include \"randonizer/randonizer.c\"\n#include \"extras/extras.c\"\n#include \"string_functions/string_functions.c\"\n#include \"io/io.c\"\n#include \"numeral_io/numeral_io.c\"\n#include \"listage_wrappers/listage_wrappers.c\"\n#include \"monodimension_listage/monodimension_listage_linux.c\"\n#include \"monodimension_listage/monodimension_listage_win32.c\"\n#include \"multidimension_listage/multidimension_listage.c\"\n#include \"path/definition.c\"\n#include \"string_array/string_array.c\"\n#include \"tree/definition.c\"\n\n#include \"lockers/definition.c\"\n\n#include \"resource/definition.c\"\n#include \"transaction/definition.c\"\n#include \"hash/hash.c\"\n#include \"namespace/definition.c\"\n\n\n\n\n\n\n"
	}, {
		"path":	"src/dependencies/",
		"original_path":	"src/dependencies/",
		"dir":	"src/dependencies/"
	}, {
		"path":	"src/dependencies/cJSON/",
		"original_path":	"src/dependencies/cJSON/",
		"dir":	"src/dependencies/cJSON/"
	}, {
		"path":	"src/dependencies/cJSON/cJSON.c",
		"original_path":	"src/dependencies/cJSON/cJSON.c",
		"dir":	"src/dependencies/cJSON/",
		"full_name":	"cJSON.c",
		"name":	"cJSON",
		"extension":	"c",
		"hardware_sha256":	"ba256671c09c1fbc5721107f92b0e6164c17c9be8c8bf80ba9ec8963dbc6d591",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	78814,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	78814,
		"content_sha256":	"ba256671c09c1fbc5721107f92b0e6164c17c9be8c8bf80ba9ec8963dbc6d591",
		"is_binary":	false,
		"content":	"/*\n  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\n/* cJSON */\n/* JSON parser in C. */\n\n/* disable warnings about old C89 functions in MSVC */\n#if !defined(_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)\n#define _CRT_SECURE_NO_DEPRECATE\n#endif\n\n#ifdef __GNUC__\n#pragma GCC visibility push(default)\n#endif\n#if defined(_MSC_VER)\n#pragma warning (push)\n/* disable warning about single line comments in system headers */\n#pragma warning (disable : 4001)\n#endif\n\n#include <string.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <limits.h>\n#include <ctype.h>\n#include <float.h>\n\n#ifdef ENABLE_LOCALES\n#include <locale.h>\n#endif\n\n#if defined(_MSC_VER)\n#pragma warning (pop)\n#endif\n#ifdef __GNUC__\n#pragma GCC visibility pop\n#endif\n\n#include \"cJSON.h\"\n\n/* define our own boolean type */\n#ifdef true\n#undef true\n#endif\n#define true ((cJSON_bool)1)\n\n#ifdef false\n#undef false\n#endif\n#define false ((cJSON_bool)0)\n\n/* define isnan and isinf for ANSI C, if in C99 or above, isnan and isinf has been defined in math.h */\n#ifndef isinf\n#define isinf(d) (isnan((d - d)) && !isnan(d))\n#endif\n#ifndef isnan\n#define isnan(d) (d != d)\n#endif\n\n#ifndef NAN\n#ifdef _WIN32\n#define NAN sqrt(-1.0)\n#else\n#define NAN 0.0/0.0\n#endif\n#endif\n\ntypedef struct {\n    const unsigned char *json;\n    size_t position;\n} error;\nstatic error global_error = { NULL, 0 };\n\nCJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)\n{\n    return (const char*) (global_error.json + global_error.position);\n}\n\nCJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item)\n{\n    if (!cJSON_IsString(item))\n    {\n        return NULL;\n    }\n\n    return item->valuestring;\n}\n\nCJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)\n{\n    if (!cJSON_IsNumber(item))\n    {\n        return (double) NAN;\n    }\n\n    return item->valuedouble;\n}\n\n/* This is a safeguard to prevent copy-pasters from using incompatible C and header files */\n#if (CJSON_VERSION_MAJOR != 1) || (CJSON_VERSION_MINOR != 7) || (CJSON_VERSION_PATCH != 18)\n    #error cJSON.h and cJSON.c have different versions. Make sure that both have the same.\n#endif\n\nCJSON_PUBLIC(const char*) cJSON_Version(void)\n{\n    static char version[15];\n    sprintf(version, \"%i.%i.%i\", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);\n\n    return version;\n}\n\n/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */\nstatic int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)\n{\n    if ((string1 == NULL) || (string2 == NULL))\n    {\n        return 1;\n    }\n\n    if (string1 == string2)\n    {\n        return 0;\n    }\n\n    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)\n    {\n        if (*string1 == '\\0')\n        {\n            return 0;\n        }\n    }\n\n    return tolower(*string1) - tolower(*string2);\n}\n\ntypedef struct internal_hooks\n{\n    void *(CJSON_CDECL *allocate)(size_t size);\n    void (CJSON_CDECL *deallocate)(void *pointer);\n    void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);\n} internal_hooks;\n\n#if defined(_MSC_VER)\n/* work around MSVC error C2322: '...' address of dllimport '...' is not static */\nstatic void * CJSON_CDECL internal_malloc(size_t size)\n{\n    return malloc(size);\n}\nstatic void CJSON_CDECL internal_free(void *pointer)\n{\n    free(pointer);\n}\nstatic void * CJSON_CDECL internal_realloc(void *pointer, size_t size)\n{\n    return realloc(pointer, size);\n}\n#else\n#define internal_malloc malloc\n#define internal_free free\n#define internal_realloc realloc\n#endif\n\n/* strlen of character literals resolved at compile time */\n#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(\"\"))\n\nstatic internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };\n\nstatic unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)\n{\n    size_t length = 0;\n    unsigned char *copy = NULL;\n\n    if (string == NULL)\n    {\n        return NULL;\n    }\n\n    length = strlen((const char*)string) + sizeof(\"\");\n    copy = (unsigned char*)hooks->allocate(length);\n    if (copy == NULL)\n    {\n        return NULL;\n    }\n    memcpy(copy, string, length);\n\n    return copy;\n}\n\nCJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)\n{\n    if (hooks == NULL)\n    {\n        /* Reset hooks */\n        global_hooks.allocate = malloc;\n        global_hooks.deallocate = free;\n        global_hooks.reallocate = realloc;\n        return;\n    }\n\n    global_hooks.allocate = malloc;\n    if (hooks->malloc_fn != NULL)\n    {\n        global_hooks.allocate = hooks->malloc_fn;\n    }\n\n    global_hooks.deallocate = free;\n    if (hooks->free_fn != NULL)\n    {\n        global_hooks.deallocate = hooks->free_fn;\n    }\n\n    /* use realloc only if both free and malloc are used */\n    global_hooks.reallocate = NULL;\n    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))\n    {\n        global_hooks.reallocate = realloc;\n    }\n}\n\n/* Internal constructor. */\nstatic cJSON *cJSON_New_Item(const internal_hooks * const hooks)\n{\n    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));\n    if (node)\n    {\n        memset(node, '\\0', sizeof(cJSON));\n    }\n\n    return node;\n}\n\n/* Delete a cJSON structure. */\nCJSON_PUBLIC(void) cJSON_Delete(cJSON *item)\n{\n    cJSON *next = NULL;\n    while (item != NULL)\n    {\n        next = item->next;\n        if (!(item->type & cJSON_IsReference) && (item->child != NULL))\n        {\n            cJSON_Delete(item->child);\n        }\n        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))\n        {\n            global_hooks.deallocate(item->valuestring);\n            item->valuestring = NULL;\n        }\n        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))\n        {\n            global_hooks.deallocate(item->string);\n            item->string = NULL;\n        }\n        global_hooks.deallocate(item);\n        item = next;\n    }\n}\n\n/* get the decimal point character of the current locale */\nstatic unsigned char get_decimal_point(void)\n{\n#ifdef ENABLE_LOCALES\n    struct lconv *lconv = localeconv();\n    return (unsigned char) lconv->decimal_point[0];\n#else\n    return '.';\n#endif\n}\n\ntypedef struct\n{\n    const unsigned char *content;\n    size_t length;\n    size_t offset;\n    size_t depth; /* How deeply nested (in arrays/objects) is the input at the current offset. */\n    internal_hooks hooks;\n} parse_buffer;\n\n/* check if the given size is left to read in a given parse buffer (starting with 1) */\n#define can_read(buffer, size) ((buffer != NULL) && (((buffer)->offset + size) <= (buffer)->length))\n/* check if the buffer can be accessed at the given index (starting with 0) */\n#define can_access_at_index(buffer, index) ((buffer != NULL) && (((buffer)->offset + index) < (buffer)->length))\n#define cannot_access_at_index(buffer, index) (!can_access_at_index(buffer, index))\n/* get a pointer to the buffer at the position */\n#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)\n\n/* Parse the input text to generate a number, and populate the result into item. */\nstatic cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)\n{\n    double number = 0;\n    unsigned char *after_end = NULL;\n    unsigned char number_c_string[64];\n    unsigned char decimal_point = get_decimal_point();\n    size_t i = 0;\n\n    if ((input_buffer == NULL) || (input_buffer->content == NULL))\n    {\n        return false;\n    }\n\n    /* copy the number into a temporary buffer and replace '.' with the decimal point\n     * of the current locale (for strtod)\n     * This also takes care of '\\0' not necessarily being available for marking the end of the input */\n    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)\n    {\n        switch (buffer_at_offset(input_buffer)[i])\n        {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case '+':\n            case '-':\n            case 'e':\n            case 'E':\n                number_c_string[i] = buffer_at_offset(input_buffer)[i];\n                break;\n\n            case '.':\n                number_c_string[i] = decimal_point;\n                break;\n\n            default:\n                goto loop_end;\n        }\n    }\nloop_end:\n    number_c_string[i] = '\\0';\n\n    number = strtod((const char*)number_c_string, (char**)&after_end);\n    if (number_c_string == after_end)\n    {\n        return false; /* parse_error */\n    }\n\n    item->valuedouble = number;\n\n    /* use saturation in case of overflow */\n    if (number >= INT_MAX)\n    {\n        item->valueint = INT_MAX;\n    }\n    else if (number <= (double)INT_MIN)\n    {\n        item->valueint = INT_MIN;\n    }\n    else\n    {\n        item->valueint = (int)number;\n    }\n\n    item->type = cJSON_Number;\n\n    input_buffer->offset += (size_t)(after_end - number_c_string);\n    return true;\n}\n\n/* don't ask me, but the original cJSON_SetNumberValue returns an integer or double */\nCJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)\n{\n    if (number >= INT_MAX)\n    {\n        object->valueint = INT_MAX;\n    }\n    else if (number <= (double)INT_MIN)\n    {\n        object->valueint = INT_MIN;\n    }\n    else\n    {\n        object->valueint = (int)number;\n    }\n\n    return object->valuedouble = number;\n}\n\n/* Note: when passing a NULL valuestring, cJSON_SetValuestring treats this as an error and return NULL */\nCJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)\n{\n    char *copy = NULL;\n    /* if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring */\n    if ((object == NULL) || !(object->type & cJSON_String) || (object->type & cJSON_IsReference))\n    {\n        return NULL;\n    }\n    /* return NULL if the object is corrupted or valuestring is NULL */\n    if (object->valuestring == NULL || valuestring == NULL)\n    {\n        return NULL;\n    }\n    if (strlen(valuestring) <= strlen(object->valuestring))\n    {\n        strcpy(object->valuestring, valuestring);\n        return object->valuestring;\n    }\n    copy = (char*) cJSON_strdup((const unsigned char*)valuestring, &global_hooks);\n    if (copy == NULL)\n    {\n        return NULL;\n    }\n    if (object->valuestring != NULL)\n    {\n        cJSON_free(object->valuestring);\n    }\n    object->valuestring = copy;\n\n    return copy;\n}\n\ntypedef struct\n{\n    unsigned char *buffer;\n    size_t length;\n    size_t offset;\n    size_t depth; /* current nesting depth (for formatted printing) */\n    cJSON_bool noalloc;\n    cJSON_bool format; /* is this print a formatted print */\n    internal_hooks hooks;\n} printbuffer;\n\n/* realloc printbuffer if necessary to have at least \"needed\" bytes more */\nstatic unsigned char* ensure(printbuffer * const p, size_t needed)\n{\n    unsigned char *newbuffer = NULL;\n    size_t newsize = 0;\n\n    if ((p == NULL) || (p->buffer == NULL))\n    {\n        return NULL;\n    }\n\n    if ((p->length > 0) && (p->offset >= p->length))\n    {\n        /* make sure that offset is valid */\n        return NULL;\n    }\n\n    if (needed > INT_MAX)\n    {\n        /* sizes bigger than INT_MAX are currently not supported */\n        return NULL;\n    }\n\n    needed += p->offset + 1;\n    if (needed <= p->length)\n    {\n        return p->buffer + p->offset;\n    }\n\n    if (p->noalloc) {\n        return NULL;\n    }\n\n    /* calculate new buffer size */\n    if (needed > (INT_MAX / 2))\n    {\n        /* overflow of int, use INT_MAX if possible */\n        if (needed <= INT_MAX)\n        {\n            newsize = INT_MAX;\n        }\n        else\n        {\n            return NULL;\n        }\n    }\n    else\n    {\n        newsize = needed * 2;\n    }\n\n    if (p->hooks.reallocate != NULL)\n    {\n        /* reallocate with realloc if available */\n        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);\n        if (newbuffer == NULL)\n        {\n            p->hooks.deallocate(p->buffer);\n            p->length = 0;\n            p->buffer = NULL;\n\n            return NULL;\n        }\n    }\n    else\n    {\n        /* otherwise reallocate manually */\n        newbuffer = (unsigned char*)p->hooks.allocate(newsize);\n        if (!newbuffer)\n        {\n            p->hooks.deallocate(p->buffer);\n            p->length = 0;\n            p->buffer = NULL;\n\n            return NULL;\n        }\n\n        memcpy(newbuffer, p->buffer, p->offset + 1);\n        p->hooks.deallocate(p->buffer);\n    }\n    p->length = newsize;\n    p->buffer = newbuffer;\n\n    return newbuffer + p->offset;\n}\n\n/* calculate the new length of the string in a printbuffer and update the offset */\nstatic void update_offset(printbuffer * const buffer)\n{\n    const unsigned char *buffer_pointer = NULL;\n    if ((buffer == NULL) || (buffer->buffer == NULL))\n    {\n        return;\n    }\n    buffer_pointer = buffer->buffer + buffer->offset;\n\n    buffer->offset += strlen((const char*)buffer_pointer);\n}\n\n/* securely comparison of floating-point variables */\nstatic cJSON_bool compare_double(double a, double b)\n{\n    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);\n    return (fabs(a - b) <= maxVal * DBL_EPSILON);\n}\n\n/* Render the number nicely from the given item into a string. */\nstatic cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)\n{\n    unsigned char *output_pointer = NULL;\n    double d = item->valuedouble;\n    int length = 0;\n    size_t i = 0;\n    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */\n    unsigned char decimal_point = get_decimal_point();\n    double test = 0.0;\n\n    if (output_buffer == NULL)\n    {\n        return false;\n    }\n\n    /* This checks for NaN and Infinity */\n    if (isnan(d) || isinf(d))\n    {\n        length = sprintf((char*)number_buffer, \"null\");\n    }\n    else if(d == (double)item->valueint)\n    {\n        length = sprintf((char*)number_buffer, \"%d\", item->valueint);\n    }\n    else\n    {\n        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */\n        length = sprintf((char*)number_buffer, \"%1.15g\", d);\n\n        /* Check whether the original double can be recovered */\n        if ((sscanf((char*)number_buffer, \"%lg\", &test) != 1) || !compare_double((double)test, d))\n        {\n            /* If not, print with 17 decimal places of precision */\n            length = sprintf((char*)number_buffer, \"%1.17g\", d);\n        }\n    }\n\n    /* sprintf failed or buffer overrun occurred */\n    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))\n    {\n        return false;\n    }\n\n    /* reserve appropriate space in the output */\n    output_pointer = ensure(output_buffer, (size_t)length + sizeof(\"\"));\n    if (output_pointer == NULL)\n    {\n        return false;\n    }\n\n    /* copy the printed number to the output and replace locale\n     * dependent decimal point with '.' */\n    for (i = 0; i < ((size_t)length); i++)\n    {\n        if (number_buffer[i] == decimal_point)\n        {\n            output_pointer[i] = '.';\n            continue;\n        }\n\n        output_pointer[i] = number_buffer[i];\n    }\n    output_pointer[i] = '\\0';\n\n    output_buffer->offset += (size_t)length;\n\n    return true;\n}\n\n/* parse 4 digit hexadecimal number */\nstatic unsigned parse_hex4(const unsigned char * const input)\n{\n    unsigned int h = 0;\n    size_t i = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        /* parse digit */\n        if ((input[i] >= '0') && (input[i] <= '9'))\n        {\n            h += (unsigned int) input[i] - '0';\n        }\n        else if ((input[i] >= 'A') && (input[i] <= 'F'))\n        {\n            h += (unsigned int) 10 + input[i] - 'A';\n        }\n        else if ((input[i] >= 'a') && (input[i] <= 'f'))\n        {\n            h += (unsigned int) 10 + input[i] - 'a';\n        }\n        else /* invalid */\n        {\n            return 0;\n        }\n\n        if (i < 3)\n        {\n            /* shift left to make place for the next nibble */\n            h = h << 4;\n        }\n    }\n\n    return h;\n}\n\n/* converts a UTF-16 literal to UTF-8\n * A literal can be one or two sequences of the form \\uXXXX */\nstatic unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)\n{\n    long unsigned int codepoint = 0;\n    unsigned int first_code = 0;\n    const unsigned char *first_sequence = input_pointer;\n    unsigned char utf8_length = 0;\n    unsigned char utf8_position = 0;\n    unsigned char sequence_length = 0;\n    unsigned char first_byte_mark = 0;\n\n    if ((input_end - first_sequence) < 6)\n    {\n        /* input ends unexpectedly */\n        goto fail;\n    }\n\n    /* get the first utf16 sequence */\n    first_code = parse_hex4(first_sequence + 2);\n\n    /* check that the code is valid */\n    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))\n    {\n        goto fail;\n    }\n\n    /* UTF16 surrogate pair */\n    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))\n    {\n        const unsigned char *second_sequence = first_sequence + 6;\n        unsigned int second_code = 0;\n        sequence_length = 12; /* \\uXXXX\\uXXXX */\n\n        if ((input_end - second_sequence) < 6)\n        {\n            /* input ends unexpectedly */\n            goto fail;\n        }\n\n        if ((second_sequence[0] != '\\\\') || (second_sequence[1] != 'u'))\n        {\n            /* missing second half of the surrogate pair */\n            goto fail;\n        }\n\n        /* get the second utf16 sequence */\n        second_code = parse_hex4(second_sequence + 2);\n        /* check that the code is valid */\n        if ((second_code < 0xDC00) || (second_code > 0xDFFF))\n        {\n            /* invalid second half of the surrogate pair */\n            goto fail;\n        }\n\n\n        /* calculate the unicode codepoint from the surrogate pair */\n        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));\n    }\n    else\n    {\n        sequence_length = 6; /* \\uXXXX */\n        codepoint = first_code;\n    }\n\n    /* encode as UTF-8\n     * takes at maximum 4 bytes to encode:\n     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */\n    if (codepoint < 0x80)\n    {\n        /* normal ascii, encoding 0xxxxxxx */\n        utf8_length = 1;\n    }\n    else if (codepoint < 0x800)\n    {\n        /* two bytes, encoding 110xxxxx 10xxxxxx */\n        utf8_length = 2;\n        first_byte_mark = 0xC0; /* 11000000 */\n    }\n    else if (codepoint < 0x10000)\n    {\n        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */\n        utf8_length = 3;\n        first_byte_mark = 0xE0; /* 11100000 */\n    }\n    else if (codepoint <= 0x10FFFF)\n    {\n        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */\n        utf8_length = 4;\n        first_byte_mark = 0xF0; /* 11110000 */\n    }\n    else\n    {\n        /* invalid unicode codepoint */\n        goto fail;\n    }\n\n    /* encode as utf8 */\n    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)\n    {\n        /* 10xxxxxx */\n        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);\n        codepoint >>= 6;\n    }\n    /* encode first byte */\n    if (utf8_length > 1)\n    {\n        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);\n    }\n    else\n    {\n        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);\n    }\n\n    *output_pointer += utf8_length;\n\n    return sequence_length;\n\nfail:\n    return 0;\n}\n\n/* Parse the input text into an unescaped cinput, and populate item. */\nstatic cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)\n{\n    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;\n    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;\n    unsigned char *output_pointer = NULL;\n    unsigned char *output = NULL;\n\n    /* not a string */\n    if (buffer_at_offset(input_buffer)[0] != '\\\"')\n    {\n        goto fail;\n    }\n\n    {\n        /* calculate approximate size of the output (overestimate) */\n        size_t allocation_length = 0;\n        size_t skipped_bytes = 0;\n        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\\\"'))\n        {\n            /* is escape sequence */\n            if (input_end[0] == '\\\\')\n            {\n                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)\n                {\n                    /* prevent buffer overflow when last input character is a backslash */\n                    goto fail;\n                }\n                skipped_bytes++;\n                input_end++;\n            }\n            input_end++;\n        }\n        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\\\"'))\n        {\n            goto fail; /* string ended unexpectedly */\n        }\n\n        /* This is at most how much we need for the output */\n        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;\n        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(\"\"));\n        if (output == NULL)\n        {\n            goto fail; /* allocation failure */\n        }\n    }\n\n    output_pointer = output;\n    /* loop through the string literal */\n    while (input_pointer < input_end)\n    {\n        if (*input_pointer != '\\\\')\n        {\n            *output_pointer++ = *input_pointer++;\n        }\n        /* escape sequence */\n        else\n        {\n            unsigned char sequence_length = 2;\n            if ((input_end - input_pointer) < 1)\n            {\n                goto fail;\n            }\n\n            switch (input_pointer[1])\n            {\n                case 'b':\n                    *output_pointer++ = '\\b';\n                    break;\n                case 'f':\n                    *output_pointer++ = '\\f';\n                    break;\n                case 'n':\n                    *output_pointer++ = '\\n';\n                    break;\n                case 'r':\n                    *output_pointer++ = '\\r';\n                    break;\n                case 't':\n                    *output_pointer++ = '\\t';\n                    break;\n                case '\\\"':\n                case '\\\\':\n                case '/':\n                    *output_pointer++ = input_pointer[1];\n                    break;\n\n                /* UTF-16 literal */\n                case 'u':\n                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);\n                    if (sequence_length == 0)\n                    {\n                        /* failed to convert UTF16-literal to UTF-8 */\n                        goto fail;\n                    }\n                    break;\n\n                default:\n                    goto fail;\n            }\n            input_pointer += sequence_length;\n        }\n    }\n\n    /* zero terminate the output */\n    *output_pointer = '\\0';\n\n    item->type = cJSON_String;\n    item->valuestring = (char*)output;\n\n    input_buffer->offset = (size_t) (input_end - input_buffer->content);\n    input_buffer->offset++;\n\n    return true;\n\nfail:\n    if (output != NULL)\n    {\n        input_buffer->hooks.deallocate(output);\n        output = NULL;\n    }\n\n    if (input_pointer != NULL)\n    {\n        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);\n    }\n\n    return false;\n}\n\n/* Render the cstring provided to an escaped version that can be printed. */\nstatic cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)\n{\n    const unsigned char *input_pointer = NULL;\n    unsigned char *output = NULL;\n    unsigned char *output_pointer = NULL;\n    size_t output_length = 0;\n    /* numbers of additional characters needed for escaping */\n    size_t escape_characters = 0;\n\n    if (output_buffer == NULL)\n    {\n        return false;\n    }\n\n    /* empty string */\n    if (input == NULL)\n    {\n        output = ensure(output_buffer, sizeof(\"\\\"\\\"\"));\n        if (output == NULL)\n        {\n            return false;\n        }\n        strcpy((char*)output, \"\\\"\\\"\");\n\n        return true;\n    }\n\n    /* set \"flag\" to 1 if something needs to be escaped */\n    for (input_pointer = input; *input_pointer; input_pointer++)\n    {\n        switch (*input_pointer)\n        {\n            case '\\\"':\n            case '\\\\':\n            case '\\b':\n            case '\\f':\n            case '\\n':\n            case '\\r':\n            case '\\t':\n                /* one character escape sequence */\n                escape_characters++;\n                break;\n            default:\n                if (*input_pointer < 32)\n                {\n                    /* UTF-16 escape sequence uXXXX */\n                    escape_characters += 5;\n                }\n                break;\n        }\n    }\n    output_length = (size_t)(input_pointer - input) + escape_characters;\n\n    output = ensure(output_buffer, output_length + sizeof(\"\\\"\\\"\"));\n    if (output == NULL)\n    {\n        return false;\n    }\n\n    /* no characters have to be escaped */\n    if (escape_characters == 0)\n    {\n        output[0] = '\\\"';\n        memcpy(output + 1, input, output_length);\n        output[output_length + 1] = '\\\"';\n        output[output_length + 2] = '\\0';\n\n        return true;\n    }\n\n    output[0] = '\\\"';\n    output_pointer = output + 1;\n    /* copy the string */\n    for (input_pointer = input; *input_pointer != '\\0'; (void)input_pointer++, output_pointer++)\n    {\n        if ((*input_pointer > 31) && (*input_pointer != '\\\"') && (*input_pointer != '\\\\'))\n        {\n            /* normal character, copy */\n            *output_pointer = *input_pointer;\n        }\n        else\n        {\n            /* character needs to be escaped */\n            *output_pointer++ = '\\\\';\n            switch (*input_pointer)\n            {\n                case '\\\\':\n                    *output_pointer = '\\\\';\n                    break;\n                case '\\\"':\n                    *output_pointer = '\\\"';\n                    break;\n                case '\\b':\n                    *output_pointer = 'b';\n                    break;\n                case '\\f':\n                    *output_pointer = 'f';\n                    break;\n                case '\\n':\n                    *output_pointer = 'n';\n                    break;\n                case '\\r':\n                    *output_pointer = 'r';\n                    break;\n                case '\\t':\n                    *output_pointer = 't';\n                    break;\n                default:\n                    /* escape and print as unicode codepoint */\n                    sprintf((char*)output_pointer, \"u%04x\", *input_pointer);\n                    output_pointer += 4;\n                    break;\n            }\n        }\n    }\n    output[output_length + 1] = '\\\"';\n    output[output_length + 2] = '\\0';\n\n    return true;\n}\n\n/* Invoke print_string_ptr (which is useful) on an item. */\nstatic cJSON_bool print_string(const cJSON * const item, printbuffer * const p)\n{\n    return print_string_ptr((unsigned char*)item->valuestring, p);\n}\n\n/* Predeclare these prototypes. */\nstatic cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer);\nstatic cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer);\nstatic cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer);\nstatic cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer);\nstatic cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);\nstatic cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);\n\n/* Utility to jump whitespace and cr/lf */\nstatic parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)\n{\n    if ((buffer == NULL) || (buffer->content == NULL))\n    {\n        return NULL;\n    }\n\n    if (cannot_access_at_index(buffer, 0))\n    {\n        return buffer;\n    }\n\n    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))\n    {\n       buffer->offset++;\n    }\n\n    if (buffer->offset == buffer->length)\n    {\n        buffer->offset--;\n    }\n\n    return buffer;\n}\n\n/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */\nstatic parse_buffer *skip_utf8_bom(parse_buffer * const buffer)\n{\n    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))\n    {\n        return NULL;\n    }\n\n    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), \"\\xEF\\xBB\\xBF\", 3) == 0))\n    {\n        buffer->offset += 3;\n    }\n\n    return buffer;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)\n{\n    size_t buffer_length;\n\n    if (NULL == value)\n    {\n        return NULL;\n    }\n\n    /* Adding null character size due to require_null_terminated. */\n    buffer_length = strlen(value) + sizeof(\"\");\n\n    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);\n}\n\n/* Parse an object - create a new root, and populate. */\nCJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)\n{\n    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };\n    cJSON *item = NULL;\n\n    /* reset error position */\n    global_error.json = NULL;\n    global_error.position = 0;\n\n    if (value == NULL || 0 == buffer_length)\n    {\n        goto fail;\n    }\n\n    buffer.content = (const unsigned char*)value;\n    buffer.length = buffer_length;\n    buffer.offset = 0;\n    buffer.hooks = global_hooks;\n\n    item = cJSON_New_Item(&global_hooks);\n    if (item == NULL) /* memory fail */\n    {\n        goto fail;\n    }\n\n    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))\n    {\n        /* parse failure. ep is set. */\n        goto fail;\n    }\n\n    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */\n    if (require_null_terminated)\n    {\n        buffer_skip_whitespace(&buffer);\n        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\\0')\n        {\n            goto fail;\n        }\n    }\n    if (return_parse_end)\n    {\n        *return_parse_end = (const char*)buffer_at_offset(&buffer);\n    }\n\n    return item;\n\nfail:\n    if (item != NULL)\n    {\n        cJSON_Delete(item);\n    }\n\n    if (value != NULL)\n    {\n        error local_error;\n        local_error.json = (const unsigned char*)value;\n        local_error.position = 0;\n\n        if (buffer.offset < buffer.length)\n        {\n            local_error.position = buffer.offset;\n        }\n        else if (buffer.length > 0)\n        {\n            local_error.position = buffer.length - 1;\n        }\n\n        if (return_parse_end != NULL)\n        {\n            *return_parse_end = (const char*)local_error.json + local_error.position;\n        }\n\n        global_error = local_error;\n    }\n\n    return NULL;\n}\n\n/* Default options for cJSON_Parse */\nCJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)\n{\n    return cJSON_ParseWithOpts(value, 0, 0);\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)\n{\n    return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);\n}\n\n#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))\n\nstatic unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)\n{\n    static const size_t default_buffer_size = 256;\n    printbuffer buffer[1];\n    unsigned char *printed = NULL;\n\n    memset(buffer, 0, sizeof(buffer));\n\n    /* create buffer */\n    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);\n    buffer->length = default_buffer_size;\n    buffer->format = format;\n    buffer->hooks = *hooks;\n    if (buffer->buffer == NULL)\n    {\n        goto fail;\n    }\n\n    /* print the value */\n    if (!print_value(item, buffer))\n    {\n        goto fail;\n    }\n    update_offset(buffer);\n\n    /* check if reallocate is available */\n    if (hooks->reallocate != NULL)\n    {\n        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);\n        if (printed == NULL) {\n            goto fail;\n        }\n        buffer->buffer = NULL;\n    }\n    else /* otherwise copy the JSON over to a new buffer */\n    {\n        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);\n        if (printed == NULL)\n        {\n            goto fail;\n        }\n        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));\n        printed[buffer->offset] = '\\0'; /* just to be sure */\n\n        /* free the buffer */\n        hooks->deallocate(buffer->buffer);\n        buffer->buffer = NULL;\n    }\n\n    return printed;\n\nfail:\n    if (buffer->buffer != NULL)\n    {\n        hooks->deallocate(buffer->buffer);\n        buffer->buffer = NULL;\n    }\n\n    if (printed != NULL)\n    {\n        hooks->deallocate(printed);\n        printed = NULL;\n    }\n\n    return NULL;\n}\n\n/* Render a cJSON item/entity/structure to text. */\nCJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)\n{\n    return (char*)print(item, true, &global_hooks);\n}\n\nCJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)\n{\n    return (char*)print(item, false, &global_hooks);\n}\n\nCJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)\n{\n    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };\n\n    if (prebuffer < 0)\n    {\n        return NULL;\n    }\n\n    p.buffer = (unsigned char*)global_hooks.allocate((size_t)prebuffer);\n    if (!p.buffer)\n    {\n        return NULL;\n    }\n\n    p.length = (size_t)prebuffer;\n    p.offset = 0;\n    p.noalloc = false;\n    p.format = fmt;\n    p.hooks = global_hooks;\n\n    if (!print_value(item, &p))\n    {\n        global_hooks.deallocate(p.buffer);\n        p.buffer = NULL;\n        return NULL;\n    }\n\n    return (char*)p.buffer;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)\n{\n    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };\n\n    if ((length < 0) || (buffer == NULL))\n    {\n        return false;\n    }\n\n    p.buffer = (unsigned char*)buffer;\n    p.length = (size_t)length;\n    p.offset = 0;\n    p.noalloc = true;\n    p.format = format;\n    p.hooks = global_hooks;\n\n    return print_value(item, &p);\n}\n\n/* Parser core - when encountering text, process appropriately. */\nstatic cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)\n{\n    if ((input_buffer == NULL) || (input_buffer->content == NULL))\n    {\n        return false; /* no input */\n    }\n\n    /* parse the different types of values */\n    /* null */\n    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), \"null\", 4) == 0))\n    {\n        item->type = cJSON_NULL;\n        input_buffer->offset += 4;\n        return true;\n    }\n    /* false */\n    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), \"false\", 5) == 0))\n    {\n        item->type = cJSON_False;\n        input_buffer->offset += 5;\n        return true;\n    }\n    /* true */\n    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), \"true\", 4) == 0))\n    {\n        item->type = cJSON_True;\n        item->valueint = 1;\n        input_buffer->offset += 4;\n        return true;\n    }\n    /* string */\n    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\\\"'))\n    {\n        return parse_string(item, input_buffer);\n    }\n    /* number */\n    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))\n    {\n        return parse_number(item, input_buffer);\n    }\n    /* array */\n    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))\n    {\n        return parse_array(item, input_buffer);\n    }\n    /* object */\n    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))\n    {\n        return parse_object(item, input_buffer);\n    }\n\n    return false;\n}\n\n/* Render a value to text. */\nstatic cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)\n{\n    unsigned char *output = NULL;\n\n    if ((item == NULL) || (output_buffer == NULL))\n    {\n        return false;\n    }\n\n    switch ((item->type) & 0xFF)\n    {\n        case cJSON_NULL:\n            output = ensure(output_buffer, 5);\n            if (output == NULL)\n            {\n                return false;\n            }\n            strcpy((char*)output, \"null\");\n            return true;\n\n        case cJSON_False:\n            output = ensure(output_buffer, 6);\n            if (output == NULL)\n            {\n                return false;\n            }\n            strcpy((char*)output, \"false\");\n            return true;\n\n        case cJSON_True:\n            output = ensure(output_buffer, 5);\n            if (output == NULL)\n            {\n                return false;\n            }\n            strcpy((char*)output, \"true\");\n            return true;\n\n        case cJSON_Number:\n            return print_number(item, output_buffer);\n\n        case cJSON_Raw:\n        {\n            size_t raw_length = 0;\n            if (item->valuestring == NULL)\n            {\n                return false;\n            }\n\n            raw_length = strlen(item->valuestring) + sizeof(\"\");\n            output = ensure(output_buffer, raw_length);\n            if (output == NULL)\n            {\n                return false;\n            }\n            memcpy(output, item->valuestring, raw_length);\n            return true;\n        }\n\n        case cJSON_String:\n            return print_string(item, output_buffer);\n\n        case cJSON_Array:\n            return print_array(item, output_buffer);\n\n        case cJSON_Object:\n            return print_object(item, output_buffer);\n\n        default:\n            return false;\n    }\n}\n\n/* Build an array from input text. */\nstatic cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)\n{\n    cJSON *head = NULL; /* head of the linked list */\n    cJSON *current_item = NULL;\n\n    if (input_buffer->depth >= CJSON_NESTING_LIMIT)\n    {\n        return false; /* to deeply nested */\n    }\n    input_buffer->depth++;\n\n    if (buffer_at_offset(input_buffer)[0] != '[')\n    {\n        /* not an array */\n        goto fail;\n    }\n\n    input_buffer->offset++;\n    buffer_skip_whitespace(input_buffer);\n    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))\n    {\n        /* empty array */\n        goto success;\n    }\n\n    /* check if we skipped to the end of the buffer */\n    if (cannot_access_at_index(input_buffer, 0))\n    {\n        input_buffer->offset--;\n        goto fail;\n    }\n\n    /* step back to character in front of the first element */\n    input_buffer->offset--;\n    /* loop through the comma separated array elements */\n    do\n    {\n        /* allocate next item */\n        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));\n        if (new_item == NULL)\n        {\n            goto fail; /* allocation failure */\n        }\n\n        /* attach next item to list */\n        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n            /* add to the end and advance */\n            current_item->next = new_item;\n            new_item->prev = current_item;\n            current_item = new_item;\n        }\n\n        /* parse next value */\n        input_buffer->offset++;\n        buffer_skip_whitespace(input_buffer);\n        if (!parse_value(current_item, input_buffer))\n        {\n            goto fail; /* failed to parse value */\n        }\n        buffer_skip_whitespace(input_buffer);\n    }\n    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));\n\n    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')\n    {\n        goto fail; /* expected end of array */\n    }\n\nsuccess:\n    input_buffer->depth--;\n\n    if (head != NULL) {\n        head->prev = current_item;\n    }\n\n    item->type = cJSON_Array;\n    item->child = head;\n\n    input_buffer->offset++;\n\n    return true;\n\nfail:\n    if (head != NULL)\n    {\n        cJSON_Delete(head);\n    }\n\n    return false;\n}\n\n/* Render an array to text */\nstatic cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)\n{\n    unsigned char *output_pointer = NULL;\n    size_t length = 0;\n    cJSON *current_element = item->child;\n\n    if (output_buffer == NULL)\n    {\n        return false;\n    }\n\n    /* Compose the output array. */\n    /* opening square bracket */\n    output_pointer = ensure(output_buffer, 1);\n    if (output_pointer == NULL)\n    {\n        return false;\n    }\n\n    *output_pointer = '[';\n    output_buffer->offset++;\n    output_buffer->depth++;\n\n    while (current_element != NULL)\n    {\n        if (!print_value(current_element, output_buffer))\n        {\n            return false;\n        }\n        update_offset(output_buffer);\n        if (current_element->next)\n        {\n            length = (size_t) (output_buffer->format ? 2 : 1);\n            output_pointer = ensure(output_buffer, length + 1);\n            if (output_pointer == NULL)\n            {\n                return false;\n            }\n            *output_pointer++ = ',';\n            if(output_buffer->format)\n            {\n                *output_pointer++ = ' ';\n            }\n            *output_pointer = '\\0';\n            output_buffer->offset += length;\n        }\n        current_element = current_element->next;\n    }\n\n    output_pointer = ensure(output_buffer, 2);\n    if (output_pointer == NULL)\n    {\n        return false;\n    }\n    *output_pointer++ = ']';\n    *output_pointer = '\\0';\n    output_buffer->depth--;\n\n    return true;\n}\n\n/* Build an object from the text. */\nstatic cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)\n{\n    cJSON *head = NULL; /* linked list head */\n    cJSON *current_item = NULL;\n\n    if (input_buffer->depth >= CJSON_NESTING_LIMIT)\n    {\n        return false; /* to deeply nested */\n    }\n    input_buffer->depth++;\n\n    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))\n    {\n        goto fail; /* not an object */\n    }\n\n    input_buffer->offset++;\n    buffer_skip_whitespace(input_buffer);\n    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))\n    {\n        goto success; /* empty object */\n    }\n\n    /* check if we skipped to the end of the buffer */\n    if (cannot_access_at_index(input_buffer, 0))\n    {\n        input_buffer->offset--;\n        goto fail;\n    }\n\n    /* step back to character in front of the first element */\n    input_buffer->offset--;\n    /* loop through the comma separated array elements */\n    do\n    {\n        /* allocate next item */\n        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));\n        if (new_item == NULL)\n        {\n            goto fail; /* allocation failure */\n        }\n\n        /* attach next item to list */\n        if (head == NULL)\n        {\n            /* start the linked list */\n            current_item = head = new_item;\n        }\n        else\n        {\n            /* add to the end and advance */\n            current_item->next = new_item;\n            new_item->prev = current_item;\n            current_item = new_item;\n        }\n\n        if (cannot_access_at_index(input_buffer, 1))\n        {\n            goto fail; /* nothing comes after the comma */\n        }\n\n        /* parse the name of the child */\n        input_buffer->offset++;\n        buffer_skip_whitespace(input_buffer);\n        if (!parse_string(current_item, input_buffer))\n        {\n            goto fail; /* failed to parse name */\n        }\n        buffer_skip_whitespace(input_buffer);\n\n        /* swap valuestring and string, because we parsed the name */\n        current_item->string = current_item->valuestring;\n        current_item->valuestring = NULL;\n\n        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))\n        {\n            goto fail; /* invalid object */\n        }\n\n        /* parse the value */\n        input_buffer->offset++;\n        buffer_skip_whitespace(input_buffer);\n        if (!parse_value(current_item, input_buffer))\n        {\n            goto fail; /* failed to parse value */\n        }\n        buffer_skip_whitespace(input_buffer);\n    }\n    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));\n\n    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))\n    {\n        goto fail; /* expected end of object */\n    }\n\nsuccess:\n    input_buffer->depth--;\n\n    if (head != NULL) {\n        head->prev = current_item;\n    }\n\n    item->type = cJSON_Object;\n    item->child = head;\n\n    input_buffer->offset++;\n    return true;\n\nfail:\n    if (head != NULL)\n    {\n        cJSON_Delete(head);\n    }\n\n    return false;\n}\n\n/* Render an object to text. */\nstatic cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)\n{\n    unsigned char *output_pointer = NULL;\n    size_t length = 0;\n    cJSON *current_item = item->child;\n\n    if (output_buffer == NULL)\n    {\n        return false;\n    }\n\n    /* Compose the output: */\n    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\\n */\n    output_pointer = ensure(output_buffer, length + 1);\n    if (output_pointer == NULL)\n    {\n        return false;\n    }\n\n    *output_pointer++ = '{';\n    output_buffer->depth++;\n    if (output_buffer->format)\n    {\n        *output_pointer++ = '\\n';\n    }\n    output_buffer->offset += length;\n\n    while (current_item)\n    {\n        if (output_buffer->format)\n        {\n            size_t i;\n            output_pointer = ensure(output_buffer, output_buffer->depth);\n            if (output_pointer == NULL)\n            {\n                return false;\n            }\n            for (i = 0; i < output_buffer->depth; i++)\n            {\n                *output_pointer++ = '\\t';\n            }\n            output_buffer->offset += output_buffer->depth;\n        }\n\n        /* print key */\n        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))\n        {\n            return false;\n        }\n        update_offset(output_buffer);\n\n        length = (size_t) (output_buffer->format ? 2 : 1);\n        output_pointer = ensure(output_buffer, length);\n        if (output_pointer == NULL)\n        {\n            return false;\n        }\n        *output_pointer++ = ':';\n        if (output_buffer->format)\n        {\n            *output_pointer++ = '\\t';\n        }\n        output_buffer->offset += length;\n\n        /* print value */\n        if (!print_value(current_item, output_buffer))\n        {\n            return false;\n        }\n        update_offset(output_buffer);\n\n        /* print comma if not last */\n        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));\n        output_pointer = ensure(output_buffer, length + 1);\n        if (output_pointer == NULL)\n        {\n            return false;\n        }\n        if (current_item->next)\n        {\n            *output_pointer++ = ',';\n        }\n\n        if (output_buffer->format)\n        {\n            *output_pointer++ = '\\n';\n        }\n        *output_pointer = '\\0';\n        output_buffer->offset += length;\n\n        current_item = current_item->next;\n    }\n\n    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);\n    if (output_pointer == NULL)\n    {\n        return false;\n    }\n    if (output_buffer->format)\n    {\n        size_t i;\n        for (i = 0; i < (output_buffer->depth - 1); i++)\n        {\n            *output_pointer++ = '\\t';\n        }\n    }\n    *output_pointer++ = '}';\n    *output_pointer = '\\0';\n    output_buffer->depth--;\n\n    return true;\n}\n\n/* Get Array size/item / object item. */\nCJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)\n{\n    cJSON *child = NULL;\n    size_t size = 0;\n\n    if (array == NULL)\n    {\n        return 0;\n    }\n\n    child = array->child;\n\n    while(child != NULL)\n    {\n        size++;\n        child = child->next;\n    }\n\n    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */\n\n    return (int)size;\n}\n\nstatic cJSON* get_array_item(const cJSON *array, size_t index)\n{\n    cJSON *current_child = NULL;\n\n    if (array == NULL)\n    {\n        return NULL;\n    }\n\n    current_child = array->child;\n    while ((current_child != NULL) && (index > 0))\n    {\n        index--;\n        current_child = current_child->next;\n    }\n\n    return current_child;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)\n{\n    if (index < 0)\n    {\n        return NULL;\n    }\n\n    return get_array_item(array, (size_t)index);\n}\n\nstatic cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)\n{\n    cJSON *current_element = NULL;\n\n    if ((object == NULL) || (name == NULL))\n    {\n        return NULL;\n    }\n\n    current_element = object->child;\n    if (case_sensitive)\n    {\n        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))\n        {\n            current_element = current_element->next;\n        }\n    }\n    else\n    {\n        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))\n        {\n            current_element = current_element->next;\n        }\n    }\n\n    if ((current_element == NULL) || (current_element->string == NULL)) {\n        return NULL;\n    }\n\n    return current_element;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)\n{\n    return get_object_item(object, string, false);\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)\n{\n    return get_object_item(object, string, true);\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)\n{\n    return cJSON_GetObjectItem(object, string) ? 1 : 0;\n}\n\n/* Utility for array list handling. */\nstatic void suffix_object(cJSON *prev, cJSON *item)\n{\n    prev->next = item;\n    item->prev = prev;\n}\n\n/* Utility for handling references. */\nstatic cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)\n{\n    cJSON *reference = NULL;\n    if (item == NULL)\n    {\n        return NULL;\n    }\n\n    reference = cJSON_New_Item(hooks);\n    if (reference == NULL)\n    {\n        return NULL;\n    }\n\n    memcpy(reference, item, sizeof(cJSON));\n    reference->string = NULL;\n    reference->type |= cJSON_IsReference;\n    reference->next = reference->prev = NULL;\n    return reference;\n}\n\nstatic cJSON_bool add_item_to_array(cJSON *array, cJSON *item)\n{\n    cJSON *child = NULL;\n\n    if ((item == NULL) || (array == NULL) || (array == item))\n    {\n        return false;\n    }\n\n    child = array->child;\n    /*\n     * To find the last item in array quickly, we use prev in array\n     */\n    if (child == NULL)\n    {\n        /* list is empty, start new one */\n        array->child = item;\n        item->prev = item;\n        item->next = NULL;\n    }\n    else\n    {\n        /* append to the end */\n        if (child->prev)\n        {\n            suffix_object(child->prev, item);\n            array->child->prev = item;\n        }\n    }\n\n    return true;\n}\n\n/* Add item to array/object. */\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)\n{\n    return add_item_to_array(array, item);\n}\n\n#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))\n    #pragma GCC diagnostic push\n#endif\n#ifdef __GNUC__\n#pragma GCC diagnostic ignored \"-Wcast-qual\"\n#endif\n/* helper function to cast away const */\nstatic void* cast_away_const(const void* string)\n{\n    return (void*)string;\n}\n#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))\n    #pragma GCC diagnostic pop\n#endif\n\n\nstatic cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)\n{\n    char *new_key = NULL;\n    int new_type = cJSON_Invalid;\n\n    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))\n    {\n        return false;\n    }\n\n    if (constant_key)\n    {\n        new_key = (char*)cast_away_const(string);\n        new_type = item->type | cJSON_StringIsConst;\n    }\n    else\n    {\n        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);\n        if (new_key == NULL)\n        {\n            return false;\n        }\n\n        new_type = item->type & ~cJSON_StringIsConst;\n    }\n\n    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))\n    {\n        hooks->deallocate(item->string);\n    }\n\n    item->string = new_key;\n    item->type = new_type;\n\n    return add_item_to_array(object, item);\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)\n{\n    return add_item_to_object(object, string, item, &global_hooks, false);\n}\n\n/* Add an item to an object with constant string as key */\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)\n{\n    return add_item_to_object(object, string, item, &global_hooks, true);\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)\n{\n    if (array == NULL)\n    {\n        return false;\n    }\n\n    return add_item_to_array(array, create_reference(item, &global_hooks));\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)\n{\n    if ((object == NULL) || (string == NULL))\n    {\n        return false;\n    }\n\n    return add_item_to_object(object, string, create_reference(item, &global_hooks), &global_hooks, false);\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)\n{\n    cJSON *null = cJSON_CreateNull();\n    if (add_item_to_object(object, name, null, &global_hooks, false))\n    {\n        return null;\n    }\n\n    cJSON_Delete(null);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)\n{\n    cJSON *true_item = cJSON_CreateTrue();\n    if (add_item_to_object(object, name, true_item, &global_hooks, false))\n    {\n        return true_item;\n    }\n\n    cJSON_Delete(true_item);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)\n{\n    cJSON *false_item = cJSON_CreateFalse();\n    if (add_item_to_object(object, name, false_item, &global_hooks, false))\n    {\n        return false_item;\n    }\n\n    cJSON_Delete(false_item);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)\n{\n    cJSON *bool_item = cJSON_CreateBool(boolean);\n    if (add_item_to_object(object, name, bool_item, &global_hooks, false))\n    {\n        return bool_item;\n    }\n\n    cJSON_Delete(bool_item);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)\n{\n    cJSON *number_item = cJSON_CreateNumber(number);\n    if (add_item_to_object(object, name, number_item, &global_hooks, false))\n    {\n        return number_item;\n    }\n\n    cJSON_Delete(number_item);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)\n{\n    cJSON *string_item = cJSON_CreateString(string);\n    if (add_item_to_object(object, name, string_item, &global_hooks, false))\n    {\n        return string_item;\n    }\n\n    cJSON_Delete(string_item);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)\n{\n    cJSON *raw_item = cJSON_CreateRaw(raw);\n    if (add_item_to_object(object, name, raw_item, &global_hooks, false))\n    {\n        return raw_item;\n    }\n\n    cJSON_Delete(raw_item);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)\n{\n    cJSON *object_item = cJSON_CreateObject();\n    if (add_item_to_object(object, name, object_item, &global_hooks, false))\n    {\n        return object_item;\n    }\n\n    cJSON_Delete(object_item);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)\n{\n    cJSON *array = cJSON_CreateArray();\n    if (add_item_to_object(object, name, array, &global_hooks, false))\n    {\n        return array;\n    }\n\n    cJSON_Delete(array);\n    return NULL;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)\n{\n    if ((parent == NULL) || (item == NULL))\n    {\n        return NULL;\n    }\n\n    if (item != parent->child)\n    {\n        /* not the first element */\n        item->prev->next = item->next;\n    }\n    if (item->next != NULL)\n    {\n        /* not the last element */\n        item->next->prev = item->prev;\n    }\n\n    if (item == parent->child)\n    {\n        /* first element */\n        parent->child = item->next;\n    }\n    else if (item->next == NULL)\n    {\n        /* last element */\n        parent->child->prev = item->prev;\n    }\n\n    /* make sure the detached item doesn't point anywhere anymore */\n    item->prev = NULL;\n    item->next = NULL;\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)\n{\n    if (which < 0)\n    {\n        return NULL;\n    }\n\n    return cJSON_DetachItemViaPointer(array, get_array_item(array, (size_t)which));\n}\n\nCJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)\n{\n    cJSON_Delete(cJSON_DetachItemFromArray(array, which));\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)\n{\n    cJSON *to_detach = cJSON_GetObjectItem(object, string);\n\n    return cJSON_DetachItemViaPointer(object, to_detach);\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)\n{\n    cJSON *to_detach = cJSON_GetObjectItemCaseSensitive(object, string);\n\n    return cJSON_DetachItemViaPointer(object, to_detach);\n}\n\nCJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)\n{\n    cJSON_Delete(cJSON_DetachItemFromObject(object, string));\n}\n\nCJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)\n{\n    cJSON_Delete(cJSON_DetachItemFromObjectCaseSensitive(object, string));\n}\n\n/* Replace array/object items with new ones. */\nCJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)\n{\n    cJSON *after_inserted = NULL;\n\n    if (which < 0 || newitem == NULL)\n    {\n        return false;\n    }\n\n    after_inserted = get_array_item(array, (size_t)which);\n    if (after_inserted == NULL)\n    {\n        return add_item_to_array(array, newitem);\n    }\n\n    if (after_inserted != array->child && after_inserted->prev == NULL) {\n        /* return false if after_inserted is a corrupted array item */\n        return false;\n    }\n\n    newitem->next = after_inserted;\n    newitem->prev = after_inserted->prev;\n    after_inserted->prev = newitem;\n    if (after_inserted == array->child)\n    {\n        array->child = newitem;\n    }\n    else\n    {\n        newitem->prev->next = newitem;\n    }\n    return true;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)\n{\n    if ((parent == NULL) || (parent->child == NULL) || (replacement == NULL) || (item == NULL))\n    {\n        return false;\n    }\n\n    if (replacement == item)\n    {\n        return true;\n    }\n\n    replacement->next = item->next;\n    replacement->prev = item->prev;\n\n    if (replacement->next != NULL)\n    {\n        replacement->next->prev = replacement;\n    }\n    if (parent->child == item)\n    {\n        if (parent->child->prev == parent->child)\n        {\n            replacement->prev = replacement;\n        }\n        parent->child = replacement;\n    }\n    else\n    {   /*\n         * To find the last item in array quickly, we use prev in array.\n         * We can't modify the last item's next pointer where this item was the parent's child\n         */\n        if (replacement->prev != NULL)\n        {\n            replacement->prev->next = replacement;\n        }\n        if (replacement->next == NULL)\n        {\n            parent->child->prev = replacement;\n        }\n    }\n\n    item->next = NULL;\n    item->prev = NULL;\n    cJSON_Delete(item);\n\n    return true;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)\n{\n    if (which < 0)\n    {\n        return false;\n    }\n\n    return cJSON_ReplaceItemViaPointer(array, get_array_item(array, (size_t)which), newitem);\n}\n\nstatic cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)\n{\n    if ((replacement == NULL) || (string == NULL))\n    {\n        return false;\n    }\n\n    /* replace the name in the replacement */\n    if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))\n    {\n        cJSON_free(replacement->string);\n    }\n    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);\n    if (replacement->string == NULL)\n    {\n        return false;\n    }\n\n    replacement->type &= ~cJSON_StringIsConst;\n\n    return cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)\n{\n    return replace_item_in_object(object, string, newitem, false);\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)\n{\n    return replace_item_in_object(object, string, newitem, true);\n}\n\n/* Create basic types: */\nCJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if(item)\n    {\n        item->type = cJSON_NULL;\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if(item)\n    {\n        item->type = cJSON_True;\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if(item)\n    {\n        item->type = cJSON_False;\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if(item)\n    {\n        item->type = boolean ? cJSON_True : cJSON_False;\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if(item)\n    {\n        item->type = cJSON_Number;\n        item->valuedouble = num;\n\n        /* use saturation in case of overflow */\n        if (num >= INT_MAX)\n        {\n            item->valueint = INT_MAX;\n        }\n        else if (num <= (double)INT_MIN)\n        {\n            item->valueint = INT_MIN;\n        }\n        else\n        {\n            item->valueint = (int)num;\n        }\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if(item)\n    {\n        item->type = cJSON_String;\n        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);\n        if(!item->valuestring)\n        {\n            cJSON_Delete(item);\n            return NULL;\n        }\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if (item != NULL)\n    {\n        item->type = cJSON_String | cJSON_IsReference;\n        item->valuestring = (char*)cast_away_const(string);\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if (item != NULL) {\n        item->type = cJSON_Object | cJSON_IsReference;\n        item->child = (cJSON*)cast_away_const(child);\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if (item != NULL) {\n        item->type = cJSON_Array | cJSON_IsReference;\n        item->child = (cJSON*)cast_away_const(child);\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if(item)\n    {\n        item->type = cJSON_Raw;\n        item->valuestring = (char*)cJSON_strdup((const unsigned char*)raw, &global_hooks);\n        if(!item->valuestring)\n        {\n            cJSON_Delete(item);\n            return NULL;\n        }\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if(item)\n    {\n        item->type=cJSON_Array;\n    }\n\n    return item;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)\n{\n    cJSON *item = cJSON_New_Item(&global_hooks);\n    if (item)\n    {\n        item->type = cJSON_Object;\n    }\n\n    return item;\n}\n\n/* Create Arrays: */\nCJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)\n{\n    size_t i = 0;\n    cJSON *n = NULL;\n    cJSON *p = NULL;\n    cJSON *a = NULL;\n\n    if ((count < 0) || (numbers == NULL))\n    {\n        return NULL;\n    }\n\n    a = cJSON_CreateArray();\n\n    for(i = 0; a && (i < (size_t)count); i++)\n    {\n        n = cJSON_CreateNumber(numbers[i]);\n        if (!n)\n        {\n            cJSON_Delete(a);\n            return NULL;\n        }\n        if(!i)\n        {\n            a->child = n;\n        }\n        else\n        {\n            suffix_object(p, n);\n        }\n        p = n;\n    }\n\n    if (a && a->child) {\n        a->child->prev = n;\n    }\n\n    return a;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)\n{\n    size_t i = 0;\n    cJSON *n = NULL;\n    cJSON *p = NULL;\n    cJSON *a = NULL;\n\n    if ((count < 0) || (numbers == NULL))\n    {\n        return NULL;\n    }\n\n    a = cJSON_CreateArray();\n\n    for(i = 0; a && (i < (size_t)count); i++)\n    {\n        n = cJSON_CreateNumber((double)numbers[i]);\n        if(!n)\n        {\n            cJSON_Delete(a);\n            return NULL;\n        }\n        if(!i)\n        {\n            a->child = n;\n        }\n        else\n        {\n            suffix_object(p, n);\n        }\n        p = n;\n    }\n\n    if (a && a->child) {\n        a->child->prev = n;\n    }\n\n    return a;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)\n{\n    size_t i = 0;\n    cJSON *n = NULL;\n    cJSON *p = NULL;\n    cJSON *a = NULL;\n\n    if ((count < 0) || (numbers == NULL))\n    {\n        return NULL;\n    }\n\n    a = cJSON_CreateArray();\n\n    for(i = 0; a && (i < (size_t)count); i++)\n    {\n        n = cJSON_CreateNumber(numbers[i]);\n        if(!n)\n        {\n            cJSON_Delete(a);\n            return NULL;\n        }\n        if(!i)\n        {\n            a->child = n;\n        }\n        else\n        {\n            suffix_object(p, n);\n        }\n        p = n;\n    }\n\n    if (a && a->child) {\n        a->child->prev = n;\n    }\n\n    return a;\n}\n\nCJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count)\n{\n    size_t i = 0;\n    cJSON *n = NULL;\n    cJSON *p = NULL;\n    cJSON *a = NULL;\n\n    if ((count < 0) || (strings == NULL))\n    {\n        return NULL;\n    }\n\n    a = cJSON_CreateArray();\n\n    for (i = 0; a && (i < (size_t)count); i++)\n    {\n        n = cJSON_CreateString(strings[i]);\n        if(!n)\n        {\n            cJSON_Delete(a);\n            return NULL;\n        }\n        if(!i)\n        {\n            a->child = n;\n        }\n        else\n        {\n            suffix_object(p,n);\n        }\n        p = n;\n    }\n\n    if (a && a->child) {\n        a->child->prev = n;\n    }\n\n    return a;\n}\n\n/* Duplication */\nCJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)\n{\n    cJSON *newitem = NULL;\n    cJSON *child = NULL;\n    cJSON *next = NULL;\n    cJSON *newchild = NULL;\n\n    /* Bail on bad ptr */\n    if (!item)\n    {\n        goto fail;\n    }\n    /* Create new item */\n    newitem = cJSON_New_Item(&global_hooks);\n    if (!newitem)\n    {\n        goto fail;\n    }\n    /* Copy over all vars */\n    newitem->type = item->type & (~cJSON_IsReference);\n    newitem->valueint = item->valueint;\n    newitem->valuedouble = item->valuedouble;\n    if (item->valuestring)\n    {\n        newitem->valuestring = (char*)cJSON_strdup((unsigned char*)item->valuestring, &global_hooks);\n        if (!newitem->valuestring)\n        {\n            goto fail;\n        }\n    }\n    if (item->string)\n    {\n        newitem->string = (item->type&cJSON_StringIsConst) ? item->string : (char*)cJSON_strdup((unsigned char*)item->string, &global_hooks);\n        if (!newitem->string)\n        {\n            goto fail;\n        }\n    }\n    /* If non-recursive, then we're done! */\n    if (!recurse)\n    {\n        return newitem;\n    }\n    /* Walk the ->next chain for the child. */\n    child = item->child;\n    while (child != NULL)\n    {\n        newchild = cJSON_Duplicate(child, true); /* Duplicate (with recurse) each item in the ->next chain */\n        if (!newchild)\n        {\n            goto fail;\n        }\n        if (next != NULL)\n        {\n            /* If newitem->child already set, then crosswire ->prev and ->next and move on */\n            next->next = newchild;\n            newchild->prev = next;\n            next = newchild;\n        }\n        else\n        {\n            /* Set newitem->child and move to it */\n            newitem->child = newchild;\n            next = newchild;\n        }\n        child = child->next;\n    }\n    if (newitem && newitem->child)\n    {\n        newitem->child->prev = newchild;\n    }\n\n    return newitem;\n\nfail:\n    if (newitem != NULL)\n    {\n        cJSON_Delete(newitem);\n    }\n\n    return NULL;\n}\n\nstatic void skip_oneline_comment(char **input)\n{\n    *input += static_strlen(\"//\");\n\n    for (; (*input)[0] != '\\0'; ++(*input))\n    {\n        if ((*input)[0] == '\\n') {\n            *input += static_strlen(\"\\n\");\n            return;\n        }\n    }\n}\n\nstatic void skip_multiline_comment(char **input)\n{\n    *input += static_strlen(\"/*\");\n\n    for (; (*input)[0] != '\\0'; ++(*input))\n    {\n        if (((*input)[0] == '*') && ((*input)[1] == '/'))\n        {\n            *input += static_strlen(\"*/\");\n            return;\n        }\n    }\n}\n\nstatic void minify_string(char **input, char **output) {\n    (*output)[0] = (*input)[0];\n    *input += static_strlen(\"\\\"\");\n    *output += static_strlen(\"\\\"\");\n\n\n    for (; (*input)[0] != '\\0'; (void)++(*input), ++(*output)) {\n        (*output)[0] = (*input)[0];\n\n        if ((*input)[0] == '\\\"') {\n            (*output)[0] = '\\\"';\n            *input += static_strlen(\"\\\"\");\n            *output += static_strlen(\"\\\"\");\n            return;\n        } else if (((*input)[0] == '\\\\') && ((*input)[1] == '\\\"')) {\n            (*output)[1] = (*input)[1];\n            *input += static_strlen(\"\\\"\");\n            *output += static_strlen(\"\\\"\");\n        }\n    }\n}\n\nCJSON_PUBLIC(void) cJSON_Minify(char *json)\n{\n    char *into = json;\n\n    if (json == NULL)\n    {\n        return;\n    }\n\n    while (json[0] != '\\0')\n    {\n        switch (json[0])\n        {\n            case ' ':\n            case '\\t':\n            case '\\r':\n            case '\\n':\n                json++;\n                break;\n\n            case '/':\n                if (json[1] == '/')\n                {\n                    skip_oneline_comment(&json);\n                }\n                else if (json[1] == '*')\n                {\n                    skip_multiline_comment(&json);\n                } else {\n                    json++;\n                }\n                break;\n\n            case '\\\"':\n                minify_string(&json, (char**)&into);\n                break;\n\n            default:\n                into[0] = json[0];\n                json++;\n                into++;\n        }\n    }\n\n    /* and null-terminate. */\n    *into = '\\0';\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xFF) == cJSON_Invalid;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xFF) == cJSON_False;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xff) == cJSON_True;\n}\n\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & (cJSON_True | cJSON_False)) != 0;\n}\nCJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xFF) == cJSON_NULL;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xFF) == cJSON_Number;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xFF) == cJSON_String;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xFF) == cJSON_Array;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xFF) == cJSON_Object;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)\n{\n    if (item == NULL)\n    {\n        return false;\n    }\n\n    return (item->type & 0xFF) == cJSON_Raw;\n}\n\nCJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)\n{\n    if ((a == NULL) || (b == NULL) || ((a->type & 0xFF) != (b->type & 0xFF)))\n    {\n        return false;\n    }\n\n    /* check if type is valid */\n    switch (a->type & 0xFF)\n    {\n        case cJSON_False:\n        case cJSON_True:\n        case cJSON_NULL:\n        case cJSON_Number:\n        case cJSON_String:\n        case cJSON_Raw:\n        case cJSON_Array:\n        case cJSON_Object:\n            break;\n\n        default:\n            return false;\n    }\n\n    /* identical objects are equal */\n    if (a == b)\n    {\n        return true;\n    }\n\n    switch (a->type & 0xFF)\n    {\n        /* in these cases and equal type is enough */\n        case cJSON_False:\n        case cJSON_True:\n        case cJSON_NULL:\n            return true;\n\n        case cJSON_Number:\n            if (compare_double(a->valuedouble, b->valuedouble))\n            {\n                return true;\n            }\n            return false;\n\n        case cJSON_String:\n        case cJSON_Raw:\n            if ((a->valuestring == NULL) || (b->valuestring == NULL))\n            {\n                return false;\n            }\n            if (strcmp(a->valuestring, b->valuestring) == 0)\n            {\n                return true;\n            }\n\n            return false;\n\n        case cJSON_Array:\n        {\n            cJSON *a_element = a->child;\n            cJSON *b_element = b->child;\n\n            for (; (a_element != NULL) && (b_element != NULL);)\n            {\n                if (!cJSON_Compare(a_element, b_element, case_sensitive))\n                {\n                    return false;\n                }\n\n                a_element = a_element->next;\n                b_element = b_element->next;\n            }\n\n            /* one of the arrays is longer than the other */\n            if (a_element != b_element) {\n                return false;\n            }\n\n            return true;\n        }\n\n        case cJSON_Object:\n        {\n            cJSON *a_element = NULL;\n            cJSON *b_element = NULL;\n            cJSON_ArrayForEach(a_element, a)\n            {\n                /* TODO This has O(n^2) runtime, which is horrible! */\n                b_element = get_object_item(b, a_element->string, case_sensitive);\n                if (b_element == NULL)\n                {\n                    return false;\n                }\n\n                if (!cJSON_Compare(a_element, b_element, case_sensitive))\n                {\n                    return false;\n                }\n            }\n\n            /* doing this twice, once on a and b to prevent true comparison if a subset of b\n             * TODO: Do this the proper way, this is just a fix for now */\n            cJSON_ArrayForEach(b_element, b)\n            {\n                a_element = get_object_item(a, b_element->string, case_sensitive);\n                if (a_element == NULL)\n                {\n                    return false;\n                }\n\n                if (!cJSON_Compare(b_element, a_element, case_sensitive))\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        default:\n            return false;\n    }\n}\n\nCJSON_PUBLIC(void *) cJSON_malloc(size_t size)\n{\n    return global_hooks.allocate(size);\n}\n\nCJSON_PUBLIC(void) cJSON_free(void *object)\n{\n    global_hooks.deallocate(object);\n    object = NULL;\n}"
	}, {
		"path":	"src/dependencies/cJSON/cJSON.h",
		"original_path":	"src/dependencies/cJSON/cJSON.h",
		"dir":	"src/dependencies/cJSON/",
		"full_name":	"cJSON.h",
		"name":	"cJSON",
		"extension":	"h",
		"hardware_sha256":	"cfb9f667b8fc523199f26502c3b4da35e20711d6a44b386eb03820fe558ec19b",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	16191,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	16191,
		"content_sha256":	"cfb9f667b8fc523199f26502c3b4da35e20711d6a44b386eb03820fe558ec19b",
		"is_binary":	false,
		"content":	"/*\n  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\n#ifndef cJSON__h\n#define cJSON__h\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n#if !defined(__WINDOWS__) && (defined(WIN32) || defined(WIN64) || defined(_MSC_VER) || defined(_WIN32))\n#define __WINDOWS__\n#endif\n\n#ifdef __WINDOWS__\n\n/* When compiling for windows, we specify a specific calling convention to avoid issues where we are being called from a project with a different default calling convention.  For windows you have 3 define options:\n\nCJSON_HIDE_SYMBOLS - Define this in the case where you don't want to ever dllexport symbols\nCJSON_EXPORT_SYMBOLS - Define this on library build when you want to dllexport symbols (default)\nCJSON_IMPORT_SYMBOLS - Define this if you want to dllimport symbol\n\nFor *nix builds that support visibility attribute, you can define similar behavior by\n\nsetting default visibility to hidden by adding\n-fvisibility=hidden (for gcc)\nor\n-xldscope=hidden (for sun cc)\nto CFLAGS\n\nthen using the CJSON_API_VISIBILITY flag to \"export\" the same symbols the way CJSON_EXPORT_SYMBOLS does\n\n*/\n\n#define CJSON_CDECL __cdecl\n#define CJSON_STDCALL __stdcall\n\n/* export symbols by default, this is necessary for copy pasting the C and header file */\n#if !defined(CJSON_HIDE_SYMBOLS) && !defined(CJSON_IMPORT_SYMBOLS) && !defined(CJSON_EXPORT_SYMBOLS)\n#define CJSON_EXPORT_SYMBOLS\n#endif\n\n#if defined(CJSON_HIDE_SYMBOLS)\n#define CJSON_PUBLIC(type)   type CJSON_STDCALL\n#elif defined(CJSON_EXPORT_SYMBOLS)\n#define CJSON_PUBLIC(type)   __declspec(dllexport) type CJSON_STDCALL\n#elif defined(CJSON_IMPORT_SYMBOLS)\n#define CJSON_PUBLIC(type)   __declspec(dllimport) type CJSON_STDCALL\n#endif\n#else /* !__WINDOWS__ */\n#define CJSON_CDECL\n#define CJSON_STDCALL\n\n#if (defined(__GNUC__) || defined(__SUNPRO_CC) || defined (__SUNPRO_C)) && defined(CJSON_API_VISIBILITY)\n#define CJSON_PUBLIC(type)   __attribute__((visibility(\"default\"))) type\n#else\n#define CJSON_PUBLIC(type) type\n#endif\n#endif\n\n/* project version */\n#define CJSON_VERSION_MAJOR 1\n#define CJSON_VERSION_MINOR 7\n#define CJSON_VERSION_PATCH 18\n\n#include <stddef.h>\n\n/* cJSON Types: */\n#define cJSON_Invalid (0)\n#define cJSON_False  (1 << 0)\n#define cJSON_True   (1 << 1)\n#define cJSON_NULL   (1 << 2)\n#define cJSON_Number (1 << 3)\n#define cJSON_String (1 << 4)\n#define cJSON_Array  (1 << 5)\n#define cJSON_Object (1 << 6)\n#define cJSON_Raw    (1 << 7) /* raw json */\n\n#define cJSON_IsReference 256\n#define cJSON_StringIsConst 512\n\n/* The cJSON structure: */\ntypedef struct cJSON\n{\n    /* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */\n    struct cJSON *next;\n    struct cJSON *prev;\n    /* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */\n    struct cJSON *child;\n\n    /* The type of the item, as above. */\n    int type;\n\n    /* The item's string, if type==cJSON_String  and type == cJSON_Raw */\n    char *valuestring;\n    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */\n    int valueint;\n    /* The item's number, if type==cJSON_Number */\n    double valuedouble;\n\n    /* The item's name string, if this item is the child of, or is in the list of subitems of an object. */\n    char *string;\n} cJSON;\n\ntypedef struct cJSON_Hooks\n{\n      /* malloc/free are CDECL on Windows regardless of the default calling convention of the compiler, so ensure the hooks allow passing those functions directly. */\n      void *(CJSON_CDECL *malloc_fn)(size_t sz);\n      void (CJSON_CDECL *free_fn)(void *ptr);\n} cJSON_Hooks;\n\ntypedef int cJSON_bool;\n\n/* Limits how deeply nested arrays/objects can be before cJSON rejects to parse them.\n * This is to prevent stack overflows. */\n#ifndef CJSON_NESTING_LIMIT\n#define CJSON_NESTING_LIMIT 1000\n#endif\n\n/* returns the version of cJSON as a string */\nCJSON_PUBLIC(const char*) cJSON_Version(void);\n\n/* Supply malloc, realloc and free functions to cJSON */\nCJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);\n\n/* Memory Management: the caller is always responsible to free the results from all variants of cJSON_Parse (with cJSON_Delete) and cJSON_Print (with stdlib free, cJSON_Hooks.free_fn, or cJSON_free as appropriate). The exception is cJSON_PrintPreallocated, where the caller has full responsibility of the buffer. */\n/* Supply a block of JSON, and this returns a cJSON object you can interrogate. */\nCJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value);\nCJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length);\n/* ParseWithOpts allows you to require (and check) that the JSON is null terminated, and to retrieve the pointer to the final byte parsed. */\n/* If you supply a ptr in return_parse_end and parsing fails, then return_parse_end will contain a pointer to the error so will match cJSON_GetErrorPtr(). */\nCJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated);\nCJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated);\n\n/* Render a cJSON entity to text for transfer/storage. */\nCJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);\n/* Render a cJSON entity to text for transfer/storage without any formatting. */\nCJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);\n/* Render a cJSON entity to text using a buffered strategy. prebuffer is a guess at the final size. guessing well reduces reallocation. fmt=0 gives unformatted, =1 gives formatted */\nCJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt);\n/* Render a cJSON entity to text using a buffer already allocated in memory with given length. Returns 1 on success and 0 on failure. */\n/* NOTE: cJSON is not always 100% accurate in estimating how much memory it will use, so to be safe allocate 5 bytes more than you actually need */\nCJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format);\n/* Delete a cJSON entity and all subentities. */\nCJSON_PUBLIC(void) cJSON_Delete(cJSON *item);\n\n/* Returns the number of items in an array (or object). */\nCJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);\n/* Retrieve item number \"index\" from array \"array\". Returns NULL if unsuccessful. */\nCJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index);\n/* Get item \"string\" from object. Case insensitive. */\nCJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string);\nCJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string);\nCJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string);\n/* For analysing failed parses. This returns a pointer to the parse error. You'll probably need to look a few chars back to make sense of it. Defined when cJSON_Parse() returns 0. 0 when cJSON_Parse() succeeds. */\nCJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void);\n\n/* Check item type and return its value */\nCJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item);\nCJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item);\n\n/* These functions check the type of an item */\nCJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);\nCJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);\n\n/* These calls create a cJSON item of the appropriate type. */\nCJSON_PUBLIC(cJSON *) cJSON_CreateNull(void);\nCJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void);\nCJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void);\nCJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);\nCJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num);\nCJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string);\n/* raw json */\nCJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw);\nCJSON_PUBLIC(cJSON *) cJSON_CreateArray(void);\nCJSON_PUBLIC(cJSON *) cJSON_CreateObject(void);\n\n/* Create a string where valuestring references a string so\n * it will not be freed by cJSON_Delete */\nCJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string);\n/* Create an object/array that only references it's elements so\n * they will not be freed by cJSON_Delete */\nCJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);\nCJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);\n\n/* These utilities create an Array of count items.\n * The parameter count cannot be greater than the number of elements in the number array, otherwise array access will be out of bounds.*/\nCJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count);\nCJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count);\nCJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count);\nCJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count);\n\n/* Append item to the specified array/object. */\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item);\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item);\n/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object.\n * WARNING: When this function was used, make sure to always check that (item->type & cJSON_StringIsConst) is zero before\n * writing to `item->string` */\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item);\n/* Append reference to item to the specified array/object. Use this when you want to add an existing cJSON to a new cJSON, but don't want to corrupt your existing cJSON. */\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);\nCJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item);\n\n/* Remove/Detach items from Arrays/Objects. */\nCJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item);\nCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which);\nCJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which);\nCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string);\nCJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string);\nCJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string);\nCJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string);\n\n/* Update array items. */\nCJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem); /* Shifts pre-existing items to the right. */\nCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement);\nCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem);\nCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem);\nCJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object,const char *string,cJSON *newitem);\n\n/* Duplicate a cJSON item */\nCJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse);\n/* Duplicate will create a new, identical cJSON item to the one you pass, in new memory that will\n * need to be released. With recurse!=0, it will duplicate any children connected to the item.\n * The item->next and ->prev pointers are always zero on return from Duplicate. */\n/* Recursively compare two cJSON items for equality. If either a or b is NULL or invalid, they will be considered unequal.\n * case_sensitive determines if object keys are treated case sensitive (1) or case insensitive (0) */\nCJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive);\n\n/* Minify a strings, remove blank characters(such as ' ', '\\t', '\\r', '\\n') from strings.\n * The input pointer json cannot point to a read-only address area, such as a string constant,\n * but should point to a readable and writable address area. */\nCJSON_PUBLIC(void) cJSON_Minify(char *json);\n\n/* Helper functions for creating and adding items to an object at the same time.\n * They return the added item or NULL on failure. */\nCJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name);\nCJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name);\nCJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name);\nCJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean);\nCJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number);\nCJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string);\nCJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw);\nCJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name);\nCJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name);\n\n/* When assigning an integer value, it needs to be propagated to valuedouble too. */\n#define cJSON_SetIntValue(object, number) ((object) ? (object)->valueint = (object)->valuedouble = (number) : (number))\n/* helper for the cJSON_SetNumberValue macro */\nCJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number);\n#define cJSON_SetNumberValue(object, number) ((object != NULL) ? cJSON_SetNumberHelper(object, (double)number) : (number))\n/* Change the valuestring of a cJSON_String object, only takes effect when type of object is cJSON_String */\nCJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring);\n\n/* If the object is not a boolean type this does nothing and returns cJSON_Invalid else it returns the new type*/\n#define cJSON_SetBoolValue(object, boolValue) ( \\\n    (object != NULL && ((object)->type & (cJSON_False|cJSON_True))) ? \\\n    (object)->type=((object)->type &(~(cJSON_False|cJSON_True)))|((boolValue)?cJSON_True:cJSON_False) : \\\n    cJSON_Invalid\\\n)\n\n/* Macro for iterating over an array or object */\n#define cJSON_ArrayForEach(element, array) for(element = (array != NULL) ? (array)->child : NULL; element != NULL; element = element->next)\n\n/* malloc/free objects using the malloc/free functions that have been set with cJSON_InitHooks */\nCJSON_PUBLIC(void *) cJSON_malloc(size_t size);\nCJSON_PUBLIC(void) cJSON_free(void *object);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif"
	}, {
		"path":	"src/dependencies/declaration.h",
		"original_path":	"src/dependencies/declaration.h",
		"dir":	"src/dependencies/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"8042ae2fe206721f8659823fb433cf56e29eead8e6bfa77a062c9e2cef2058e5",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	224,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	224,
		"content_sha256":	"8042ae2fe206721f8659823fb433cf56e29eead8e6bfa77a062c9e2cef2058e5",
		"is_binary":	false,
		"content":	"#ifndef cJSON__h\n#include \"cJSON/cJSON.h\"\n#define PRIVATE_DTW_CJSON_DEFINED_IN_DO_THE_WORLD\n#endif //cJSON__h\n\n#ifndef SHA_256_H\n#include \"sha256/sha-256.h\"\n#define PRIVATE_DTW_SHA_DEFINED_IN_DO_THE_WORLD\n#endif  //SHA_256_H"
	}, {
		"path":	"src/dependencies/definition.c",
		"original_path":	"src/dependencies/definition.c",
		"dir":	"src/dependencies/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"9350bf32569e5c5e77715620e2e3d6e5f3b346872a33810c10621f28259a61f0",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	220,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	220,
		"content_sha256":	"9350bf32569e5c5e77715620e2e3d6e5f3b346872a33810c10621f28259a61f0",
		"is_binary":	false,
		"content":	"\n#ifdef PRIVATE_DTW_CJSON_DEFINED_IN_DO_THE_WORLD\n#include \"cJSON/cJSON.c\"\n#undef true\n#define true 1\n#undef false\n#define false 0\n#endif\n\n#ifdef PRIVATE_DTW_SHA_DEFINED_IN_DO_THE_WORLD\n#include \"sha256/sha-256.c\"\n#endif"
	}, {
		"path":	"src/dependencies/sha256/",
		"original_path":	"src/dependencies/sha256/",
		"dir":	"src/dependencies/sha256/"
	}, {
		"path":	"src/dependencies/sha256/sha-256.c",
		"original_path":	"src/dependencies/sha256/sha-256.c",
		"dir":	"src/dependencies/sha256/",
		"full_name":	"sha-256.c",
		"name":	"sha-256",
		"extension":	"c",
		"hardware_sha256":	"397ea6fd93853260df448081af779b7792e75bd2f5e50bc01149eefd0b8a2cde",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	7515,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	7515,
		"content_sha256":	"397ea6fd93853260df448081af779b7792e75bd2f5e50bc01149eefd0b8a2cde",
		"is_binary":	false,
		"content":	"#include \"sha-256.h\"\n\n#define TOTAL_LEN_LEN 8\n\n/*\n * Comments from pseudo-code at https://en.wikipedia.org/wiki/SHA-2 are reproduced here.\n * When useful for clarification, portions of the pseudo-code are reproduced here too.\n */\n\n/*\n * @brief Rotate a 32-bit value by a number of bits to the right.\n * @param value The value to be rotated.\n * @param count The number of bits to rotate by.\n * @return The rotated value.\n */\nstatic inline uint32_t right_rot(uint32_t value, unsigned int count)\n{\n\t/*\n\t * Defined behaviour in standard C for all count where 0 < count < 32, which is what we need here.\n\t */\n\treturn value >> count | value << (32 - count);\n}\n\n/*\n * @brief Update a hash value under calculation with a new chunk of data.\n * @param h Pointer to the first hash item, of a total of eight.\n * @param p Pointer to the chunk data, which has a standard length.\n *\n * @note This is the SHA-256 work horse.\n */\nstatic inline void consume_chunk(uint32_t *h, const uint8_t *p)\n{\n\tunsigned i, j;\n\tuint32_t ah[8];\n\n\t/* Initialize working variables to current hash value: */\n\tfor (i = 0; i < 8; i++)\n\t\tah[i] = h[i];\n\n\t/*\n\t * The w-array is really w[64], but since we only need 16 of them at a time, we save stack by\n\t * calculating 16 at a time.\n\t *\n\t * This optimization was not there initially and the rest of the comments about w[64] are kept in their\n\t * initial state.\n\t */\n\n\t/*\n\t * create a 64-entry message schedule array w[0..63] of 32-bit words (The initial values in w[0..63]\n\t * don't matter, so many implementations zero them here) copy chunk into first 16 words w[0..15] of the\n\t * message schedule array\n\t */\n\tuint32_t w[16];\n\n\t/* Compression function main loop: */\n\tfor (i = 0; i < 4; i++) {\n\t\tfor (j = 0; j < 16; j++) {\n\t\t\tif (i == 0) {\n\t\t\t\tw[j] =\n\t\t\t\t    (uint32_t)p[0] << 24 | (uint32_t)p[1] << 16 | (uint32_t)p[2] << 8 | (uint32_t)p[3];\n\t\t\t\tp += 4;\n\t\t\t} else {\n\t\t\t\t/* Extend the first 16 words into the remaining 48 words w[16..63] of the\n\t\t\t\t * message schedule array: */\n\t\t\t\tconst uint32_t s0 = right_rot(w[(j + 1) & 0xf], 7) ^ right_rot(w[(j + 1) & 0xf], 18) ^\n\t\t\t\t\t\t    (w[(j + 1) & 0xf] >> 3);\n\t\t\t\tconst uint32_t s1 = right_rot(w[(j + 14) & 0xf], 17) ^\n\t\t\t\t\t\t    right_rot(w[(j + 14) & 0xf], 19) ^ (w[(j + 14) & 0xf] >> 10);\n\t\t\t\tw[j] = w[j] + s0 + w[(j + 9) & 0xf] + s1;\n\t\t\t}\n\t\t\tconst uint32_t s1 = right_rot(ah[4], 6) ^ right_rot(ah[4], 11) ^ right_rot(ah[4], 25);\n\t\t\tconst uint32_t ch = (ah[4] & ah[5]) ^ (~ah[4] & ah[6]);\n\n\t\t\t/*\n\t\t\t * Initialize array of round constants:\n\t\t\t * (first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311):\n\t\t\t */\n\t\t\tstatic const uint32_t k[] = {\n\t\t\t    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4,\n\t\t\t    0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe,\n\t\t\t    0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f,\n\t\t\t    0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n\t\t\t    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n\t\t\t    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,\n\t\t\t    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116,\n\t\t\t    0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n\t\t\t    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7,\n\t\t\t    0xc67178f2};\n\n\t\t\tconst uint32_t temp1 = ah[7] + s1 + ch + k[i << 4 | j] + w[j];\n\t\t\tconst uint32_t s0 = right_rot(ah[0], 2) ^ right_rot(ah[0], 13) ^ right_rot(ah[0], 22);\n\t\t\tconst uint32_t maj = (ah[0] & ah[1]) ^ (ah[0] & ah[2]) ^ (ah[1] & ah[2]);\n\t\t\tconst uint32_t temp2 = s0 + maj;\n\n\t\t\tah[7] = ah[6];\n\t\t\tah[6] = ah[5];\n\t\t\tah[5] = ah[4];\n\t\t\tah[4] = ah[3] + temp1;\n\t\t\tah[3] = ah[2];\n\t\t\tah[2] = ah[1];\n\t\t\tah[1] = ah[0];\n\t\t\tah[0] = temp1 + temp2;\n\t\t}\n\t}\n\n\t/* Add the compressed chunk to the current hash value: */\n\tfor (i = 0; i < 8; i++)\n\t\th[i] += ah[i];\n}\n\n/*\n * Public functions. See header file for documentation.\n */\n\nvoid sha_256_init(struct Sha_256 *sha_256, uint8_t hash[SIZE_OF_SHA_256_HASH])\n{\n\tsha_256->hash = hash;\n\tsha_256->chunk_pos = sha_256->chunk;\n\tsha_256->space_left = SIZE_OF_SHA_256_CHUNK;\n\tsha_256->total_len = 0;\n\t/*\n\t * Initialize hash values (first 32 bits of the fractional parts of the square roots of the first 8 primes\n\t * 2..19):\n\t */\n\tsha_256->h[0] = 0x6a09e667;\n\tsha_256->h[1] = 0xbb67ae85;\n\tsha_256->h[2] = 0x3c6ef372;\n\tsha_256->h[3] = 0xa54ff53a;\n\tsha_256->h[4] = 0x510e527f;\n\tsha_256->h[5] = 0x9b05688c;\n\tsha_256->h[6] = 0x1f83d9ab;\n\tsha_256->h[7] = 0x5be0cd19;\n}\n\nvoid sha_256_write(struct Sha_256 *sha_256, const void *data, size_t len)\n{\n\tsha_256->total_len += len;\n\n\t/*\n\t * The following cast is not necessary, and could even be considered as poor practice. However, it makes this\n\t * file valid C++, which could be a good thing for some use cases.\n\t */\n\tconst uint8_t *p = (const uint8_t *)data;\n\n\twhile (len > 0) {\n\t\t/*\n\t\t * If the input chunks have sizes that are multiples of the calculation chunk size, no copies are\n\t\t * necessary. We operate directly on the input data instead.\n\t\t */\n\t\tif (sha_256->space_left == SIZE_OF_SHA_256_CHUNK && len >= SIZE_OF_SHA_256_CHUNK) {\n\t\t\tconsume_chunk(sha_256->h, p);\n\t\t\tlen -= SIZE_OF_SHA_256_CHUNK;\n\t\t\tp += SIZE_OF_SHA_256_CHUNK;\n\t\t\tcontinue;\n\t\t}\n\t\t/* General case, no particular optimization. */\n\t\tconst size_t consumed_len = len < sha_256->space_left ? len : sha_256->space_left;\n\t\tmemcpy(sha_256->chunk_pos, p, consumed_len);\n\t\tsha_256->space_left -= consumed_len;\n\t\tlen -= consumed_len;\n\t\tp += consumed_len;\n\t\tif (sha_256->space_left == 0) {\n\t\t\tconsume_chunk(sha_256->h, sha_256->chunk);\n\t\t\tsha_256->chunk_pos = sha_256->chunk;\n\t\t\tsha_256->space_left = SIZE_OF_SHA_256_CHUNK;\n\t\t} else {\n\t\t\tsha_256->chunk_pos += consumed_len;\n\t\t}\n\t}\n}\n\nuint8_t *sha_256_close(struct Sha_256 *sha_256)\n{\n\tuint8_t *pos = sha_256->chunk_pos;\n\tsize_t space_left = sha_256->space_left;\n\tuint32_t *const h = sha_256->h;\n\n\t/*\n\t * The current chunk cannot be full. Otherwise, it would already have been consumed. I.e. there is space left\n\t * for at least one byte. The next step in the calculation is to add a single one-bit to the data.\n\t */\n\t*pos++ = 0x80;\n\t--space_left;\n\n\t/*\n\t * Now, the last step is to add the total data length at the end of the last chunk, and zero padding before\n\t * that. But we do not necessarily have enough space left. If not, we pad the current chunk with zeroes, and add\n\t * an extra chunk at the end.\n\t */\n\tif (space_left < TOTAL_LEN_LEN) {\n\t\tmemset(pos, 0x00, space_left);\n\t\tconsume_chunk(h, sha_256->chunk);\n\t\tpos = sha_256->chunk;\n\t\tspace_left = SIZE_OF_SHA_256_CHUNK;\n\t}\n\tconst size_t left = space_left - TOTAL_LEN_LEN;\n\tmemset(pos, 0x00, left);\n\tpos += left;\n\tuint64_t len = sha_256->total_len;\n\tpos[7] = (uint8_t)(len << 3);\n\tlen >>= 5;\n\tint i;\n\tfor (i = 6; i >= 0; --i) {\n\t\tpos[i] = (uint8_t)len;\n\t\tlen >>= 8;\n\t}\n\tconsume_chunk(h, sha_256->chunk);\n\t/* Produce the final hash value (big-endian): */\n\tint j;\n\tuint8_t *const hash = sha_256->hash;\n\tfor (i = 0, j = 0; i < 8; i++) {\n\t\thash[j++] = (uint8_t)(h[i] >> 24);\n\t\thash[j++] = (uint8_t)(h[i] >> 16);\n\t\thash[j++] = (uint8_t)(h[i] >> 8);\n\t\thash[j++] = (uint8_t)h[i];\n\t}\n\treturn sha_256->hash;\n}\n\nvoid calc_sha_256(uint8_t hash[SIZE_OF_SHA_256_HASH], const void *input, size_t len)\n{\n\tstruct Sha_256 sha_256;\n\tsha_256_init(&sha_256, hash);\n\tsha_256_write(&sha_256, input, len);\n\t(void)sha_256_close(&sha_256);\n}"
	}, {
		"path":	"src/dependencies/sha256/sha-256.h",
		"original_path":	"src/dependencies/sha256/sha-256.h",
		"dir":	"src/dependencies/sha256/",
		"full_name":	"sha-256.h",
		"name":	"sha-256",
		"extension":	"h",
		"hardware_sha256":	"3694af81aa7bc5cd1de4af9e434dbf9b459e50c335a912eaa5fb9d06e5eac775",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	4311,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	4311,
		"content_sha256":	"3694af81aa7bc5cd1de4af9e434dbf9b459e50c335a912eaa5fb9d06e5eac775",
		"is_binary":	false,
		"content":	"#ifndef SHA_256_H\n#define SHA_256_H\n\n#include <stdint.h>\n#include <string.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * @brief Size of the SHA-256 sum. This times eight is 256 bits.\n */\n#define SIZE_OF_SHA_256_HASH 32\n\n/*\n * @brief Size of the chunks used for the calculations.\n *\n * @note This should mostly be ignored by the user, although when using the streaming API, it has an impact for\n * performance. Add chunks whose size is a multiple of this, and you will avoid a lot of superfluous copying in RAM!\n */\n#define SIZE_OF_SHA_256_CHUNK 64\n\n/*\n * @brief The opaque SHA-256 type, that should be instantiated when using the streaming API.\n *\n * @note Although the details are exposed here, in order to make instantiation easy, you should refrain from directly\n * accessing the fields, as they may change in the future.\n */\nstruct Sha_256 {\n\tuint8_t *hash;\n\tuint8_t chunk[SIZE_OF_SHA_256_CHUNK];\n\tuint8_t *chunk_pos;\n\tsize_t space_left;\n\tuint64_t total_len;\n\tuint32_t h[8];\n};\n\n/*\n * @brief The simple SHA-256 calculation function.\n * @param hash Hash array, where the result is delivered.\n * @param input Pointer to the data the hash shall be calculated on.\n * @param len Length of the input data, in byte.\n *\n * @note If all of the data you are calculating the hash value on is available in a contiguous buffer in memory, this is\n * the function you should use.\n *\n * @note If either of the passed pointers is NULL, the results are unpredictable.\n *\n * @note See note about maximum data length for sha_256_write, as it applies for this function's len argument too.\n */\nvoid calc_sha_256(uint8_t hash[SIZE_OF_SHA_256_HASH], const void *input, size_t len);\n\n/*\n * @brief Initialize a SHA-256 streaming calculation.\n * @param sha_256 A pointer to a SHA-256 structure.\n * @param hash Hash array, where the result will be delivered.\n *\n * @note If all of the data you are calculating the hash value on is not available in a contiguous buffer in memory,\n * this is where you should start. Instantiate a SHA-256 structure, for instance by simply declaring it locally, make\n * your hash buffer available, and invoke this function. Once a SHA-256 hash has been calculated (see further below) a\n * SHA-256 structure can be initialized again for the next calculation.\n *\n * @note If either of the passed pointers is NULL, the results are unpredictable.\n */\nvoid sha_256_init(struct Sha_256 *sha_256, uint8_t hash[SIZE_OF_SHA_256_HASH]);\n\n/*\n * @brief Stream more input data for an on-going SHA-256 calculation.\n * @param sha_256 A pointer to a previously initialized SHA-256 structure.\n * @param data Pointer to the data to be added to the calculation.\n * @param len Length of the data to add, in byte.\n *\n * @note This function may be invoked an arbitrary number of times between initialization and closing, but the maximum\n * data length is limited by the SHA-256 algorithm: the total number of bits (i.e. the total number of bytes times\n * eight) must be representable by a 64-bit unsigned integer. While that is not a practical limitation, the results are\n * unpredictable if that limit is exceeded.\n *\n * @note This function may be invoked on empty data (zero length), although that obviously will not add any data.\n *\n * @note If either of the passed pointers is NULL, the results are unpredictable.\n */\nvoid sha_256_write(struct Sha_256 *sha_256, const void *data, size_t len);\n\n/*\n * @brief Conclude a SHA-256 streaming calculation, making the hash value available.\n * @param sha_256 A pointer to a previously initialized SHA-256 structure.\n * @return Pointer to the hash array, where the result is delivered.\n *\n * @note After this function has been invoked, the result is available in the hash buffer that initially was provided. A\n * pointer to the hash value is returned for convenience, but you should feel free to ignore it: it is simply a pointer\n * to the first byte of your initially provided hash array.\n *\n * @note If the passed pointer is NULL, the results are unpredictable.\n *\n * @note Invoking this function for a calculation with no data (the writing function has never been invoked, or it only\n * has been invoked with empty data) is legal. It will calculate the SHA-256 value of the empty string.\n */\nuint8_t *sha_256_close(struct Sha_256 *sha_256);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif"
	}, {
		"path":	"src/extras/",
		"original_path":	"src/extras/",
		"dir":	"src/extras/"
	}, {
		"path":	"src/extras/extras.c",
		"original_path":	"src/extras/extras.c",
		"dir":	"src/extras/",
		"full_name":	"extras.c",
		"name":	"extras",
		"extension":	"c",
		"hardware_sha256":	"32fd99c5df23113a8393d626d6f059d54fc631ac5ca4b813420c038efb390053",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	4041,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	4041,
		"content_sha256":	"32fd99c5df23113a8393d626d6f059d54fc631ac5ca4b813420c038efb390053",
		"is_binary":	false,
		"content":	"\nchar * dtw_generate_sha_from_file(const char *path){\n    return calc_sha_256_from_file_returning_string(path);\n}\n\nchar * dtw_generate_sha_from_any(void *anything , long size){\n    if(anything ==NULL) {\n        return NULL;\n    }\n    return calc_sha_256_returning_string(anything,size);\n}   \n\nchar * dtw_generate_sha_from_string(const char *string){\n    if(string == NULL) {\n        return  NULL;\n    }\n    return calc_sha_256_from_string_returning_string(string);\n}\n\n\nlong int dtw_get_entity_last_motification_in_unix(const char *path){\n    struct stat attr;\n    if(stat(path, &attr) != 0) {\n        return -1;\n    }\n\n    time_t last_modification_in_unix = attr.st_mtime;\n\n    return last_modification_in_unix;\n}\n\nchar * dtw_convert_unix_time_to_string(long int unix_time){\n    struct tm * timeinfo;\n    #ifdef _WIN32\n        //get timeinfo from windows\n        time_t rawtime = unix_time;\n        timeinfo = localtime(&rawtime);\n    #else\n        timeinfo = localtime(&unix_time);\n    #endif\n    char *time_string = (char *)malloc(100);\n    strftime(time_string, 100, \"%Y-%m-%d %H:%M:%S\", timeinfo);\n    return time_string;\n}\n\nchar * dtw_get_entity_last_motification_in_string(const char *path){\n    long int last_modification_in_unix = dtw_get_entity_last_motification_in_unix(path);\n    char *last_modification_in_string = dtw_convert_unix_time_to_string(last_modification_in_unix);\n    return last_modification_in_string;\n}\n\nconst char * private_dtw_convert_action_to_string(short action){\n    switch (action){\n        case DTW_REMOVE:\n            return \"remove\";\n        case DTW_WRITE:\n            return \"write\";\n        case DTW_MODIFY:\n            return \"modify\";\n    }\n    return NULL;\n}\n\nshort private_dtw_convert_string_to_action(const char *action){\n    if(strcmp(action,\"remove\") == 0){\n        return DTW_REMOVE;\n    }\n    if(strcmp(action,\"write\") == 0){\n        return DTW_WRITE;\n    }\n    if(strcmp(action,\"modify\") == 0){\n        return DTW_MODIFY;\n    }\n    return -1;\n}\n\nvoid private_dtw_add_end_bar_to_dirs_string_array(struct DtwStringArray * dirs){\n    for(int i = 0; i < dirs->size; i++){\n  \n        if(!dtw_ends_with(dirs->strings[i], \"/\") || !dtw_ends_with(dirs->strings[i],\"\\\\\")){\n            char *formated_dir =  (char*)malloc(strlen(dirs->strings[i]) + 3);\n            sprintf(formated_dir,\"%s/\",dirs->strings[i]);\n            DtwStringArray_set_value(dirs, i, formated_dir);\n            free(formated_dir);\n        }    \n            \n         \n    }\n}\n\n\n\nstruct DtwStringArray* private_dtw_remove_start_path(struct DtwStringArray *paths,const char *rm_path){\n\n    char *path_to_remove = dtw_replace_string(rm_path,\"//\",\"/\");\n\n    int size_to_remove = strlen(path_to_remove) +1;\n\n    if(dtw_ends_with(path_to_remove,\"/\")){\n        size_to_remove-=1;\n    }\n\n\n    struct DtwStringArray *new_array = newDtwStringArray();\n\n    for(int i =0; i < paths->size; i++){\n\n        char *current_path_string = paths->strings[i];\n        int current_path_string_size = strlen(current_path_string);\n\n        char *new_string = (char*)malloc(current_path_string_size +2);\n        new_string[current_path_string_size] =0;\n\n        strcpy(new_string,current_path_string);\n        memmove(\n                new_string,\n                current_path_string+size_to_remove,\n                strlen(current_path_string) - size_to_remove +1\n        );\n        if(strcmp(new_string,\"/\") == 0  || strcmp(new_string,\"\") == 0){\n            free(new_string);\n            continue;\n        }\n\n        DtwStringArray_append(new_array, new_string);\n        free(new_string);\n\n    }\n    free(path_to_remove);\n    return new_array;\n}\n\n\nlong dtw_get_time(){\n#ifdef DTW_DEBUG_TIME\n    return 0;\n#endif\n    return time(NULL);\n}\nlong private_dtw_convert_index(long index,long size){\n\n    long converted_index = index;\n\n    if(converted_index < 0){\n        converted_index = size + converted_index;\n    }\n\n    if(converted_index >= size){\n       return -1;\n    }\n\n    if(converted_index < 0){\n        return -1;\n    }\n\n    return converted_index;\n}"
	}, {
		"path":	"src/extras/extras.h",
		"original_path":	"src/extras/extras.h",
		"dir":	"src/extras/",
		"full_name":	"extras.h",
		"name":	"extras",
		"extension":	"h",
		"hardware_sha256":	"4a31e7a23dd48314523a230cc1b3cb2861288ebd4a3a15d473a49fb878db3b44",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	663,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	663,
		"content_sha256":	"4a31e7a23dd48314523a230cc1b3cb2861288ebd4a3a15d473a49fb878db3b44",
		"is_binary":	false,
		"content":	"\nchar * dtw_generate_sha_from_file(const char *path);\nchar * dtw_generate_sha_from_string(const char *string);\nchar * dtw_generate_sha_from_any(void *anything , long size);\n\nlong int dtw_get_entity_last_motification_in_unix(const char *path);\nchar * dtw_convert_unix_time_to_string(long int unix_time);\nchar * dtw_get_entity_last_motification_in_string(const char *path);\nconst char * private_dtw_convert_action_to_string(short action);\nshort private_dtw_convert_string_to_action(const char *action);\nvoid private_dtw_add_end_bar_to_dirs_string_array(struct DtwStringArray * dirs);\n\nlong private_dtw_convert_index(long index,long size);\n\n\nlong dtw_get_time();\n\n\n\n"
	}, {
		"path":	"src/globals.c",
		"original_path":	"src/globals.c",
		"dir":	"src/",
		"full_name":	"globals.c",
		"name":	"globals",
		"extension":	"c",
		"hardware_sha256":	"43a54db31cb507937bd5de1430826606af1d409ae364cf64a7354b7ea06b62d5",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	103,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	103,
		"content_sha256":	"43a54db31cb507937bd5de1430826606af1d409ae364cf64a7354b7ea06b62d5",
		"is_binary":	false,
		"content":	"\n\n\nconst char dtw_base64_table[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n"
	}, {
		"path":	"src/hash/",
		"original_path":	"src/hash/",
		"dir":	"src/hash/"
	}, {
		"path":	"src/hash/hash.c",
		"original_path":	"src/hash/hash.c",
		"dir":	"src/hash/",
		"full_name":	"hash.c",
		"name":	"hash",
		"extension":	"c",
		"hardware_sha256":	"b0a8d24a2cb2b65f8f2f73ce38b6c8854e117cad0ebc2a72a79347091f2ee565",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	5144,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	5144,
		"content_sha256":	"b0a8d24a2cb2b65f8f2f73ce38b6c8854e117cad0ebc2a72a79347091f2ee565",
		"is_binary":	false,
		"content":	"\n\n\n\n\n\nDtwHash * newDtwHash(){\n    DtwHash *self = (DtwHash*) malloc(sizeof(DtwHash));\n    self->hash = dtw_generate_sha_from_string(\"\");\n    return self;\n}\n\nbool  DtwHash_digest_any(DtwHash *self,unsigned char *content,long size){\n    if(content == NULL){\n        return false;\n    }\n    char *generated = dtw_generate_sha_from_any(content,size);\n    char result[300] ={0};\n    sprintf(result,\"%s%s\",self->hash,generated);\n    free(generated);\n    free(self->hash);\n    self->hash = dtw_generate_sha_from_string(result);\n    return true;\n}\n\nbool  DtwHash_digest_string(DtwHash * self, const char *content){\n    return DtwHash_digest_any(self,(unsigned char *)content, (long)strlen(content));\n}\n\nvoid DtwHash_digest_long(DtwHash * self,long content){\n    char formated[20] ={0};\n    sprintf(formated,\"%ld\",content);\n    DtwHash_digest_string(self,formated);\n}\n\nvoid DtwHash_digest_double(DtwHash * self,double content){\n    char formated[20] ={0};\n    sprintf(formated,\"%lf\",content);\n    DtwHash_digest_string(self,formated);\n}\n\nvoid DtwHash_digest_bool(DtwHash * self,bool content){\n    char formated[20] ={0};\n    sprintf(formated,\"%d\",(bool)content);\n    DtwHash_digest_string(self,formated);\n}\n\nbool  DtwHash_digest_file(DtwHash * self, const char *path){\n\n    long size;\n    unsigned  char *content = dtw_load_binary_content(path,&size);\n    if(!content){\n        return false;\n    }\n    DtwHash_digest_any(self,content,size);\n    free(content);\n    return true;\n}\n\nbool  DtwHash_digest_entity_last_modification(DtwHash * self, const char *path){\n    long last_modification = dtw_get_entity_last_motification_in_unix(path);\n    if(last_modification == -1){\n        return false;\n    }\n    DtwHash_digest_long(self,last_modification);\n    return true;\n}\n\n\nbool  DtwHash_digest_string_array(DtwHash *self,DtwStringArray *element){\n    if(element->size == 0){\n        return false;\n    }\n    DtwStringArray  *clone = DtwStringArray_clone(element);\n    DtwStringArray_sort(clone);\n\n    for(int i =0 ; i < clone->size; i++){\n        DtwHash_digest_string(self,clone->strings[i]);\n    }\n    DtwStringArray_free(clone);\n    return  true;\n}\n\nbool  DtwHash_digest_string_array_last_modifications(DtwHash *self,DtwStringArray *element){\n    if(element->size == 0){\n        return false;\n    }\n    DtwStringArray  *clone = DtwStringArray_clone(element);\n    DtwStringArray_sort(clone);\n    for(int i =0 ; i < clone->size; i++){\n        DtwHash_digest_entity_last_modification(self, clone->strings[i]);\n    }\n    DtwStringArray_free(clone);\n    return true;\n}\n\nbool DtwHash_digest_string_array_last_modifications_adding_name(DtwHash *self,DtwStringArray *element){\n    if(element->size == 0){\n        return false;\n    }\n    DtwStringArray  *clone = DtwStringArray_clone(element);\n    DtwStringArray_sort(clone);\n    for(int i =0 ; i < clone->size; i++){\n        DtwHash_digest_string(self,clone->strings[i]);\n        DtwHash_digest_entity_last_modification(self, clone->strings[i]);\n    }\n    DtwStringArray_free(clone);\n    return true;\n}\n\n\nbool DtwHash_digest_string_array_content(DtwHash *self,DtwStringArray *element){\n    if(element->size == 0){\n        return false;\n    }\n    DtwStringArray  *clone = DtwStringArray_clone(element);\n    DtwStringArray_sort(clone);\n    for(int i =0 ; i < clone->size; i++){\n        DtwHash_digest_file(self,clone->strings[i]);\n    }\n    DtwStringArray_free(clone);\n    return true;\n}\n\nbool DtwHash_digest_string_array_content_adding_name(DtwHash *self,DtwStringArray *element){\n    if(element->size == 0){\n        return false;\n    }\n    DtwStringArray  *clone = DtwStringArray_clone(element);\n    DtwStringArray_sort(clone);\n    for(int i =0; i < clone->size; i++){\n        DtwHash_digest_string(self,clone->strings[i]);\n        DtwHash_digest_file(self,clone->strings[i]);\n    }\n    DtwStringArray_free(clone);\n    return true;\n}\n\n\nbool DtwHash_digest_folder_by_last_modification(DtwHash *self,const char *path){\n    DtwStringArray  *folder = dtw_list_all_recursively(path,DTW_NOT_CONCAT_PATH);\n    if(folder->size == 0){\n        DtwStringArray_free(folder);\n        return false;\n    }\n    DtwStringArray_sort(folder);\n    for(int i =0; i < folder->size; i++){\n        DtwHash_digest_string(self,folder->strings[i]);\n        char *formated_path = dtw_concat_path(path,folder->strings[i]);\n\n        DtwHash_digest_entity_last_modification(self, formated_path);\n        free(formated_path);\n    }\n    DtwStringArray_free(folder);\n    return true;\n}\n\nbool DtwHash_digest_folder_by_content(DtwHash *self,const char *path){\n\n    DtwStringArray  *folder = dtw_list_all_recursively(path,DTW_NOT_CONCAT_PATH);\n    if(folder->size == 0){\n        DtwStringArray_free(folder);\n        return false;\n    }\n    DtwStringArray_sort(folder);\n    for(int i =0; i < folder->size; i++){\n        DtwHash_digest_string(self,folder->strings[i]);\n        char *formated_path = dtw_concat_path(path,folder->strings[i]);\n        DtwHash_digest_file(self,formated_path);\n        free(formated_path);\n    }\n    DtwStringArray_free(folder);\n    return true;\n}\n\nvoid  DtwHash_free(DtwHash *self){\n    free(self->hash);\n    free(self);\n}"
	}, {
		"path":	"src/hash/hash.h",
		"original_path":	"src/hash/hash.h",
		"dir":	"src/hash/",
		"full_name":	"hash.h",
		"name":	"hash",
		"extension":	"h",
		"hardware_sha256":	"74a8d2da05997fa2c1ffd0f8651d542b08649d925df4557b92e785f2a514b67f",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1177,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1177,
		"content_sha256":	"74a8d2da05997fa2c1ffd0f8651d542b08649d925df4557b92e785f2a514b67f",
		"is_binary":	false,
		"content":	"\n\ntypedef  struct DtwHash{\n    char *hash;\n}DtwHash;\n\n\nDtwHash * newDtwHash();\n\nbool  DtwHash_digest_any(DtwHash *self,unsigned char *content,long size);\n\nbool DtwHash_digest_string(DtwHash * self, const char *content);\n\nvoid DtwHash_digest_long(DtwHash * self,long content);\n\nvoid DtwHash_digest_double(DtwHash * self,double content);\n\nvoid DtwHash_digest_bool(DtwHash * self,bool content);\n\nbool  DtwHash_digest_file(DtwHash * self, const char *path);\n\nbool DtwHash_digest_entity_last_modification(DtwHash * self, const char *path);\n\nbool DtwHash_digest_folder_by_last_modification(DtwHash *self,const char *path);\n\nbool DtwHash_digest_folder_by_content(DtwHash *self,const char *path);\n\n\nbool DtwHash_digest_string_array(DtwHash *self,DtwStringArray *element);\n\nbool DtwHash_digest_string_array_last_modifications(DtwHash *self,DtwStringArray *element);\n\nbool DtwHash_digest_string_array_last_modifications_adding_name(DtwHash *self,DtwStringArray *element);\n\n\nbool DtwHash_digest_string_array_content(DtwHash *self,DtwStringArray *element);\n\nbool DtwHash_digest_string_array_content_adding_name(DtwHash *self,DtwStringArray *element);\n\n\nvoid  DtwHash_free(DtwHash *self);\n\n"
	}, {
		"path":	"src/io/",
		"original_path":	"src/io/",
		"dir":	"src/io/"
	}, {
		"path":	"src/io/io.c",
		"original_path":	"src/io/io.c",
		"dir":	"src/io/",
		"full_name":	"io.c",
		"name":	"io",
		"extension":	"c",
		"hardware_sha256":	"49dfdc427a9e4e5d78aa9a1fdb3bc7308ab550592279a0c38e6ab9c7eddd8b7d",
		"last_modification_in_unix":	1719256131,
		"hardware_content_size":	9235,
		"last_modification":	"2024-06-24 16:08:51",
		"content_size":	9235,
		"content_sha256":	"49dfdc427a9e4e5d78aa9a1fdb3bc7308ab550592279a0c38e6ab9c7eddd8b7d",
		"is_binary":	false,
		"content":	"\n#ifdef __linux__\n#define dtw_create_dir(path) mkdir(path,0777)\n#elif _WIN32\n#define dtw_create_dir(path) _mkdir(path)\n\n#endif\n\n\n\nvoid dtw_create_dir_recursively(const char *path){\n\n    int entity =dtw_entity_type(path);\n\n    if(entity == DTW_FOLDER_TYPE){\n        return;\n    }\n\n    if(entity == DTW_FILE_TYPE){\n        remove(path);\n    }\n\n\n    long size_path = strlen(path);\n    for(int i=0;i <  size_path;i++){\n        if((path[i] == '\\\\'  || path[i] == '/' )  &&( i != size_path - 1)){\n            \n            char * current_path = (char*)malloc(i + 1);\n            current_path[i] = '\\0';\n            strncpy(current_path,path,i);\n\n            if(dtw_entity_type(current_path) == DTW_FILE_TYPE){\n                remove(current_path);\n            }\n\n            dtw_create_dir(current_path);\n\n            free(current_path);\n        }\n    }\n\n    dtw_create_dir(path);\n}\n\nchar *dtw_get_current_dir(){\n    char *path = (char*)malloc(1024);\n    getcwd(path,1024);\n    char*path_with_bar = (char*)malloc(strlen(path) + 2);\n    sprintf(path_with_bar,\"%s/\",path);\n    free(path);\n    return path_with_bar;\n}\n\n\n\nbool dtw_remove_any(const char* path) {\n    //means is an file\n    if(remove(path) == 0){\n        return true;\n    }\n    \n    struct DtwStringArray *files = dtw_list_files_recursively(path,DTW_CONCAT_PATH);\n    int files_size = files->size;\n    for(int i = 0; i < files_size; i++){\n        remove(files->strings[i]);\n    }\n    DtwStringArray_free(files);\n\n\n    struct DtwStringArray *dirs = dtw_list_dirs_recursively(path,DTW_CONCAT_PATH);\n    int dirs_size = dirs->size;\n    for(int i = dirs->size -1; i >=0; i--){\n        rmdir(dirs->strings[i]);\n    }\n    DtwStringArray_free(dirs);\n    //remove / to the path \n    if(files_size ||dirs_size){\n        return true;\n    }    \n    return false;\n    \n \n}\n\n\n\nunsigned char *dtw_load_any_content(const char * path,long *size,bool *is_binary){\n\n    *is_binary = false;\n    *size = 0;\n\n    int entity = dtw_entity_type(path);\n    if(entity != DTW_FILE_TYPE){\n        return NULL;\n    }\n    FILE  *file = fopen(path,\"rb\");\n\n    if(file ==NULL){\n        return NULL;\n    }\n\n\n    if(fseek(file,0,SEEK_END) == -1){\n        fclose(file);\n        return NULL;\n    }\n\n\n    *size = ftell(file);\n\n    if(*size == -1){\n        fclose(file);\n        return NULL;\n    }\n\n    if(*size == 0){\n        fclose(file);\n        return (unsigned char*)strdup(\"\");\n    }\n\n\n    if(fseek(file,0,SEEK_SET) == -1){\n        fclose(file);\n        return NULL;\n    }\n\n    unsigned char *content = (unsigned char*)malloc(*size +1);\n    int bytes_read = fread(content,1,*size,file);\n    if(bytes_read <=0 ){\n        free(content);\n        fclose(file);\n        return NULL;\n    }\n\n\n    *is_binary = false;\n    for(int i = 0;i < *size;i++){\n        if(content[i] == 0){\n            *is_binary = true;\n            break;\n        }\n    }\n    content[*size] = '\\0';\n\n    fclose(file);\n    return content;\n}\n\n\nchar *dtw_load_string_file_content(const char * path){\n    long size;\n    bool is_binary;\n    unsigned char *element = dtw_load_any_content(path,&size,&is_binary);\n    if(element == NULL){\n        return NULL;\n    }\n\n    if(is_binary){\n        free(element);\n        return NULL;\n    }\n    return (char*)element;\n}\n\n\nunsigned char *dtw_load_binary_content(const char * path,long *size){\n    bool is_binary;\n    return dtw_load_any_content(path,size,&is_binary);\n}\n\n\nbool dtw_write_any_content(const char *path,unsigned  char *content,long size){\n    //Iterate through the path and create directories if they don't exist\n    int entity_type =dtw_entity_type(path);\n    if(entity_type == DTW_FOLDER_TYPE){\n        dtw_remove_any(path);\n    }\n\n\n    if(entity_type == DTW_NOT_FOUND){\n        long path_size = (long)strlen(path);\n        for(long i = path_size-1;i > 0;i--){\n            //runs in negative mode til / or \\ is found\n            if(path[i] == '\\\\' || path[i] == '/'){\n                char *dir_path =(char*)malloc(i +2);\n                dir_path[i] = '\\0';\n                strncpy(dir_path,path,i);\n\n                dtw_create_dir_recursively(dir_path);\n                free(dir_path);\n\n                break;\n            }\n        }\n    }\n\n    FILE *file = fopen(path,\"wb\");\n    if(file == NULL){\n   \n        return false;\n    }\n    \n    fwrite(content, sizeof(char),size, file);\n    \n    fclose(file);\n    return true;\n}\n\n\nbool dtw_write_string_file_content(const char *path,const char *content){\n    long size;\n    if(content == NULL){\n        size = 0;\n    }\n    else{\n        size = (long)strlen(content);\n    }\n    return dtw_write_any_content(path,(unsigned char*)content,size);\n}\n\n\nint dtw_entity_type(const char *path){\n    //returns 1 for file, 2 for directory, -1 for not found\n    struct stat path_stat; \n\n    if(stat(path,&path_stat) == 0){\n        if(S_ISREG(path_stat.st_mode)){\n            return DTW_FILE_TYPE;\n        }else if(S_ISDIR(path_stat.st_mode)){\n            return DTW_FOLDER_TYPE;\n        }\n    }\n    return DTW_NOT_FOUND;\n\n}\n\n\nint dtw_complex_entity_type(const char *path){\n    int entity = dtw_entity_type(path);\n    if(entity != DTW_FILE_TYPE){\n        return entity;\n    }\n    long size;\n    bool is_binary;\n    char *data = (char*)dtw_load_any_content(path,&size,&is_binary);\n    if(is_binary){\n        free(data);\n        return DTW_COMPLEX_BINARY;\n    }\n\n    if(\n       strcmp(data,\"t\") == 0 ||\n       strcmp(data,\"f\") == 0 ||\n       strcmp(data,\"true\") == 0 ||\n       strcmp(data,\"false\") == 0\n       ){\n        free(data);\n        return DTW_COMPLEX_BOOL_TYPE;\n    }\n\n    \n    double value;\n    int result = sscanf(data,\"%lf\",&value);\n    if(result == 0){\n        free(data);\n        return DTW_COMPLEX_STRING_TYPE;\n    }\n    for(int i = 0; i < size; i++){\n        char current = data[i];\n        if(current == '.'){\n            free(data);\n            return DTW_COMPLEX_DOUBLE_TYPE;\n        }\n    }\n    free(data);\n    return DTW_COMPLEX_LONG_TYPE;\n}\n\nlong dtw_get_total_itens_of_dir(const char *path){\n\n    #ifdef __linux__\n\n        DIR *dir = opendir(path);\n        if (dir == NULL) {\n        return -1;\n        }\n        int i = 0;\n        while ((readdir(dir)) != NULL){\n            i++;\n        }\n        closedir(dir);\n        return i -2;\n    #else \n        WIN32_FIND_DATA findFileData;\n            HANDLE hFind = FindFirstFile(path, &findFileData);\n\n            if (hFind == INVALID_HANDLE_VALUE) {\n                return -1;\n            }\n\n            int i = 0;\n            do {\n                if (!(findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)) {\n                    i++;\n                }\n            } while (FindNextFile(hFind, &findFileData) != 0);\n\n            FindClose(hFind);\n            return i;\n    \n    #endif \n}\n\nconst char *dtw_convert_entity(int entity_type){\n    if(entity_type == DTW_FILE_TYPE){\n        return \"file\";\n    }\n    if(entity_type == DTW_FOLDER_TYPE){\n        return \"folder\";\n    }\n    if(entity_type == DTW_NOT_FOUND){\n        return \"null\";\n    }\n    if(entity_type == DTW_COMPLEX_BINARY){\n        return \"binary\";\n    }\n    if(entity_type == DTW_COMPLEX_STRING_TYPE){\n        return \"string\";\n    }\n    if(entity_type == DTW_COMPLEX_BOOL_TYPE){\n        return \"bool\";\n    }\n    if(entity_type == DTW_COMPLEX_LONG_TYPE){\n        return \"long\";\n    }\n    if(entity_type == DTW_COMPLEX_DOUBLE_TYPE){\n        return \"double\";\n    }\n    return \"invalid\";\n}   \n\nbool dtw_copy_any(const char* src_path,const  char* dest_path,bool merge) {\n\n    //verify if is an file\n    int type = dtw_entity_type(src_path);\n    if(type == DTW_NOT_FOUND){\n        return false;\n    }\n\n    if(type == DTW_FILE_TYPE){\n    \n        long size;\n        bool is_binary;\n        unsigned char *content = dtw_load_any_content(src_path,&size,&is_binary);\n        bool result =  dtw_write_any_content(dest_path,content,size);\n        free(content);\n        return result;\n    }\n    //means is an directory\n\n    //remove the previous directory if merge is false\n    if(!merge){\n        dtw_remove_any(dest_path);\n    }\n    //creating dirs\n    struct DtwStringArray *dirs = dtw_list_dirs_recursively(src_path,DTW_CONCAT_PATH);\n    \n    int size = dirs->size;\n    int src_path_size = strlen(src_path);\n\n    for(int i = 0; i < size; i++){        \n        char *new_path_dir = private_dtw_change_beginning_of_string(dirs->strings[i],src_path_size,dest_path);\n        dtw_create_dir_recursively(new_path_dir);\n        free(new_path_dir);\n    }\n    DtwStringArray_free(dirs);\n\n\n    struct DtwStringArray *files = dtw_list_files_recursively(src_path,DTW_CONCAT_PATH);\n   \n    for(int i = 0; i < files->size; i++){\n        long file_size;\n        bool is_binary;\n        unsigned char *content = dtw_load_any_content(files->strings[i],&file_size,&is_binary);\n        char *new_path = private_dtw_change_beginning_of_string(files->strings[i],src_path_size,dest_path);\n\n        dtw_write_any_content(new_path,content,file_size);\n        free(content);\n        free(new_path);\n\n       \n    }\n\n    DtwStringArray_free(files);\n    \n    return true;\n    \n}\n\nbool dtw_move_any(const char* src_path, const char* dest_path,bool merge) {\n    bool result = dtw_copy_any(src_path,dest_path,merge);\n    dtw_remove_any(src_path);\n    return result;\n}\n"
	}, {
		"path":	"src/io/io.h",
		"original_path":	"src/io/io.h",
		"dir":	"src/io/",
		"full_name":	"io.h",
		"name":	"io",
		"extension":	"h",
		"hardware_sha256":	"72b06ad69488552e999824285c6c67ee4eb0a003fa279a8b63ef713531aa3cea",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1282,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1282,
		"content_sha256":	"72b06ad69488552e999824285c6c67ee4eb0a003fa279a8b63ef713531aa3cea",
		"is_binary":	false,
		"content":	"\n#define DTW_FILE_TYPE 1\n#define DTW_FOLDER_TYPE 2\n#define DTW_ALL_TYPE 3\n#define DTW_NOT_FOUND -1\n\n#define DTW_COMPLEX_BINARY 10\n#define DTW_COMPLEX_STRING_TYPE 11\n#define DTW_COMPLEX_LONG_TYPE 12\n#define DTW_COMPLEX_DOUBLE_TYPE 13\n#define DTW_COMPLEX_BOOL_TYPE 14\n\n#define DTW_MERGE true\n\n\n#define DTW_NOT_MERGE false\n#ifdef __linux__\n#define dtw_create_dir(path) mkdir(path,0777)\n#elif _WIN32\n#define dtw_create_dir(path) _mkdir(path)\n#endif\n\nvoid dtw_create_dir_recursively(const char *path);\n\nbool dtw_remove_any(const char* path);\n\nchar *dtw_get_current_dir();\n\nlong dtw_get_total_itens_of_dir(const char *path);\n\nunsigned char *dtw_load_any_content(const char * path,long *size,bool *is_binary);\n\nchar *dtw_load_string_file_content(const char * path);\n\nunsigned char *dtw_load_binary_content(const char * path,long *size);\n\n\nbool dtw_write_any_content(const char *path,unsigned  char *content,long size);\nbool dtw_write_string_file_content(const char *path,const char *content);\n\n\n\nint dtw_entity_type(const char *path);\n\n\n\nint dtw_complex_entity_type(const char *path);\n\nconst char *dtw_convert_entity(int entity_type);\n\n\nbool dtw_copy_any(const char* src_path,const  char* dest_path,bool merge);\n\n\n\nbool dtw_move_any(const char* src_path, const char* dest_path,bool merge);"
	}, {
		"path":	"src/listage_wrappers/",
		"original_path":	"src/listage_wrappers/",
		"dir":	"src/listage_wrappers/"
	}, {
		"path":	"src/listage_wrappers/listage_wrappers.c",
		"original_path":	"src/listage_wrappers/listage_wrappers.c",
		"dir":	"src/listage_wrappers/",
		"full_name":	"listage_wrappers.c",
		"name":	"listage_wrappers",
		"extension":	"c",
		"hardware_sha256":	"edc42fb8e4a5bb0cf7c24e85c1c0416ba31aed308335684e46eca998214213f7",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	403,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	403,
		"content_sha256":	"edc42fb8e4a5bb0cf7c24e85c1c0416ba31aed308335684e46eca998214213f7",
		"is_binary":	false,
		"content":	"\n\n DtwStringArray * dtw_list_files(const char *path, bool concat_path){\n    return dtw_list_basic(path,  DTW_FILE_TYPE, concat_path);\n}\n\n DtwStringArray * dtw_list_dirs(const char *path, bool concat_path){\n    return dtw_list_basic(path,DTW_FOLDER_TYPE, concat_path);\n}\n\n DtwStringArray *  dtw_list_all(const char *path,  bool concat_path){\n    return dtw_list_basic(path, DTW_ALL_TYPE, concat_path);\n}\n"
	}, {
		"path":	"src/listage_wrappers/listage_wrappers.h",
		"original_path":	"src/listage_wrappers/listage_wrappers.h",
		"dir":	"src/listage_wrappers/",
		"full_name":	"listage_wrappers.h",
		"name":	"listage_wrappers",
		"extension":	"h",
		"hardware_sha256":	"7171fcf881358d62fa4a6700a2256a9ecc60160795584dd0f7056a24a60b26e3",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	272,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	272,
		"content_sha256":	"7171fcf881358d62fa4a6700a2256a9ecc60160795584dd0f7056a24a60b26e3",
		"is_binary":	false,
		"content":	"#define DTW_CONCAT_PATH true\n#define DTW_NOT_CONCAT_PATH false\n\n\n DtwStringArray * dtw_list_files(const char *path, bool concat_path);\nDtwStringArray * dtw_list_dirs(const char *path, bool concat_path);\n\nDtwStringArray *  dtw_list_all(const char *path,  bool concat_path);"
	}, {
		"path":	"src/lockers/",
		"original_path":	"src/lockers/",
		"dir":	"src/lockers/"
	}, {
		"path":	"src/lockers/declaration.h",
		"original_path":	"src/lockers/declaration.h",
		"dir":	"src/lockers/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"a7f4376f0c557a01ca8569010375fc9145064b4cf499edc54177751e05e1e9f2",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	135,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	135,
		"content_sha256":	"a7f4376f0c557a01ca8569010375fc9145064b4cf499edc54177751e05e1e9f2",
		"is_binary":	false,
		"content":	"#include \"multifile_locker/multifile_locker.h\"\n#ifdef __linux__\n#include \"flock_locker/declaration.h\"\n#endif\n#include \"locker/locker.h\""
	}, {
		"path":	"src/lockers/definition.c",
		"original_path":	"src/lockers/definition.c",
		"dir":	"src/lockers/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"ac864f5680dc3ec06d65bfabdb6138a5beb91f83762e053e7d6aeb6001655aee",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	140,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	140,
		"content_sha256":	"ac864f5680dc3ec06d65bfabdb6138a5beb91f83762e053e7d6aeb6001655aee",
		"is_binary":	false,
		"content":	"\n#include \"multifile_locker/multifile_locker.c\"\n#ifdef __linux__\n    #include \"flock_locker/definition.c\"\n#endif\n\n#include \"locker/locker.c\""
	}, {
		"path":	"src/lockers/flock_locker/",
		"original_path":	"src/lockers/flock_locker/",
		"dir":	"src/lockers/flock_locker/"
	}, {
		"path":	"src/lockers/flock_locker/declaration.h",
		"original_path":	"src/lockers/flock_locker/declaration.h",
		"dir":	"src/lockers/flock_locker/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"cebea41562b4a264356bc44bca45a24d89aaacaaed330c36fc47d04b06b8dc5c",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	74,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	74,
		"content_sha256":	"cebea41562b4a264356bc44bca45a24d89aaacaaed330c36fc47d04b06b8dc5c",
		"is_binary":	false,
		"content":	"#include \"flockarray/declaration.h\"\n#include \"flock_locker/flock_locker.h\""
	}, {
		"path":	"src/lockers/flock_locker/definition.c",
		"original_path":	"src/lockers/flock_locker/definition.c",
		"dir":	"src/lockers/flock_locker/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"0127a57335614a5f85b4a1eab2a4b796207bdf8baf409b0ae24ea170e5f76e48",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	73,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	73,
		"content_sha256":	"0127a57335614a5f85b4a1eab2a4b796207bdf8baf409b0ae24ea170e5f76e48",
		"is_binary":	false,
		"content":	"#include \"flockarray/definition.c\"\n#include \"flock_locker/flock_locker.c\""
	}, {
		"path":	"src/lockers/flock_locker/flock_locker/",
		"original_path":	"src/lockers/flock_locker/flock_locker/",
		"dir":	"src/lockers/flock_locker/flock_locker/"
	}, {
		"path":	"src/lockers/flock_locker/flock_locker/flock_locker.c",
		"original_path":	"src/lockers/flock_locker/flock_locker/flock_locker.c",
		"dir":	"src/lockers/flock_locker/flock_locker/",
		"full_name":	"flock_locker.c",
		"name":	"flock_locker",
		"extension":	"c",
		"hardware_sha256":	"31eab7f8c8d1b14b1220a08362446849e39af9515c156185e34ea37e79f68147",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2004,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2004,
		"content_sha256":	"31eab7f8c8d1b14b1220a08362446849e39af9515c156185e34ea37e79f68147",
		"is_binary":	false,
		"content":	"\nDtwFlockLocker * newFlockLocker(){\n\n    DtwFlockLocker *self = (DtwFlockLocker*) malloc(sizeof (DtwFlockLocker));\n    *self  = (DtwFlockLocker){0};\n    self->locked_files = private_new_privateFlockArray();\n    self->temp_folder = \"/tmp/\";\n\n    return self;\n}\nint  DtwFlockLocker_lock(DtwFlockLocker *self, const char *filename) {\n    if (privateDtwFlockArray_index_of(self->locked_files, filename) != -1) {\n        return DTW_LOCKER_LOCKED;\n    }\n\n    char *file_sha = dtw_generate_sha_from_string(filename);\n    const char *EXTENSION = \"lock\";\n    char *formatted = (char *) malloc(\n            strlen(file_sha) +\n            strlen(self->temp_folder) +\n            strlen(EXTENSION) +\n            3\n    );\n    sprintf(formatted, \"%s/%s.%s\", self->temp_folder, file_sha, EXTENSION);\n\n    free(file_sha);\n    int fd = open(formatted, O_RDWR | O_CREAT, 0644);\n    free(formatted);\n    if (fd == -1) {\n        return DTW_LOCKER_IMPOSSIBLE_TO_CREATE_FILE_DESCRIPTOR;\n    }\n    if (flock(fd, LOCK_EX) == -1) {\n        close(fd);\n        return DTW_LOCKER_FLCTL_FAIL;\n    }\n    privateDtwFlockArray_append(self->locked_files, filename, fd);\n    return  DTW_LOCKER_LOCKED;\n}\n\nvoid private_FlockLocker_unlock_by_index(DtwFlockLocker *self, int index){\n    privateDtwFlockLockedElement  *element = self->locked_files->elements[index];\n    flock(element->file_descriptor, LOCK_UN);\n    close(element->file_descriptor);\n}\nvoid DtwFlockLocker_unlock(DtwFlockLocker *self, const char *filename){\n    int index = privateDtwFlockArray_index_of(self->locked_files, filename);\n    if(index == -1){\n        return;\n    }\n    private_FlockLocker_unlock_by_index(self,index);\n}\nvoid  DtwFlockLocker_represent(DtwFlockLocker *self){\n    privateDtwFlockArray_represent(self->locked_files);\n}\nvoid  DtwFlockLocker_free(DtwFlockLocker *self){\n    for(int i = 0 ; i < self->locked_files->size; i++){\n        private_FlockLocker_unlock_by_index(self,i);\n    }\n    privateDtwFlockArray_free(self->locked_files);\n    free(self);\n}"
	}, {
		"path":	"src/lockers/flock_locker/flock_locker/flock_locker.h",
		"original_path":	"src/lockers/flock_locker/flock_locker/flock_locker.h",
		"dir":	"src/lockers/flock_locker/flock_locker/",
		"full_name":	"flock_locker.h",
		"name":	"flock_locker",
		"extension":	"h",
		"hardware_sha256":	"9bc0c3800a7a3ce44b12557b3915b07d0a8e67833df4e84ff5b0fb48ca0f0b33",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	462,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	462,
		"content_sha256":	"9bc0c3800a7a3ce44b12557b3915b07d0a8e67833df4e84ff5b0fb48ca0f0b33",
		"is_binary":	false,
		"content":	"\ntypedef struct {\n   const char *temp_folder;\n   privateDtwFlockArray  *locked_files;\n}DtwFlockLocker;\n\nDtwFlockLocker * newFlockLocker();\n\nvoid private_FlockLocker_unlock_by_index(DtwFlockLocker *self, int index);\n\nvoid DtwFlockLocker_unlock(DtwFlockLocker *self, const char *filename);\n\nint DtwFlockLocker_lock(DtwFlockLocker *self, const char *filename);\n\nvoid  DtwFlockLocker_represent(DtwFlockLocker *self);\n\nvoid  DtwFlockLocker_free(DtwFlockLocker *self);"
	}, {
		"path":	"src/lockers/flock_locker/flockarray/",
		"original_path":	"src/lockers/flock_locker/flockarray/",
		"dir":	"src/lockers/flock_locker/flockarray/"
	}, {
		"path":	"src/lockers/flock_locker/flockarray/declaration.h",
		"original_path":	"src/lockers/flock_locker/flockarray/declaration.h",
		"dir":	"src/lockers/flock_locker/flockarray/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"b5193638e83b5b63d2822ad7a642aad164daab38598a3c5d07dbb7248bed5bd0",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	93,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	93,
		"content_sha256":	"b5193638e83b5b63d2822ad7a642aad164daab38598a3c5d07dbb7248bed5bd0",
		"is_binary":	false,
		"content":	"#include \"flock_locked_element/flock_locked_element.h\"\n#include \"flock_array/flock_array.h\"\n\n"
	}, {
		"path":	"src/lockers/flock_locker/flockarray/definition.c",
		"original_path":	"src/lockers/flock_locker/flockarray/definition.c",
		"dir":	"src/lockers/flock_locker/flockarray/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"c82c81099e82c2d55b753dcd2af36ba0572b61d5f95056a99b6b23c4d171b68f",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	91,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	91,
		"content_sha256":	"c82c81099e82c2d55b753dcd2af36ba0572b61d5f95056a99b6b23c4d171b68f",
		"is_binary":	false,
		"content":	"#include \"flock_locked_element/flock_locked_element.c\"\n#include \"flock_array/flock_array.c\""
	}, {
		"path":	"src/lockers/flock_locker/flockarray/flock_array/",
		"original_path":	"src/lockers/flock_locker/flockarray/flock_array/",
		"dir":	"src/lockers/flock_locker/flockarray/flock_array/"
	}, {
		"path":	"src/lockers/flock_locker/flockarray/flock_array/flock_array.c",
		"original_path":	"src/lockers/flock_locker/flockarray/flock_array/flock_array.c",
		"dir":	"src/lockers/flock_locker/flockarray/flock_array/",
		"full_name":	"flock_array.c",
		"name":	"flock_array",
		"extension":	"c",
		"hardware_sha256":	"6b9b30dcf6510715f160a944f911cfea3ac7a518d1ac3bb6f4e5652edeff350c",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1970,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1970,
		"content_sha256":	"6b9b30dcf6510715f160a944f911cfea3ac7a518d1ac3bb6f4e5652edeff350c",
		"is_binary":	false,
		"content":	"\nprivateDtwFlockArray * private_new_privateFlockArray(){\n    privateDtwFlockArray * self = (privateDtwFlockArray*) malloc(sizeof (privateDtwFlockArray));\n    self->elements = (privateDtwFlockLockedElement **) malloc(0);\n    self->size = 0;\n    return self;\n}\n\n\nint  privateDtwFlockArray_index_of(privateDtwFlockArray *self, const char *filename){\n    for(int i = 0 ; i <self->size;i++){\n        privateDtwFlockLockedElement  *current = self->elements[i];\n        if(strcmp(current->filename,filename) ==0){\n            return  i;\n        }\n    }\n    return  -1;\n}\nvoid privateDtwFlockArray_append(privateDtwFlockArray *self, const char *filename, int file_descriptor){\n\n    self->elements = (privateDtwFlockLockedElement**) realloc(\n            self->elements,\n            sizeof(privateDtwFlockLockedElement**) * (self->size + 1)\n            );\n    privateDtwFlockLockedElement  *created = private_new_privateDtwFlockLockedElement(filename, file_descriptor);\n    self->elements[self->size] = created;\n    self->size+=1;\n}\n\nvoid privateDtwFlockArray_destroy_by_index(privateDtwFlockArray *self, int position){\n    if(position >= self->size){\n        return ;\n    }\n    privateDtwFlockLockedElement *finded = self->elements[position];\n    privateDtwFlockLockedElement_free(finded);\n    for(int i = position; i  < self->size-1; i++){\n        self->elements[i] = self->elements[i+1];\n    }\n    self->size-=1;\n}\n\n\nvoid privateDtwFlockArray_represent(privateDtwFlockArray *self){\n    for(int i = 0 ; i <self->size;i++){\n\n        privateDtwFlockLockedElement  *current = self->elements[i];\n        printf(\"=============================\\n\");\n        privateDtwFlockLockedElement_represent(current);\n    }\n}\n\nvoid privateDtwFlockArray_free(privateDtwFlockArray *self){\n    for(int i = 0 ; i <self->size;i++){\n        privateDtwFlockLockedElement  *current = self->elements[i];\n        privateDtwFlockLockedElement_free(current);\n    }\n    free(self->elements);\n    free(self);\n}"
	}, {
		"path":	"src/lockers/flock_locker/flockarray/flock_array/flock_array.h",
		"original_path":	"src/lockers/flock_locker/flockarray/flock_array/flock_array.h",
		"dir":	"src/lockers/flock_locker/flockarray/flock_array/",
		"full_name":	"flock_array.h",
		"name":	"flock_array",
		"extension":	"h",
		"hardware_sha256":	"3023eb6d898496362771b855cff7de2c4c40a88b8406d4cbcb1af3efaccda918",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	566,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	566,
		"content_sha256":	"3023eb6d898496362771b855cff7de2c4c40a88b8406d4cbcb1af3efaccda918",
		"is_binary":	false,
		"content":	"\n\n\ntypedef struct {\n    privateDtwFlockLockedElement **elements;\n    int size;\n}privateDtwFlockArray;\n\n\nprivateDtwFlockArray * private_new_privateFlockArray();\n\nint  privateDtwFlockArray_index_of(privateDtwFlockArray *self, const char *filename);\n\nvoid privateDtwFlockArray_append(privateDtwFlockArray *self, const char *filename, int file_descriptor);\n\nvoid privateDtwFlockArray_destroy_by_index(privateDtwFlockArray *self, int position);\n\nvoid privateDtwFlockArray_represent(privateDtwFlockArray *self);\n\nvoid privateDtwFlockArray_free(privateDtwFlockArray *self);"
	}, {
		"path":	"src/lockers/flock_locker/flockarray/flock_locked_element/",
		"original_path":	"src/lockers/flock_locker/flockarray/flock_locked_element/",
		"dir":	"src/lockers/flock_locker/flockarray/flock_locked_element/"
	}, {
		"path":	"src/lockers/flock_locker/flockarray/flock_locked_element/flock_locked_element.c",
		"original_path":	"src/lockers/flock_locker/flockarray/flock_locked_element/flock_locked_element.c",
		"dir":	"src/lockers/flock_locker/flockarray/flock_locked_element/",
		"full_name":	"flock_locked_element.c",
		"name":	"flock_locked_element",
		"extension":	"c",
		"hardware_sha256":	"7ec2279d5a13910c2f5cd1425d9748f0a877a261764a1c5911622e1bc340ae1b",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	634,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	634,
		"content_sha256":	"7ec2279d5a13910c2f5cd1425d9748f0a877a261764a1c5911622e1bc340ae1b",
		"is_binary":	false,
		"content":	"\n\nprivateDtwFlockLockedElement * private_new_privateDtwFlockLockedElement(const char *filename, int file_descriptor){\n    privateDtwFlockLockedElement *self = (privateDtwFlockLockedElement*) malloc(sizeof (privateDtwFlockLockedElement));\n    self->filename = strdup(filename);\n    self->file_descriptor = file_descriptor;\n    return  self;\n}\n\nvoid privateDtwFlockLockedElement_represent(privateDtwFlockLockedElement *self){\n    printf(\"file: %s\\n\",self->filename);\n    printf(\"if: %d\\n\",self->file_descriptor);\n\n}\nvoid privateDtwFlockLockedElement_free(privateDtwFlockLockedElement *self){\n    free(self->filename);\n    free(self);\n\n}"
	}, {
		"path":	"src/lockers/flock_locker/flockarray/flock_locked_element/flock_locked_element.h",
		"original_path":	"src/lockers/flock_locker/flockarray/flock_locked_element/flock_locked_element.h",
		"dir":	"src/lockers/flock_locker/flockarray/flock_locked_element/",
		"full_name":	"flock_locked_element.h",
		"name":	"flock_locked_element",
		"extension":	"h",
		"hardware_sha256":	"218bb5a3df19ac8cee6eb8bac1ee5f1f06f332bab8349942a37c4472654a1700",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	372,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	372,
		"content_sha256":	"218bb5a3df19ac8cee6eb8bac1ee5f1f06f332bab8349942a37c4472654a1700",
		"is_binary":	false,
		"content":	"\ntypedef struct {\n\n    char *filename;\n    int file_descriptor;\n\n\n}privateDtwFlockLockedElement;\n\nprivateDtwFlockLockedElement * private_new_privateDtwFlockLockedElement(const char *filename, int file_descriptor);\n\nvoid privateDtwFlockLockedElement_represent(privateDtwFlockLockedElement *self);\n\nvoid privateDtwFlockLockedElement_free(privateDtwFlockLockedElement *self);"
	}, {
		"path":	"src/lockers/locker/",
		"original_path":	"src/lockers/locker/",
		"dir":	"src/lockers/locker/"
	}, {
		"path":	"src/lockers/locker/locker.c",
		"original_path":	"src/lockers/locker/locker.c",
		"dir":	"src/lockers/locker/",
		"full_name":	"locker.c",
		"name":	"locker",
		"extension":	"c",
		"hardware_sha256":	"27e5902c8d43b5d1b1041a5c67f5ef1896ca234c352e5062273f5528b936beb6",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1097,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1097,
		"content_sha256":	"27e5902c8d43b5d1b1041a5c67f5ef1896ca234c352e5062273f5528b936beb6",
		"is_binary":	false,
		"content":	"\n\nDtwLocker *newDtwLocker(){\n\n    DtwLocker *self = (DtwLocker*)malloc(sizeof(DtwLocker));\n#ifdef __linux__\n    self->locker = newFlockLocker();\n#endif\n#ifdef _WIN32\n    self->locker = newDtwMultiFileLocker();\n#endif\n    return self;\n}\n\nint DtwLocker_lock(DtwLocker *self, const  char *element){\n\n#ifdef __linux__\n    return DtwFlockLocker_lock(self->locker,element);\n#endif\n#ifdef _WIN32\n    return DtwMultiFIleLocker_lock(self->locker,element);\n#endif\n    return  DTW_LOCKER_OS_NOT_PREDICTIBLE;\n}\n\nvoid DtwLocker_unlock(DtwLocker *self, const  char *element){\n\n#ifdef __linux__\n    DtwFlockLocker_unlock(self->locker,element);\n#endif\n    #ifdef _WIN32\n         DtwMultifileLocker_unlock(self->locker,element);\n    #endif\n}\n\nvoid DtwLocker_represemt(DtwLocker *self){\n\n#ifdef __linux__\n    DtwFlockLocker_represent(self->locker);\n#endif\n#ifdef _WIN32\n     DtwMultiFileLocker_represemt(self->locker);\n#endif\n}\n\nvoid DtwLocker_free(DtwLocker *self){\n\n#ifdef __linux__\n    DtwFlockLocker_free(self->locker);\n#endif\n\n#ifdef _WIN32\n     DtwMultiFileLocker_free(self->locker);\n#endif\n    free(self);\n}\n"
	}, {
		"path":	"src/lockers/locker/locker.h",
		"original_path":	"src/lockers/locker/locker.h",
		"dir":	"src/lockers/locker/",
		"full_name":	"locker.h",
		"name":	"locker",
		"extension":	"h",
		"hardware_sha256":	"ceb50e59b32be40b15162e97475328fc72a7bf7b3a9637fa7a3f60471c628251",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	566,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	566,
		"content_sha256":	"ceb50e59b32be40b15162e97475328fc72a7bf7b3a9637fa7a3f60471c628251",
		"is_binary":	false,
		"content":	"\n#define DTW_LOCKER_LOCKED 0\n#define DTW_LOCKER_IMPOSSIBLE_TO_CREATE_FILE_DESCRIPTOR 5\n#define DTW_LOCKER_FLCTL_FAIL 6\n#define DTW_LOCKER_WAIT_ERROR 21\n#define DTW_LOCKER_OS_NOT_PREDICTIBLE -1\ntypedef struct {\n#ifdef __linux__\n    DtwFlockLocker *locker;\n#endif\n#ifdef _WIN32\n    DtwMultiFileLocker  *locker;\n#endif\n\n} DtwLocker;\n\n\nDtwLocker *newDtwLocker();\n\nint DtwLocker_lock(DtwLocker *self, const  char *element);\n\nvoid DtwLocker_unlock(DtwLocker *self, const  char *element);\n\nvoid DtwLocker_represemt(DtwLocker *self);\n\nvoid DtwLocker_free(DtwLocker *self);\n\n"
	}, {
		"path":	"src/lockers/multifile_locker/",
		"original_path":	"src/lockers/multifile_locker/",
		"dir":	"src/lockers/multifile_locker/"
	}, {
		"path":	"src/lockers/multifile_locker/multifile_locker.c",
		"original_path":	"src/lockers/multifile_locker/multifile_locker.c",
		"dir":	"src/lockers/multifile_locker/",
		"full_name":	"multifile_locker.c",
		"name":	"multifile_locker",
		"extension":	"c",
		"hardware_sha256":	"4fe83ab14b1abf5c267589b2f23e0a694f0b41694e32468b12b3359a4f84851d",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	3371,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	3371,
		"content_sha256":	"4fe83ab14b1abf5c267589b2f23e0a694f0b41694e32468b12b3359a4f84851d",
		"is_binary":	false,
		"content":	"\n\nDtwMultiFileLocker *newDtwMultiFileLocker(){\n    DtwMultiFileLocker *self = (DtwMultiFileLocker*) malloc(sizeof (DtwMultiFileLocker));\n\n    self->process = getpid();\n    self->total_checks = DTW_MULTIFILE_LOCKER_TOTAL_CHECK;\n    self->max_lock_time = DTW_MULTIFILE_LOCKER_MAX_TIMEOUT;\n    self->max_wait = DTW_MULFILE_LOCKER_MAX_WAIT;\n    self->locked_elements = newDtwStringArray();\n\n    return self;\n}\n\n\n\n\nint  DtwMultiFIleLocker_lock(DtwMultiFileLocker *self, const char *element) {\n\n    if(DtwStringArray_find_position(self->locked_elements,element) != -1){\n        return DTW_LOCKER_LOCKED;\n    }\n\n    const char *LOCK_FOLDER = \".lock\";\n    const int LOCK_FOLDER_SIZE = (int)strlen(LOCK_FOLDER);\n    char *file = (char*)malloc(strlen(element) +  LOCK_FOLDER_SIZE + 10);\n    sprintf(file,\"%s%s\",element,LOCK_FOLDER);\n    long started_time = time(NULL);\n\n    while (true){\n\n\n        long now = time(NULL);\n        if((now - started_time) > self->max_wait){\n            free(file);\n            return DTW_LOCKER_WAIT_ERROR;\n        }\n\n\n         bool write = false;\n         int entity_type = dtw_entity_type(file);\n         if(entity_type== DTW_NOT_FOUND){\n            write = true;\n         }\n\n         if(entity_type== DTW_FILE_TYPE){\n             long last_modification  = dtw_get_entity_last_motification_in_unix(file);\n             if ((now - self->max_lock_time) > last_modification ) {\n                 write = true;\n             }\n         }\n\n         if(entity_type == DTW_FOLDER_TYPE){\n             dtw_remove_any(file);\n             continue;\n         }\n\n\n         if(!write) {\n             continue;\n         }\n        dtw_write_long_file_content(file,self->process);\n        bool break_loop = true;\n         for(int i = 0;i < self->total_checks;i++){\n            long result = dtw_load_long_file_content(file);\n            if(result != self->process && result != -1){\n                break_loop = false;\n                break;\n            }\n        }\n\n        if(break_loop){\n            break;\n\n        }\n\n\n    }\n    DtwStringArray_append(self->locked_elements,element);\n    free(file);\n    return DTW_LOCKER_LOCKED;\n\n}\n\nvoid DtwMultifileLocker_unlock(DtwMultiFileLocker *self, const  char *element){\n    bool found = false;\n    for(long i = 0; i < self->locked_elements->size;i++){\n        if(strcmp(self->locked_elements->strings[i],element)==0){\n            found = true;\n            break;\n        }\n    }\n\n    if(!found){\n        return;\n    }\n\n\n    const char *LOCK_FOLDER = \".lock\";\n    const int LOCK_FOLDER_SIZE = (int)strlen(LOCK_FOLDER);\n    char *file = (char*)malloc(strlen(element) +  LOCK_FOLDER_SIZE + 10);\n    sprintf(file,\"%s%s\",element,LOCK_FOLDER);\n    dtw_remove_any(file);\n    free(file);\n}\n\n\nvoid DtwMultiFileLocker_represemt(DtwMultiFileLocker *self){\n    printf(\"locked:\\n\");\n    for(int i = 0 ; i < self->locked_elements->size;i++){\n        char *element = self->locked_elements->strings[i];\n        char *unformated = dtw_replace_string(element,\".lock\",\"\");\n        printf(\"\\t%s\\n\",unformated);\n        free(unformated);\n    }\n}\n\nvoid DtwMultiFileLocker_free(DtwMultiFileLocker *self){\n\n    for(int i = 0 ; i < self->locked_elements->size;i++){\n        char *element = self->locked_elements->strings[i];\n        DtwMultifileLocker_unlock(self, element);\n    }\n\n    DtwStringArray_free(self->locked_elements);\n    free(self);\n}"
	}, {
		"path":	"src/lockers/multifile_locker/multifile_locker.h",
		"original_path":	"src/lockers/multifile_locker/multifile_locker.h",
		"dir":	"src/lockers/multifile_locker/",
		"full_name":	"multifile_locker.h",
		"name":	"multifile_locker",
		"extension":	"h",
		"hardware_sha256":	"4dfe0a88a47abe0e31508151f8b542b7a8ef657f6521c8904e11a9a14358c0e4",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	609,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	609,
		"content_sha256":	"4dfe0a88a47abe0e31508151f8b542b7a8ef657f6521c8904e11a9a14358c0e4",
		"is_binary":	false,
		"content":	"#define DTW_MULTIFILE_LOCKER_TOTAL_CHECK 500\n#define DTW_MULTIFILE_LOCKER_MAX_TIMEOUT 10\n#define DTW_MULFILE_LOCKER_MAX_WAIT 10\n\n\ntypedef struct {\n\n   int total_checks;\n   int process;\n   int max_wait;\n   int max_lock_time;\n   DtwStringArray *locked_elements;\n\n\n}DtwMultiFileLocker;\n\n\nDtwMultiFileLocker *newDtwMultiFileLocker();\n\nint DtwMultiFIleLocker_lock(DtwMultiFileLocker *self, const  char *element);\n\nvoid DtwMultifileLocker_unlock(DtwMultiFileLocker *self, const  char *element);\n\nvoid DtwMultiFileLocker_represemt(DtwMultiFileLocker *self);\n\nvoid DtwMultiFileLocker_free(DtwMultiFileLocker *self);\n\n"
	}, {
		"path":	"src/monodimension_listage/",
		"original_path":	"src/monodimension_listage/",
		"dir":	"src/monodimension_listage/"
	}, {
		"path":	"src/monodimension_listage/monodimension_listage.h",
		"original_path":	"src/monodimension_listage/monodimension_listage.h",
		"dir":	"src/monodimension_listage/",
		"full_name":	"monodimension_listage.h",
		"name":	"monodimension_listage",
		"extension":	"h",
		"hardware_sha256":	"fce05b68dc1094751c2817fa3dfe19c10a8c03fb5574e7d8b86e24674aaa23e5",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	411,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	411,
		"content_sha256":	"fce05b68dc1094751c2817fa3dfe19c10a8c03fb5574e7d8b86e24674aaa23e5",
		"is_binary":	false,
		"content":	"\n#ifdef __linux__\n\nbool private_dtw_verify_if_add(const int expected_type, int d_type);\nbool private_dtw_verify_if_skip(struct dirent *entry);\n\n#endif\n\n\n#ifdef _WIN32\n\nbool private_dtw_verify_if_add(const int expected_type, WIN32_FIND_DATAA entry);\nbool private_dtw_verify_if_skip(WIN32_FIND_DATAA *entry);\n#endif\n\n\n\nstruct DtwStringArray * dtw_list_basic(const char *path,int expected_type,bool concat_path);\n "
	}, {
		"path":	"src/monodimension_listage/monodimension_listage_linux.c",
		"original_path":	"src/monodimension_listage/monodimension_listage_linux.c",
		"dir":	"src/monodimension_listage/",
		"full_name":	"monodimension_listage_linux.c",
		"name":	"monodimension_listage_linux",
		"extension":	"c",
		"hardware_sha256":	"0b1c2732aba0d5b2122f71a695dd4e9e1c8bb6c7493b0c8047684d665520d7c9",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2082,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2082,
		"content_sha256":	"0b1c2732aba0d5b2122f71a695dd4e9e1c8bb6c7493b0c8047684d665520d7c9",
		"is_binary":	false,
		"content":	"\n\n#ifdef __linux__\n\nbool private_dtw_verify_if_add(const int expected_type, int d_type){\n    if (expected_type == DTW_FILE_TYPE  && d_type == DT_REG) {\n        return true;\n    }\n\n    if (expected_type == DTW_FOLDER_TYPE && d_type == DT_DIR) {\n        return true;\n    }\n\n    if (expected_type == DTW_ALL_TYPE) {\n      \n        return true;\n    }\n    return false;\n}\nbool private_dtw_verify_if_skip(struct dirent *entry){\n        if (strcmp(entry->d_name, \".\") == 0 || strcmp(entry->d_name, \"..\") == 0) {\n            return true;\n        }\n        return false;\n}\n\nstruct DtwStringArray * dtw_list_basic(const char *path,int expected_type,bool concat_path){\n\n    DIR *dir;\n    struct dirent *entry;\n\n    //array of directories\n    struct DtwStringArray *dirs = newDtwStringArray();\n    int i = 0;\n\n    //means that the directory is not found\n    if ((dir = opendir(path)) == NULL) {\n        return dirs;\n    }\n\n    //reads the directory and adds the directories to the array\n    while ((entry = readdir(dir)) != NULL) {\n        //means is not a directory\n        if (private_dtw_verify_if_skip(entry)){\n            continue;\n        }\n    \n        if (private_dtw_verify_if_add(expected_type,entry->d_type)) {\n            \n            \n            if(concat_path){\n                //allocates memory for the directory\n                char *generated_dir = (char*)malloc(strlen(path) + strlen(entry->d_name) + 2);\n                if(path[strlen(path) - 1] == '/'){\n                    sprintf(generated_dir, \"%s%s\", path, entry->d_name);\n                }\n                else{\n                    sprintf(generated_dir, \"%s/%s\", path, entry->d_name);\n                }\n\n                DtwStringArray_append(dirs, generated_dir);\n                free(generated_dir);\n            }\n            else{\n                DtwStringArray_append(dirs, entry->d_name);\n                \n            }\n\n            i++;\n        }\n    }\n\n    if(expected_type == DTW_FOLDER_TYPE){\n        private_dtw_add_end_bar_to_dirs_string_array(dirs);   \n    }\n    closedir(dir);\n\n    return dirs;\n}\n\n#endif"
	}, {
		"path":	"src/monodimension_listage/monodimension_listage_win32.c",
		"original_path":	"src/monodimension_listage/monodimension_listage_win32.c",
		"dir":	"src/monodimension_listage/",
		"full_name":	"monodimension_listage_win32.c",
		"name":	"monodimension_listage_win32",
		"extension":	"c",
		"hardware_sha256":	"b9fd51db8fe500395ed0909f7d6d19327471fc75092f88fd5a5a678006a18b28",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2691,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2691,
		"content_sha256":	"b9fd51db8fe500395ed0909f7d6d19327471fc75092f88fd5a5a678006a18b28",
		"is_binary":	false,
		"content":	"\n#ifdef _WIN32\n\n\nbool private_dtw_verify_if_add(const int expected_type, WIN32_FIND_DATAA entry){\n    #define WIN32_FILETYPE 32\n\n    if (expected_type == DTW_FILE_TYPE && entry.dwFileAttributes == WIN32_FILETYPE) {\n        return true;\n    }\n\n    if (expected_type == DTW_FOLDER_TYPE && entry.dwFileAttributes != WIN32_FILETYPE){\n        return true;\n    }\n\n    if (expected_type == DTW_ALL_TYPE) {\n        return true;\n    }\n    \n    return false;\n}\n\nbool private_dtw_verify_if_skip(WIN32_FIND_DATAA *entry){\n    if (strcmp(entry->cFileName, \".\") == 0 || strcmp(entry->cFileName, \"..\") == 0) {\n        return true;\n    }\n    return false;\n}\n\nstruct DtwStringArray *  dtw_list_basic(const char *path,int expected_type,bool concat_path){\n\n    WIN32_FIND_DATAA file_data;\n    HANDLE file_handle;\n    char search_path[MAX_PATH];\n\n    //array of directories\n    struct DtwStringArray *dirs = newDtwStringArray();\n    int i = 0;\n\n    // build the search path string\n    snprintf(search_path, MAX_PATH, \"%s\\\\*\", path);\n\n    // try to open the directory\n    if ((file_handle = FindFirstFileA(search_path, &file_data)) == INVALID_HANDLE_VALUE) {\n        return dirs;\n    }\n\n    do {\n        // skip \".\" and \"..\" directories\n        if (private_dtw_verify_if_skip(&file_data)){\n            continue;\n        }\n\n        // verify if it's a file or directory\n        if (private_dtw_verify_if_add(expected_type, file_data)) {\n            \n            if(concat_path){\n                // allocate memory for the directory\n                if(path[strlen(path) - 1] == '\\\\' || path[strlen(path) - 1] == '/'){\n                    char *generated_dir = (char*)malloc(strlen(path) + strlen(file_data.cFileName) + 1);\n                    sprintf(generated_dir, \"%s%s\", path, file_data.cFileName);\n                    DtwStringArray_append(dirs, generated_dir);\n                    free(generated_dir);\n                }\n                else{\n                    char *generated_dir = (char*)malloc(strlen(path) + strlen(file_data.cFileName) + 2);\n                    \n\n                    sprintf(generated_dir, \"%s/%s\", path, file_data.cFileName);\n                   \n                    DtwStringArray_append(dirs, generated_dir);\n                    free(generated_dir);\n                }\n                \n    \n            }\n            else{\n                DtwStringArray_append(dirs, file_data.cFileName);\n            \n            }\n\n            i++;\n        }\n    } while (FindNextFileA(file_handle, &file_data) != 0);\n\n        if(expected_type == DTW_FOLDER_TYPE){\n            private_dtw_add_end_bar_to_dirs_string_array(dirs);   \n        }\n    \n    FindClose(file_handle);\n\n    return dirs;\n}\n#endif"
	}, {
		"path":	"src/multidimension_listage/",
		"original_path":	"src/multidimension_listage/",
		"dir":	"src/multidimension_listage/"
	}, {
		"path":	"src/multidimension_listage/multidimension_listage.c",
		"original_path":	"src/multidimension_listage/multidimension_listage.c",
		"dir":	"src/multidimension_listage/",
		"full_name":	"multidimension_listage.c",
		"name":	"multidimension_listage",
		"extension":	"c",
		"hardware_sha256":	"90ad8778a41c755ec07a6609abf0d7dd5a08aa9e41ae77d29181bf87efe66d75",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	3126,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	3126,
		"content_sha256":	"90ad8778a41c755ec07a6609abf0d7dd5a08aa9e41ae77d29181bf87efe66d75",
		"is_binary":	false,
		"content":	"\n DtwStringArray * dtw_list_dirs_recursively(const char *path,bool concat_path){\n\n        struct  DtwStringArray *dirs  = newDtwStringArray();\n        //verify if the path is a directory\n    \n        int entity_type = dtw_entity_type(path);\n        if(entity_type != DTW_FOLDER_TYPE){\n                return dirs;\n        }\n      \n        \n        DtwStringArray_append(dirs, (char*)path);\n\n        private_dtw_add_end_bar_to_dirs_string_array(dirs);\n        int i = 0;\n        //The size of dirs will increase til it reaches the end of the array\n        while(i < dirs->size){                \n                struct DtwStringArray *sub_dirs = dtw_list_basic(\n                    dirs->strings[i],\n                    DTW_FOLDER_TYPE,\n                    true\n                    );\n                //merge the two dirs\n            DtwStringArray_merge(dirs, sub_dirs);\n                DtwStringArray_free(sub_dirs);\n                i++;\n               \n        }\n        //unsifth path in dirs \n     private_dtw_remove_double_bars_from_string_array(dirs);\n\n        if(!concat_path){\n\n            struct DtwStringArray *removed =  private_dtw_remove_start_path(dirs,path);\n            DtwStringArray_free(dirs);\n            return removed;\n        }\n        return dirs;\n}\n\n\n\n DtwStringArray *  dtw_list_files_recursively(const char *path,bool concat_path){\n    \n    struct DtwStringArray *dirs = dtw_list_dirs_recursively(path,DTW_CONCAT_PATH);\n    \n    struct  DtwStringArray *files = newDtwStringArray();\n    for(int i = 0; i < dirs->size; i++){\n        struct DtwStringArray *sub_files = dtw_list_basic(dirs->strings[i],DTW_FILE_TYPE,DTW_CONCAT_PATH);\n        DtwStringArray_merge(files, sub_files);\n        DtwStringArray_free(sub_files);\n    }\n\n    DtwStringArray_free(dirs);\n\n    if(!concat_path){\n\n        struct DtwStringArray *removed =  private_dtw_remove_start_path(files,path);\n        DtwStringArray_free(files);\n        return removed;\n    }\n\n    return files;\n}\n\n\n DtwStringArray * dtw_list_all_recursively(const char *path,bool concat_path){\n\n    struct DtwStringArray *dirs = dtw_list_dirs_recursively(path,DTW_CONCAT_PATH);\n    \n    struct DtwStringArray *all = newDtwStringArray();\n    \n    for(int i = 0; i < dirs->size; i++){\n\n        if(!dtw_ends_with(dirs->strings[i], \"/\") || !dtw_ends_with(dirs->strings[i], \"\\\\\") ){\n\n            char *formated_dir =  (char*)malloc(strlen(dirs->strings[i]) + 2);\n            sprintf(formated_dir,\"%s/\",dirs->strings[i]);\n            DtwStringArray_append(all, formated_dir);\n            free(formated_dir);\n        }\n\n        else{\n            DtwStringArray_append(all, dirs->strings[i]);\n        }\n\n        struct DtwStringArray *sub_files = dtw_list_basic(dirs->strings[i],DTW_FILE_TYPE,true);\n        DtwStringArray_merge(all,sub_files);\n        DtwStringArray_free(sub_files);\n    }\n    DtwStringArray_free(dirs);\n     private_dtw_remove_double_bars_from_string_array(all);\n    if(!concat_path){\n\n        struct DtwStringArray *removed =  private_dtw_remove_start_path(all,path);\n        DtwStringArray_free(all);\n        return removed;\n    }\n    return all;\n}"
	}, {
		"path":	"src/multidimension_listage/multidimension_listage.h",
		"original_path":	"src/multidimension_listage/multidimension_listage.h",
		"dir":	"src/multidimension_listage/",
		"full_name":	"multidimension_listage.h",
		"name":	"multidimension_listage",
		"extension":	"h",
		"hardware_sha256":	"85772e46313a3b78b558d589de691d1b80d628cc161064ccd7c6b2ad79519977",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	246,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	246,
		"content_sha256":	"85772e46313a3b78b558d589de691d1b80d628cc161064ccd7c6b2ad79519977",
		"is_binary":	false,
		"content":	"\n DtwStringArray * dtw_list_dirs_recursively(const char *path,bool concat_path);\n\n\n DtwStringArray *  dtw_list_files_recursively(const char *path,bool concat_path);\n\n\n DtwStringArray * dtw_list_all_recursively(const char *path,bool concat_path);\n"
	}, {
		"path":	"src/namespace/",
		"original_path":	"src/namespace/",
		"dir":	"src/namespace/"
	}, {
		"path":	"src/namespace/database_schema_module/",
		"original_path":	"src/namespace/database_schema_module/",
		"dir":	"src/namespace/database_schema_module/"
	}, {
		"path":	"src/namespace/database_schema_module/database_schema_module.c",
		"original_path":	"src/namespace/database_schema_module/database_schema_module.c",
		"dir":	"src/namespace/database_schema_module/",
		"full_name":	"database_schema_module.c",
		"name":	"database_schema_module",
		"extension":	"c",
		"hardware_sha256":	"6f21efc1188a1b0ec1e6dfd86fbc3a910b2909a6c93565d75eef582d03c8cd48",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	172,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	172,
		"content_sha256":	"6f21efc1188a1b0ec1e6dfd86fbc3a910b2909a6c93565d75eef582d03c8cd48",
		"is_binary":	false,
		"content":	"\n\nDtwDatabaseSchemaModule newDtwDatabaseSchemaModule(){\n    DtwDatabaseSchemaModule  self = {0};\n    self.sub_schema = DtwDtatabaseSchema_new_subSchema;\n    return  self;\n}"
	}, {
		"path":	"src/namespace/database_schema_module/database_schema_module.h",
		"original_path":	"src/namespace/database_schema_module/database_schema_module.h",
		"dir":	"src/namespace/database_schema_module/",
		"full_name":	"database_schema_module.h",
		"name":	"database_schema_module",
		"extension":	"h",
		"hardware_sha256":	"33791b90778b8aeb6f17293696543a05f36deb918afe773aa5e311c857dd1f21",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	171,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	171,
		"content_sha256":	"33791b90778b8aeb6f17293696543a05f36deb918afe773aa5e311c857dd1f21",
		"is_binary":	false,
		"content":	"\ntypedef struct {\n    DtwSchema * (*sub_schema)(DtwDatabaseSchema *self,const char *name);\n}DtwDatabaseSchemaModule;\n\nDtwDatabaseSchemaModule newDtwDatabaseSchemaModule();"
	}, {
		"path":	"src/namespace/declaration.h",
		"original_path":	"src/namespace/declaration.h",
		"dir":	"src/namespace/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"09ef36b645e7d651c1917c2431202de62eeaee5e990acf6380a5cfd791d3ad9d",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	458,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	458,
		"content_sha256":	"09ef36b645e7d651c1917c2431202de62eeaee5e990acf6380a5cfd791d3ad9d",
		"is_binary":	false,
		"content":	"#include \"randonizer_module/randonizer_module.h\"\n#include \"path_module/path_module.h\"\n#include \"string_array_module/string_array_module.h\"\n#include \"tree_module/declaration.h\"\n#include \"locker/locker.h\"\n#include \"transaction_module/declaration.h\"\n#include \"resource_module/declaration.h\"\n#include \"hash_module/hash_module.h\"\n#include \"schema_module/schema_module.h\"\n#include \"database_schema_module/database_schema_module.h\"\n#include \"namespace/namespace.h\"\n"
	}, {
		"path":	"src/namespace/definition.c",
		"original_path":	"src/namespace/definition.c",
		"dir":	"src/namespace/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"4c2e0355ba5f3fcef67d517a895e5a1662679c7707b19275dd16d8b6bc1a3e93",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	454,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	454,
		"content_sha256":	"4c2e0355ba5f3fcef67d517a895e5a1662679c7707b19275dd16d8b6bc1a3e93",
		"is_binary":	false,
		"content":	"#include \"randonizer_module/randonizer_module.c\"\n#include \"path_module/path_module.c\"\n#include \"string_array_module/string_array_module.c\"\n#include \"tree_module/definition.c\"\n#include \"locker/locker.c\"\n#include \"transaction_module/definition.c\"\n#include \"resource_module/definition.c\"\n#include \"hash_module/hash_module.c\"\n#include \"schema_module/schema_module.c\"\n#include \"database_schema_module/database_schema_module.c\"\n#include \"namespace/namespace.c\""
	}, {
		"path":	"src/namespace/hash_module/",
		"original_path":	"src/namespace/hash_module/",
		"dir":	"src/namespace/hash_module/"
	}, {
		"path":	"src/namespace/hash_module/hash_module.c",
		"original_path":	"src/namespace/hash_module/hash_module.c",
		"dir":	"src/namespace/hash_module/",
		"full_name":	"hash_module.c",
		"name":	"hash_module",
		"extension":	"c",
		"hardware_sha256":	"7e8c77fbdc5fa26dd0b2b91a946c735d4c3f609b6e2f715b31da17d543001186",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1113,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1113,
		"content_sha256":	"7e8c77fbdc5fa26dd0b2b91a946c735d4c3f609b6e2f715b31da17d543001186",
		"is_binary":	false,
		"content":	"\n\nDtwHashModule newDtwHashModule(){\n    DtwHashModule self = {0};\n    self.newHash =newDtwHash;\n    self.digest_any = DtwHash_digest_any;\n    self.digest_string = DtwHash_digest_string;\n    self.digest_long = DtwHash_digest_long;\n    self.digest_double = DtwHash_digest_double;\n    self.digest_bool = DtwHash_digest_bool;\n    self.digest_file = DtwHash_digest_file;\n    self.digest_entity_last_modification =DtwHash_digest_entity_last_modification;\n    self.digest_string_array = DtwHash_digest_string_array;\n    self.digest_string_array_last_modifications = DtwHash_digest_string_array_last_modifications;\n    self.digest_string_array_last_modifications_adding_name = DtwHash_digest_string_array_last_modifications_adding_name;\n    self.digest_string_array_content = DtwHash_digest_string_array_content;\n    self.digest_string_array_content_adding_name = DtwHash_digest_string_array_content_adding_name;\n    self.digest_folder_by_last_modification = DtwHash_digest_folder_by_last_modification;\n    self.digest_folder_by_content = DtwHash_digest_folder_by_content;\n    self.free = DtwHash_free;\n    return self;\n}"
	}, {
		"path":	"src/namespace/hash_module/hash_module.h",
		"original_path":	"src/namespace/hash_module/hash_module.h",
		"dir":	"src/namespace/hash_module/",
		"full_name":	"hash_module.h",
		"name":	"hash_module",
		"extension":	"h",
		"hardware_sha256":	"f48c0f3e867ebadc4161ca56c620d8298a5415ac8ec4d05ddf8f442cc9a84fa0",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1175,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1175,
		"content_sha256":	"f48c0f3e867ebadc4161ca56c620d8298a5415ac8ec4d05ddf8f442cc9a84fa0",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwHashModule{\n    DtwHash * (*newHash)();\n    bool  (*digest_any)(DtwHash *self,unsigned char *content,long size);\n    bool (*digest_string)(DtwHash * self, const char *content);\n    void (*digest_long)(DtwHash * self,long content);\n    void (*digest_double)(DtwHash * self,double content);\n    void (*digest_bool)(DtwHash * self,bool content);\n    bool  (*digest_file)(DtwHash * self, const char *path);\n    bool  (*digest_entity_last_modification)(DtwHash * self, const char *path);\n    bool (*digest_string_array)(DtwHash *self,DtwStringArray *element);\n    bool (*digest_string_array_last_modifications)(DtwHash *self,DtwStringArray *element);\n    bool (*digest_string_array_last_modifications_adding_name)(DtwHash *self,DtwStringArray *element);\n    bool (*digest_string_array_content)(DtwHash *self,DtwStringArray *element);\n    bool (*digest_string_array_content_adding_name)(DtwHash *self,DtwStringArray *element);\n    bool (*digest_folder_by_last_modification)(DtwHash *self,const char *path);\n    bool (*digest_folder_by_content)(DtwHash *self,const char *path);\n    void  (*free)(DtwHash *self);\n\n}DtwHashModule;\n\nDtwHashModule newDtwHashModule();"
	}, {
		"path":	"src/namespace/locker/",
		"original_path":	"src/namespace/locker/",
		"dir":	"src/namespace/locker/"
	}, {
		"path":	"src/namespace/locker/locker.c",
		"original_path":	"src/namespace/locker/locker.c",
		"dir":	"src/namespace/locker/",
		"full_name":	"locker.c",
		"name":	"locker",
		"extension":	"c",
		"hardware_sha256":	"4accc5340a66aa3986811cfdae743b244a41634d1bc935d263184cf8d09644b9",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	267,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	267,
		"content_sha256":	"4accc5340a66aa3986811cfdae743b244a41634d1bc935d263184cf8d09644b9",
		"is_binary":	false,
		"content":	"\nDtwLockerModule newDtwLockerModule(){\n    DtwLockerModule  self = {0};\n    self.newLocker = newDtwLocker;\n    self.lock = DtwLocker_lock;\n    self.unlock = DtwLocker_unlock;\n    self.represemt = DtwLocker_represemt;\n    self.free = DtwLocker_free;\n    return self;\n}"
	}, {
		"path":	"src/namespace/locker/locker.h",
		"original_path":	"src/namespace/locker/locker.h",
		"dir":	"src/namespace/locker/",
		"full_name":	"locker.h",
		"name":	"locker",
		"extension":	"h",
		"hardware_sha256":	"de7db34c30a225ae62568a540622601701bba5738333f58bf4a92e5811475175",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	313,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	313,
		"content_sha256":	"de7db34c30a225ae62568a540622601701bba5738333f58bf4a92e5811475175",
		"is_binary":	false,
		"content":	"\n\ntypedef struct DtwLockerModule{\n    DtwLocker * (*newLocker)();\n    int (*lock)(DtwLocker *self, const  char *element);\n    void (*unlock)(DtwLocker *self, const  char *element);\n    void (*represemt)(DtwLocker *self);\n    void (*free)(DtwLocker *self);\n\n}DtwLockerModule;\n\nDtwLockerModule newDtwLockerModule();"
	}, {
		"path":	"src/namespace/namespace/",
		"original_path":	"src/namespace/namespace/",
		"dir":	"src/namespace/namespace/"
	}, {
		"path":	"src/namespace/namespace/namespace.c",
		"original_path":	"src/namespace/namespace/namespace.c",
		"dir":	"src/namespace/namespace/",
		"full_name":	"namespace.c",
		"name":	"namespace",
		"extension":	"c",
		"hardware_sha256":	"cbe0a6712a83cdd933a321259680180e1fe984bcdaa08c91f69b6218fd6400b5",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2496,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2496,
		"content_sha256":	"cbe0a6712a83cdd933a321259680180e1fe984bcdaa08c91f69b6218fd6400b5",
		"is_binary":	false,
		"content":	"\nDtwNamespace newDtwNamespace(){\n    DtwNamespace self = {0};\n    //io\n    self.create_dir_recursively = dtw_create_dir_recursively;\n    self.remove_any = dtw_remove_any;\n    self.get_current_dir = dtw_get_current_dir;\n    self.load_any_content = dtw_load_any_content;\n    self.load_string_file_content = dtw_load_string_file_content;\n    self.load_binary_content = dtw_load_binary_content;\n    self.write_any_content = dtw_write_any_content;\n    self.write_string_file_content =dtw_write_string_file_content;\n    self.entity_type = dtw_entity_type;\n    self.complex_entity_type = dtw_complex_entity_type;\n    self.convert_entity  = dtw_convert_entity;\n    self.copy_any = dtw_copy_any;\n    self.move_any = dtw_move_any;\n    //numeral io\n    self.load_long_file_content = dtw_load_long_file_content;\n    self.load_double_file_content =  dtw_load_double_file_content;\n    self.load_bool_file_content = dtw_load_bool_file_content;\n\n    self.write_long_file_content = dtw_write_long_file_content;\n    self.write_double_file_content = dtw_write_double_file_content;\n    self.write_bool_file_content = dtw_write_bool_file_content;\n\n    //listage\n    self.list_files = dtw_list_files;\n    self.list_dirs = dtw_list_dirs;\n    self.list_all = dtw_list_all;\n\n    self.list_files_recursively = dtw_list_files_recursively;\n    self.list_dirs_recursively = dtw_list_dirs_recursively;\n    self.list_all_recursively = dtw_list_all_recursively;\n\n    //extras\n    self.generate_sha_from_file = dtw_generate_sha_from_file;\n    self.generate_sha_from_string = dtw_generate_sha_from_string;\n    self.generate_sha_from_any = dtw_generate_sha_from_any;\n    self.get_entity_last_motification_in_unix = dtw_get_entity_last_motification_in_unix;\n    self.get_entity_last_motification_in_string = dtw_get_entity_last_motification_in_string;\n    self.concat_path = dtw_concat_path;\n    //bas64\n    self.base64_encode = dtw_base64_encode;\n    self.base64_decode  = dtw_base64_decode;\n    self.convert_binary_file_to_base64 = dtw_convert_binary_file_to_base64;\n\n    self.string_array = newDtwStringArrayModule();\n    self.path = newDtwPathModule();\n    self.locker = newDtwLockerModule();\n    \n    self.schema = newDtwSchemaModule();\n    self.database_schema = newDtwDatabaseSchemaModule();\n    self.tree = newDtwTreeModule();\n    self.hash = newDtwHashModule();\n    self.transaction = newDtwTransactionModule();\n    self.resource = newDtwResourceModule();\n    self.randonizer = newDtwRandonizerModule();\n\n    return self;\n}"
	}, {
		"path":	"src/namespace/namespace/namespace.h",
		"original_path":	"src/namespace/namespace/namespace.h",
		"dir":	"src/namespace/namespace/",
		"full_name":	"namespace.h",
		"name":	"namespace",
		"extension":	"h",
		"hardware_sha256":	"95929ff90a590ce111d9f07b27323ad81fb0c761a2cd75589b1b9e8ae7a87527",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2829,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2829,
		"content_sha256":	"95929ff90a590ce111d9f07b27323ad81fb0c761a2cd75589b1b9e8ae7a87527",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwNamespace{\n    //IO\n    void (*create_dir_recursively)(const char *path);\n\n    bool (*remove_any)(const char* path);\n\n    char *(*get_current_dir)();\n\n    unsigned char *(*load_any_content)(const char * path,long *size,bool *is_binary);\n\n    char *(*load_string_file_content)(const char * path);\n\n    unsigned char *(*load_binary_content)(const char * path,long *size);\n    \n    bool (*write_any_content)(const char *path,unsigned  char *content,long size);\n\n    bool (*write_string_file_content)(const char *path,const char *content);\n\n    int (*entity_type)(const char *path);\n\n    int (*complex_entity_type)(const char *path);\n\n    const char *(*convert_entity)(int entity_type);\n\n    bool (*copy_any)(const char* src_path,const  char* dest_path,bool merge);\n\n    bool (*move_any)(const char* src_path, const char* dest_path,bool merge);\n\n    //numeral io\n\n    long (*load_long_file_content)(const char * path);\n\n    double (*load_double_file_content)(const char * path);\n\n    bool (*load_bool_file_content)(const char * path);\n\n\n\n    void (*write_long_file_content)(const char *path, long value);\n\n    void (*write_bool_file_content)(const char *path, bool value);\n\n    void (*write_double_file_content)(const char *path,double value);\n\n\n\n    //listage\n\n    DtwStringArray * (*list_files)(const char *path, bool concat_path);\n    DtwStringArray * (*list_dirs)(const char *path, bool concat_path);\n\n    DtwStringArray *  (*list_all)(const char *path,  bool concat_path);\n    DtwStringArray * (*list_dirs_recursively)(const char *path,bool concat_path);\n    DtwStringArray *  (*list_files_recursively)(const char *path,bool concat_path);\n    DtwStringArray * (*list_all_recursively)(const char *path,bool concat_path);\n\n\n    //extras\n\n    char * (*generate_sha_from_file)(const char *path);\n\n    char * (*generate_sha_from_string)(const char *string);\n\n    char * (*generate_sha_from_any)(void *anything , long size);\n\n    long int (*get_entity_last_motification_in_unix)(const char *path);\n\n    char * (*convert_unix_time_to_string)(long int unix_time);\n\n    char * (*get_entity_last_motification_in_string)(const char *path);\n\n    char *(*concat_path)(const char *path1, const char *path2);\n\n\n    //base64\n\n    char *(*base64_encode)(unsigned char *data, long input_length);\n\n    unsigned char *(*base64_decode)(const char *data, long *output_length);\n\n    char *(*convert_binary_file_to_base64)(const char *path);\n    //string array\n\n    DtwStringArrayModule string_array;\n\n    DtwPathModule path;\n\n    DtwLockerModule locker;\n\n    DtwSchemaModule schema;\n    DtwDatabaseSchemaModule database_schema;\n    DtwTreeModule tree;\n    DtwHashModule  hash;\n    DtwTransactionModule transaction;\n\n    DtwResourceModule resource;\n    DtwRandonizerModule randonizer;\n\n}DtwNamespace;\n\nDtwNamespace newDtwNamespace();"
	}, {
		"path":	"src/namespace/path_module/",
		"original_path":	"src/namespace/path_module/",
		"dir":	"src/namespace/path_module/"
	}, {
		"path":	"src/namespace/path_module/path_module.c",
		"original_path":	"src/namespace/path_module/path_module.c",
		"dir":	"src/namespace/path_module/",
		"full_name":	"path_module.c",
		"name":	"path_module",
		"extension":	"c",
		"hardware_sha256":	"c18c5768f00b326d381d8553fdba76595f70b6c6573272ad6657d871469f1d45",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1191,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1191,
		"content_sha256":	"c18c5768f00b326d381d8553fdba76595f70b6c6573272ad6657d871469f1d45",
		"is_binary":	false,
		"content":	"\nDtwPathModule newDtwPathModule(){\n    DtwPathModule  self = {0};\n    self.newPath = newDtwPath;\n    self.changed =DtwPath_changed;\n    self.get_full_name = DtwPath_get_full_name;\n    self.get_name = DtwPath_get_name;\n    self.get_extension = DtwPath_get_extension;\n    self.get_path = DtwPath_get_path;\n    self.get_dir = DtwPath_get_dir;\n    self.get_total_dirs = DtwPath_get_total_dirs;\n    self.get_sub_dirs_from_index = DtwPath_get_sub_dirs_from_index;\n    self.insert_dir_at_index = DtwPath_insert_dir_at_index;\n    self.remove_sub_dirs_at_index =  DtwPath_remove_sub_dirs_at_index;\n    self.insert_dir_after= DtwPath_insert_dir_after;\n    self.insert_dir_before = DtwPath_insert_dir_before;\n    self.replace_dirs = DtwPath_replace_dirs;\n    self.remove_sub_dirs_at = DtwPath_remove_sub_dirs_at;\n\n    self.set_extension = DtwPath_set_extension;\n    self.set_name = DtwPath_set_name;\n    self.set_dir = DtwPath_set_dir;\n    self.set_full_name =DtwPath_set_full_name;\n    self.set_path = DtwPath_set_path;\n\n    self.add_start_dir =DtwPath_add_start_dir;\n    self.add_end_dir = DtwPath_add_end_dir;\n    self.represent = DtwPath_represent;\n    self.free = DtwPath_free;\n\n    return self;\n}"
	}, {
		"path":	"src/namespace/path_module/path_module.h",
		"original_path":	"src/namespace/path_module/path_module.h",
		"dir":	"src/namespace/path_module/",
		"full_name":	"path_module.h",
		"name":	"path_module",
		"extension":	"h",
		"hardware_sha256":	"0fe4e16956ed180ad1f535791f7f63a6e83aa71c3b45bc9f5d0f6a99cb88d313",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1566,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1566,
		"content_sha256":	"0fe4e16956ed180ad1f535791f7f63a6e83aa71c3b45bc9f5d0f6a99cb88d313",
		"is_binary":	false,
		"content":	"\n\ntypedef struct DtwPathModule{\n    //Getters\n\n    DtwPath * (*newPath)(const char *path);\n    bool  (*changed)(struct DtwPath *self);\n    char *(*get_full_name) (struct DtwPath *self);\n    char *(*get_name) (struct DtwPath *self);\n    char *(*get_extension) (struct DtwPath *self);\n\n    char *(*get_path) (struct DtwPath *self);\n    char *(*get_dir) (struct DtwPath *self);\n\n    int (*get_total_dirs)(DtwPath *self);\n    char *(*get_sub_dirs_from_index)(DtwPath *self, int start,int end);\n    void (*insert_dir_at_index)(DtwPath *self,int index,const char *dir);\n    void (*remove_sub_dirs_at_index)(DtwPath *self,int start,int end);\n    void (*insert_dir_after)(DtwPath *self,const char *str,const char *dir);\n    void (*insert_dir_before)(DtwPath *self,const char *str,const char *dir);\n    void (*replace_dirs)(DtwPath *self,const char *str,const char *dir);\n    void (*remove_sub_dirs_at)(DtwPath *self,const char *str);\n\n\n    //Setters\n    void (*set_extension) (struct DtwPath *self, const char *extension);\n    void (*set_name) (struct DtwPath *self, const char *name);\n    void (*set_dir) (struct DtwPath *self, const char *path);\n    void (*set_full_name) (struct DtwPath *self, const char *full_name);\n    void (*set_path) (struct DtwPath *self, const char *target_path);\n    \n    void (*add_start_dir)(struct DtwPath *self, const char *start_dir);\n    void (*add_end_dir)(struct DtwPath *self, const char *end_dir);\n\n    void (*represent)(struct DtwPath *self);\n    void (*free) (struct DtwPath *self);\n\n}DtwPathModule;\n\nDtwPathModule newDtwPathModule();"
	}, {
		"path":	"src/namespace/randonizer_module/",
		"original_path":	"src/namespace/randonizer_module/",
		"dir":	"src/namespace/randonizer_module/"
	}, {
		"path":	"src/namespace/randonizer_module/randonizer_module.c",
		"original_path":	"src/namespace/randonizer_module/randonizer_module.c",
		"dir":	"src/namespace/randonizer_module/",
		"full_name":	"randonizer_module.c",
		"name":	"randonizer_module",
		"extension":	"c",
		"hardware_sha256":	"033585d8a80ba0aaf99fa550c655e47fee6f09d3f113a4879b48d1ac39c1089c",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	288,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	288,
		"content_sha256":	"033585d8a80ba0aaf99fa550c655e47fee6f09d3f113a4879b48d1ac39c1089c",
		"is_binary":	false,
		"content":	"\n\nDtwRandonizerModule newDtwRandonizerModule(){\n    DtwRandonizerModule self = {0};\n    self.newRandonizer = newDtwRandonizer;\n    self.generate_num = DtwRandonizer_generate_num;\n    self.generate_token =DtwRandonizer_generate_token;\n    self.free = DtwRandonizer_free;\n    return self;\n}"
	}, {
		"path":	"src/namespace/randonizer_module/randonizer_module.h",
		"original_path":	"src/namespace/randonizer_module/randonizer_module.h",
		"dir":	"src/namespace/randonizer_module/",
		"full_name":	"randonizer_module.h",
		"name":	"randonizer_module",
		"extension":	"h",
		"hardware_sha256":	"160cab40031ede4e7009701d948f6499855a3187509a8a19c1865c08b8ab75ba",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	299,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	299,
		"content_sha256":	"160cab40031ede4e7009701d948f6499855a3187509a8a19c1865c08b8ab75ba",
		"is_binary":	false,
		"content":	"\ntypedef struct  DtwRandonizerModule{\n    DtwRandonizer * (*newRandonizer)();\n    int (*generate_num)(DtwRandonizer *self,int max);\n    char * (*generate_token)(DtwRandonizer*self, int size);\n    void (*free)(DtwRandonizer *self);\n}DtwRandonizerModule;\n\nDtwRandonizerModule newDtwRandonizerModule();"
	}, {
		"path":	"src/namespace/resource_module/",
		"original_path":	"src/namespace/resource_module/",
		"dir":	"src/namespace/resource_module/"
	}, {
		"path":	"src/namespace/resource_module/declaration.h",
		"original_path":	"src/namespace/resource_module/declaration.h",
		"dir":	"src/namespace/resource_module/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"75a5bed19808148842a5e142618ec362762bce9199a947471d0a9f65472845d5",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	101,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	101,
		"content_sha256":	"75a5bed19808148842a5e142618ec362762bce9199a947471d0a9f65472845d5",
		"is_binary":	false,
		"content":	"#include \"resource_array_module/resource_array_module.h\"\n#include \"resource_module/resource_module.h\""
	}, {
		"path":	"src/namespace/resource_module/definition.c",
		"original_path":	"src/namespace/resource_module/definition.c",
		"dir":	"src/namespace/resource_module/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"6346e8503206006e6a04ac90e8303ca125fe3c7ac1079161f7eacc63e4a0d183",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	101,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	101,
		"content_sha256":	"6346e8503206006e6a04ac90e8303ca125fe3c7ac1079161f7eacc63e4a0d183",
		"is_binary":	false,
		"content":	"#include \"resource_array_module/resource_array_module.c\"\n#include \"resource_module/resource_module.c\""
	}, {
		"path":	"src/namespace/resource_module/resource_array_module/",
		"original_path":	"src/namespace/resource_module/resource_array_module/",
		"dir":	"src/namespace/resource_module/resource_array_module/"
	}, {
		"path":	"src/namespace/resource_module/resource_array_module/resource_array_module.c",
		"original_path":	"src/namespace/resource_module/resource_array_module/resource_array_module.c",
		"dir":	"src/namespace/resource_module/resource_array_module/",
		"full_name":	"resource_array_module.c",
		"name":	"resource_array_module",
		"extension":	"c",
		"hardware_sha256":	"212dd9905d1b575226f6e8ab0ccea95744f10aac9c6999789820b1c0b882345c",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	294,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	294,
		"content_sha256":	"212dd9905d1b575226f6e8ab0ccea95744f10aac9c6999789820b1c0b882345c",
		"is_binary":	false,
		"content":	"DtwResourceArrayModule newDtwResourceArrayModule(){\n    DtwResourceArrayModule self = {0};\n    self.append = DtwResourceArray_append;\n    self.represent = DtwResourceArray_represent;\n    self.get_by_name = DtwResourceArray_get_by_name;\n    self.free = DtwResourceArray_free;\n    return self;\n}\n"
	}, {
		"path":	"src/namespace/resource_module/resource_array_module/resource_array_module.h",
		"original_path":	"src/namespace/resource_module/resource_array_module/resource_array_module.h",
		"dir":	"src/namespace/resource_module/resource_array_module/",
		"full_name":	"resource_array_module.h",
		"name":	"resource_array_module",
		"extension":	"h",
		"hardware_sha256":	"5a46b2e6922189e89669aacb9c3fe95015d56bb84a52239b7e6bf0ca44d752a8",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	351,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	351,
		"content_sha256":	"5a46b2e6922189e89669aacb9c3fe95015d56bb84a52239b7e6bf0ca44d752a8",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwResourceArrayModule{\n\n    void (*append)(DtwResourceArray *self, DtwResource *element);\n    DtwResource * (*get_by_name)(DtwResourceArray *self, const char *name);\n    void (*represent)(DtwResourceArray *self);\n    void (*free)(DtwResourceArray *self);\n\n}DtwResourceArrayModule;\n\nDtwResourceArrayModule newDtwResourceArrayModule();\n"
	}, {
		"path":	"src/namespace/resource_module/resource_module/",
		"original_path":	"src/namespace/resource_module/resource_module/",
		"dir":	"src/namespace/resource_module/resource_module/"
	}, {
		"path":	"src/namespace/resource_module/resource_module/resource_module.c",
		"original_path":	"src/namespace/resource_module/resource_module/resource_module.c",
		"dir":	"src/namespace/resource_module/resource_module/",
		"full_name":	"resource_module.c",
		"name":	"resource_module",
		"extension":	"c",
		"hardware_sha256":	"af1e9d4b14398013926158b3adb2c870bc0fc90e6db1141a212e2e8e644694dc",
		"last_modification_in_unix":	1719250655,
		"hardware_content_size":	3875,
		"last_modification":	"2024-06-24 14:37:35",
		"content_size":	3875,
		"content_sha256":	"af1e9d4b14398013926158b3adb2c870bc0fc90e6db1141a212e2e8e644694dc",
		"is_binary":	false,
		"content":	"\nDtwResourceModule newDtwResourceModule(){\n    DtwResourceModule self = {0};\n    self.newResource = new_DtwResource;\n    self.get_error_code = DtwResource_get_error_code;\n    self.get_error_message = DtwResource_get_error_message;\n    self.error = DtwResource_error;\n    self.load = DtwResource_load;\n    self.clear_errors = DtwResource_clear_errors;\n    self.unload = DtwResource_unload;\n    self.sub_resource = DtwResource_sub_resource;\n    self.get_any_from_sub_resource = DtwResource_get_any_from_sub_resource;\n    self.get_binary_from_sub_resource = DtwResource_get_binary_from_sub_resource;\n    self.get_string_from_sub_resource = DtwResource_get_string_from_sub_resource;\n    self.get_long_from_sub_resource = DtwResource_get_long_from_sub_resource;\n    self.get_double_from_sub_resource = DtwResource_get_double_from_sub_resource;\n    self.get_bool_from_sub_resource = DtwResource_get_bool_from_sub_resource;\n    self.get_error_path = DtwResource_get_error_path;\n    self.get_schema_values = DtwResource_get_schema_values;\n    self.set_binary_in_sub_resource = DtwResource_set_binary_in_sub_resource;\n    self.set_string_in_sub_resource = DtwResource_set_string_in_sub_resource;\n    self.set_long_in_sub_resource = DtwResource_set_long_in_sub_resource;\n    self.set_double_in_sub_resource = DtwResource_set_double_in_sub_resource;\n    self.set_bool_in_sub_resource = DtwResource_set_bool_in_sub_resource;\n    self.is_file = DtwResource_is_file;\n    self.sub_resource_ensuring_not_exist = DtwResource_sub_resource_ensuring_not_exist;\n    self.sub_resource_next = DtwResource_sub_resource_next;\n    self.destroy_sub_resource = DtwResource_destroy_sub_resource;\n    self.rename_sub_resource = DtwResource_rename_sub_resource;\n    self.sub_resource_now  = DtwResource_sub_resource_now;\n    self.sub_resource_now_in_unix = DtwResource_sub_resource_now_in_unix;\n    self.sub_resource_random = DtwResource_sub_resource_random;\n    self.set_binary_sha =DtwResource_set_binary_sha;\n    self.set_string_sha = DtwResource_set_string_sha;\n    self.set_any_in_sub_resource = DtwResource_set_any_in_sub_resource;\n    self.set_binary_sha_in_sub_resource = DtwResource_set_binary_sha_in_sub_resource;\n    self.set_string_sha_in_sub_resource = DtwResource_set_string_sha_in_sub_resource;\n\n    self.new_schema_insertion = DtwResource_new_schema_insertion;\n    self.find_by_name_id = DtwResource_find_by_name_id;\n    self.find_by_primary_key_with_string = DtwResource_find_by_primary_key_with_string;\n    self.find_by_primary_key_with_binary = DtwResource_find_by_primary_key_with_binary;\n    self.dangerous_remove_schema_prop = DtwResource_dangerous_remove_schema_prop;\n    self.dangerous_rename_schema_prop = DtwResource_dangerous_rename_schema_prop;\n    self.newDatabaseSchema = DtwResource_newDatabaseSchema;\n\n    self.lock =DtwResource_lock;\n    self.unlock = DtwResource_unlock;\n    self.destroy = DtwResource_destroy;\n\n    self.get_any = DtwResource_get_any;\n    self.get_string = DtwResource_get_string;\n    self.get_binary = DtwResource_get_binary;\n    self.get_double = DtwResource_get_double;\n    self.get_long = DtwResource_get_long;\n    self.get_bool = DtwResource_get_bool;\n\n    self.set_any = DtwResource_set_any;\n    self.set_binary = DtwResource_set_binary;\n    self.set_string = DtwResource_set_string;\n    self.set_long = DtwResource_set_long;\n    self.set_double = DtwResource_set_double;\n    self.set_bool = DtwResource_set_bool;\n\n\n    self.list_names = DtwResource_list_names;\n    self.size = DtwResource_size;\n    self.type = DtwResource_type;\n    self.type_in_str = DtwResource_type_in_str;\n    self.commit =DtwResource_commit;\n    self.represent = DtwResource_represent;\n    self.rename = DtwResource_rename;\n    self.free  = DtwResource_free;\n    self.sub_resources = DtwResource_sub_resources;\n    self.array = newDtwResourceArrayModule();\n\n    return self;\n}"
	}, {
		"path":	"src/namespace/resource_module/resource_module/resource_module.h",
		"original_path":	"src/namespace/resource_module/resource_module/resource_module.h",
		"dir":	"src/namespace/resource_module/resource_module/",
		"full_name":	"resource_module.h",
		"name":	"resource_module",
		"extension":	"h",
		"hardware_sha256":	"c0fb640586da7220d03af508189611cb6134f58670cef49e6680d6f9c473a4cf",
		"last_modification_in_unix":	1719250598,
		"hardware_content_size":	4716,
		"last_modification":	"2024-06-24 14:36:38",
		"content_size":	4716,
		"content_sha256":	"c0fb640586da7220d03af508189611cb6134f58670cef49e6680d6f9c473a4cf",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwResourceModule{\n\n    DtwResource *(*newResource)(const char *path);\n    int (*get_error_code)(DtwResource *self);\n    bool (*error)(DtwResource *self);\n\n    char * (*get_error_message)(DtwResource *self);\n    bool (*is_file)(DtwResource *self);\n    void (*destroy_sub_resource)(DtwResource *self, const char *key);\n    void (*rename_sub_resource)(DtwResource *self,const char *old_name,const  char *new_name);\n    DtwResource * (*sub_resource)(struct DtwResource *self,const  char *format,...);\n    unsigned char *(*get_any_from_sub_resource)(DtwResource *self, long *size, bool *is_binary,const char *format,...);\n    unsigned char *(*get_binary_from_sub_resource)(DtwResource *self, long *size,const char *format,...);\n    char *(*get_string_from_sub_resource)(DtwResource *self,const char *format,...);\n    long (*get_long_from_sub_resource)(DtwResource *self,const char *format,...);\n    double (*get_double_from_sub_resource)(DtwResource *self,const char *format,...);\n    bool (*get_bool_from_sub_resource)(DtwResource *self,const char *format,...);\n    void (*set_any_in_sub_resource)(DtwResource *self,const char *key, unsigned char *element, long size,bool is_binary);\n    void (*set_binary_in_sub_resource)(DtwResource *self,const char *key, unsigned char *element, long size);\n    void (*set_string_in_sub_resource)(DtwResource *self,const char *key,const  char *element);\n    void (*set_long_in_sub_resource)(DtwResource *self,const char *key,long element);\n    void (*set_double_in_sub_resource)(DtwResource *self,const char *key,double element);\n    void (*set_bool_in_sub_resource)( DtwResource *self,const char *key,bool element);\n    void (*set_binary_sha)(DtwResource *self, unsigned  char *value, long size);\n    void (*set_string_sha)(DtwResource *self,const char *value);\n    void (*set_binary_sha_in_sub_resource)(DtwResource *self,const char *key, unsigned  char *value, long size);\n    void (*set_string_sha_in_sub_resource)(DtwResource *self,const char *key,const char *value);\n\n\n\n    DtwResource * (*new_schema_insertion)(DtwResource *self);\n    DtwResource  *(*find_by_name_id)(DtwResource *self, const char *name);\n    DtwResource * (*find_by_primary_key_with_binary)(DtwResource *self, const char *primary_key, unsigned  char *value, long size);\n    DtwResource * (*find_by_primary_key_with_string)(DtwResource *self, const char *key, const char *value);\n    void (*dangerous_remove_schema_prop)(DtwResource*self,const char *prop);\n    void (*dangerous_rename_schema_prop)(DtwResource*self,const char *prop,const char *new_name);\n    DtwDatabaseSchema * (*newDatabaseSchema)(DtwResource *self);\n\n    char * (*get_error_path)(DtwResource *self);\n    DtwResourceArray * (*get_schema_values)(DtwResource *self);\n\n\n    DtwResource * (*sub_resource_ensuring_not_exist)(DtwResource *self,const  char *format, ...);\n    DtwResource * (*sub_resource_next)(DtwResource *self, const char *end_path);\n    DtwResource * (*sub_resource_now)(DtwResource *self, const char *end_path);\n\n    DtwResource * (*sub_resource_now_in_unix)(DtwResource *self,const char *end_path);\n    DtwResource * (*sub_resource_random)(DtwResource *self,const char *end_path);\n\n\n    void (*load)(DtwResource *self);\n\n    void (*unload)(DtwResource *self);\n\n    int (*lock)(DtwResource *self);\n    void (*unlock)(DtwResource *self);\n\n    void (*destroy)(DtwResource *self);\n    void  (*clear_errors)(DtwResource *self);\n    unsigned char *(*get_any)(struct DtwResource *self, long *size, bool *is_binary);\n\n    unsigned char *(*get_binary)(struct DtwResource *self, long *size);\n\n    char *(*get_string)(struct DtwResource *self);\n\n    long (*get_long)(struct DtwResource *self);\n\n    double (*get_double)(struct DtwResource *self);\n\n    bool (*get_bool)(struct DtwResource *self);\n    void (*set_any)(DtwResource *self, unsigned char *element, long size,bool is_binary);\n    void (*set_binary)(DtwResource *self, unsigned char *element, long size);\n\n    void (*set_string)(DtwResource *self,const  char *element);\n\n    void (*set_long)(DtwResource *self,long element);\n\n    void (*set_double)(DtwResource *self,double element);\n\n    void (*set_bool)(DtwResource *self,bool element);\n\n\n\n    DtwStringArray *(*list_names)(DtwResource *self);\n\n    long (*size)(DtwResource *self);\n    int (*type)(DtwResource *self);\n\n    const char *(*type_in_str)(DtwResource *self);\n    void (*commit)(DtwResource *self);\n\n    void (*represent)(DtwResource *self);\n\n    void (*rename)(DtwResource *self,const char *new_name);\n\n    void (*free)(DtwResource *self);\n    DtwResourceArray * (*sub_resources)(DtwResource *self);\n    DtwResourceArrayModule array;\n\n\n}DtwResourceModule;\n\nDtwResourceModule newDtwResourceModule();"
	}, {
		"path":	"src/namespace/schema_module/",
		"original_path":	"src/namespace/schema_module/",
		"dir":	"src/namespace/schema_module/"
	}, {
		"path":	"src/namespace/schema_module/schema_module.c",
		"original_path":	"src/namespace/schema_module/schema_module.c",
		"dir":	"src/namespace/schema_module/",
		"full_name":	"schema_module.c",
		"name":	"schema_module",
		"extension":	"c",
		"hardware_sha256":	"efddbc1a2e14e36eb7a62f8b5ec4f7e12515f631ab5a8b760ca5c54ef6b3d4f2",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	194,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	194,
		"content_sha256":	"efddbc1a2e14e36eb7a62f8b5ec4f7e12515f631ab5a8b760ca5c54ef6b3d4f2",
		"is_binary":	false,
		"content":	"\n\nDtwSchemaModule newDtwSchemaModule(){\n    DtwSchemaModule  self = {0};\n    self.sub_schema = DtwSchema_new_subSchema;\n    self.add_primary_key = DtwSchema_add_primary_key;\n\n    return  self;\n}"
	}, {
		"path":	"src/namespace/schema_module/schema_module.h",
		"original_path":	"src/namespace/schema_module/schema_module.h",
		"dir":	"src/namespace/schema_module/",
		"full_name":	"schema_module.h",
		"name":	"schema_module",
		"extension":	"h",
		"hardware_sha256":	"724ef3bb7585f0a41c14f8c78aaae914a7db9154c56cb83b17d6c75d23950868",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	210,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	210,
		"content_sha256":	"724ef3bb7585f0a41c14f8c78aaae914a7db9154c56cb83b17d6c75d23950868",
		"is_binary":	false,
		"content":	"\ntypedef struct {\n    void (*add_primary_key)(DtwSchema *self, const char *primary_key);\n    DtwSchema * (*sub_schema)(DtwSchema *self,const char *name);\n}DtwSchemaModule;\n\nDtwSchemaModule newDtwSchemaModule();"
	}, {
		"path":	"src/namespace/string_array_module/",
		"original_path":	"src/namespace/string_array_module/",
		"dir":	"src/namespace/string_array_module/"
	}, {
		"path":	"src/namespace/string_array_module/string_array_module.c",
		"original_path":	"src/namespace/string_array_module/string_array_module.c",
		"dir":	"src/namespace/string_array_module/",
		"full_name":	"string_array_module.c",
		"name":	"string_array_module",
		"extension":	"c",
		"hardware_sha256":	"e69f574f2b449ce42f29d593fe930c31c810310f5cf13878961f09770b3a801d",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	486,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	486,
		"content_sha256":	"e69f574f2b449ce42f29d593fe930c31c810310f5cf13878961f09770b3a801d",
		"is_binary":	false,
		"content":	"\nDtwStringArrayModule newDtwStringArrayModule(){\n    DtwStringArrayModule self = {0};\n    self.newStringArray = newDtwStringArray;\n    self.set_value = DtwStringArray_set_value;\n    self.append = DtwStringArray_append;\n    self.pop = DtwStringArray_pop;\n    self.merge = DtwStringArray_merge;\n    self.represent = DtwStringArray_represent;\n    self.find_position = DtwStringArray_find_position;\n    self.sort = DtwStringArray_sort;\n    self.free =DtwStringArray_free;\n    return self;\n}"
	}, {
		"path":	"src/namespace/string_array_module/string_array_module.h",
		"original_path":	"src/namespace/string_array_module/string_array_module.h",
		"dir":	"src/namespace/string_array_module/",
		"full_name":	"string_array_module.h",
		"name":	"string_array_module",
		"extension":	"h",
		"hardware_sha256":	"0f030e19c3805636c4cc8970352d3c284f8b6248bc272bb92f9946eecc2f3f3c",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	666,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	666,
		"content_sha256":	"0f030e19c3805636c4cc8970352d3c284f8b6248bc272bb92f9946eecc2f3f3c",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwStringArrayModule{\n    DtwStringArray *(*newStringArray)();\n\n    void (*set_value)(struct DtwStringArray *self,int index,const char *value);\n\n    void (*append)(struct DtwStringArray *self,const char *string);\n\n    void (*pop)(struct DtwStringArray *self, int position);\n\n    void (*merge)(struct DtwStringArray *self, struct DtwStringArray *other);\n\n    void (*represent)(struct DtwStringArray *self);\n\n    int (*find_position)(struct DtwStringArray *self,const char *string);\n\n    void (*sort)(struct DtwStringArray *self);\n\n    void (*free)(struct DtwStringArray *self);\n\n\n}DtwStringArrayModule;\n\nDtwStringArrayModule newDtwStringArrayModule();"
	}, {
		"path":	"src/namespace/transaction_module/",
		"original_path":	"src/namespace/transaction_module/",
		"dir":	"src/namespace/transaction_module/"
	}, {
		"path":	"src/namespace/transaction_module/action/",
		"original_path":	"src/namespace/transaction_module/action/",
		"dir":	"src/namespace/transaction_module/action/"
	}, {
		"path":	"src/namespace/transaction_module/action/action.c",
		"original_path":	"src/namespace/transaction_module/action/action.c",
		"dir":	"src/namespace/transaction_module/action/",
		"full_name":	"action.c",
		"name":	"action",
		"extension":	"c",
		"hardware_sha256":	"34e115f3ac45b482af687d47c2f107872bc675bdcdd196c1d9adc086bc00810d",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	822,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	822,
		"content_sha256":	"34e115f3ac45b482af687d47c2f107872bc675bdcdd196c1d9adc086bc00810d",
		"is_binary":	false,
		"content":	"\nDtwActionTransactionModule newDtwActionTransactionModule(){\n    DtwActionTransactionModule self = {0};\n    self.newAction = newDtwActionTransaction;\n    self.write_any = DtwActionTransaction_write_any;\n    self.move_any = DtwActionTransaction_move_any;\n    self.copy_any = DtwActionTransaction_copy_any;\n    self.move_any_merging = DtwActionTransaction_move_any_merging;\n    self.copy_any_merging = DtwActionTransaction_move_any_merging;\n    self.delete_any = DtwActionTransaction_delete_any;\n    self.convert_action_to_integer =DtwActionTransaction_convert_action_to_integer;\n    self.convert_action_to_string = DtwActionTransaction_convert_action_to_string;\n    self.commit = DtwActionTransaction_commit;\n    self.represent = DtwActionTransaction_represent;\n    self.free = DtwActionTransaction_free;\n    return self;\n}"
	}, {
		"path":	"src/namespace/transaction_module/action/action.h",
		"original_path":	"src/namespace/transaction_module/action/action.h",
		"dir":	"src/namespace/transaction_module/action/",
		"full_name":	"action.h",
		"name":	"action",
		"extension":	"h",
		"hardware_sha256":	"df1a0b15d195d3fd22a9e96546d7c4cac5f4818ee69c12583d2259203cfcb27a",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	961,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	961,
		"content_sha256":	"df1a0b15d195d3fd22a9e96546d7c4cac5f4818ee69c12583d2259203cfcb27a",
		"is_binary":	false,
		"content":	"\n\ntypedef struct DtwActionTransactionModule{\n\n    DtwActionTransaction *(*newAction)();\n\n    DtwActionTransaction * (*write_any)(const char *source,unsigned  char *content,long size,bool is_binary);\n\n    DtwActionTransaction * (*move_any)(const char *source, const char *dest);\n    DtwActionTransaction * (*move_any_merging)(const char *source, const char *dest);\n    DtwActionTransaction * (*copy_any_merging)(const char *source, const char *dest);\n\n    DtwActionTransaction * (*copy_any)(const char *source, const char *dest);\n\n    DtwActionTransaction * (*delete_any)(const char *source);\n\n    short (*convert_action_to_integer)(char *action);\n\n    const char * (*convert_action_to_string)(int action);\n\n    void (*commit)(DtwActionTransaction* self,const char *path);\n\n    void (*represent)(DtwActionTransaction* self);\n\n    void (*free)(DtwActionTransaction* self);\n\n}DtwActionTransactionModule;\n\nDtwActionTransactionModule newDtwActionTransactionModule();"
	}, {
		"path":	"src/namespace/transaction_module/declaration.h",
		"original_path":	"src/namespace/transaction_module/declaration.h",
		"dir":	"src/namespace/transaction_module/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"43e2f7066bd63b5265c669d5d6340640a2f617d32430d2370c9cef4abf1544bd",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	126,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	126,
		"content_sha256":	"43e2f7066bd63b5265c669d5d6340640a2f617d32430d2370c9cef4abf1544bd",
		"is_binary":	false,
		"content":	"#include \"action/action.h\"\n#include \"json_error_module/json_error_module.h\"\n#include \"transaction_module/transaction_module.h\""
	}, {
		"path":	"src/namespace/transaction_module/definition.c",
		"original_path":	"src/namespace/transaction_module/definition.c",
		"dir":	"src/namespace/transaction_module/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"a78a9f44bf9b38548af404d23ac10360e27c4f35686dff73918192e44661666e",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	126,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	126,
		"content_sha256":	"a78a9f44bf9b38548af404d23ac10360e27c4f35686dff73918192e44661666e",
		"is_binary":	false,
		"content":	"#include \"action/action.c\"\n#include \"json_error_module/json_error_module.c\"\n#include \"transaction_module/transaction_module.c\""
	}, {
		"path":	"src/namespace/transaction_module/json_error_module/",
		"original_path":	"src/namespace/transaction_module/json_error_module/",
		"dir":	"src/namespace/transaction_module/json_error_module/"
	}, {
		"path":	"src/namespace/transaction_module/json_error_module/json_error_module.c",
		"original_path":	"src/namespace/transaction_module/json_error_module/json_error_module.c",
		"dir":	"src/namespace/transaction_module/json_error_module/",
		"full_name":	"json_error_module.c",
		"name":	"json_error_module",
		"extension":	"c",
		"hardware_sha256":	"2919bdf68926f4888140b2834fa656caf8bcea5acc2685c52b47e4889a888952",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	233,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	233,
		"content_sha256":	"2919bdf68926f4888140b2834fa656caf8bcea5acc2685c52b47e4889a888952",
		"is_binary":	false,
		"content":	"\nDtwJsonTransactionErrorModule newDtwJsonTransactionErrorModule(){\n    DtwJsonTransactionErrorModule self = {0};\n    self.represent = DtwJsonTransactionError_represent;\n    self.free = DtwJsonTransactionError_free;\n    return self;\n}"
	}, {
		"path":	"src/namespace/transaction_module/json_error_module/json_error_module.h",
		"original_path":	"src/namespace/transaction_module/json_error_module/json_error_module.h",
		"dir":	"src/namespace/transaction_module/json_error_module/",
		"full_name":	"json_error_module.h",
		"name":	"json_error_module",
		"extension":	"h",
		"hardware_sha256":	"d7ae4cfd130cd7fbbb1c169cb416c98344729dd33529976355727656a2a53f73",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	264,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	264,
		"content_sha256":	"d7ae4cfd130cd7fbbb1c169cb416c98344729dd33529976355727656a2a53f73",
		"is_binary":	false,
		"content":	"\n\ntypedef struct DtwJsonTransactionErrorModule{\n    void (*represent)(struct DtwJsonTransactionError *self);\n    void (*free)(struct DtwJsonTransactionError *self);\n\n}DtwJsonTransactionErrorModule;\n\nDtwJsonTransactionErrorModule newDtwJsonTransactionErrorModule();"
	}, {
		"path":	"src/namespace/transaction_module/transaction_module/",
		"original_path":	"src/namespace/transaction_module/transaction_module/",
		"dir":	"src/namespace/transaction_module/transaction_module/"
	}, {
		"path":	"src/namespace/transaction_module/transaction_module/transaction_module.c",
		"original_path":	"src/namespace/transaction_module/transaction_module/transaction_module.c",
		"dir":	"src/namespace/transaction_module/transaction_module/",
		"full_name":	"transaction_module.c",
		"name":	"transaction_module",
		"extension":	"c",
		"hardware_sha256":	"394c7b2df59dfaa8f5782be8e6cf50f9184479a098a6bc47502c9946a963262c",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1488,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1488,
		"content_sha256":	"394c7b2df59dfaa8f5782be8e6cf50f9184479a098a6bc47502c9946a963262c",
		"is_binary":	false,
		"content":	"\n\nDtwTransactionModule newDtwTransactionModule(){\n    DtwTransactionModule self = {0};\n    self.newTransaction = newDtwTransaction;\n    self.newTransaction_from_json = newDtwTransaction_from_json;\n    self.newTransaction_from_json_file = newDtwTransaction_from_json_file;\n    self.validate_json_transaction_file = dtw_validate_json_transaction_file;\n    self.remove_from_index = DtwTransaction_remove_from_index;\n    self.remove_from_source = DtwTransaction_remove_from_source;\n    self.filter = DtwTransaction_filter;\n    self.append_action = DtwTransaction_append_action;\n    self.write_any = DtwTransaction_write_any;\n    self.write_string = DtwTransaction_write_string;\n    self.write_long = DtwTransaction_write_long;\n    self.write_bool = DtwTransaction_write_bool;\n    self.write_double = DtwTransaction_write_double;\n\n    self.move_any_merging = DtwTransaction_move_any_merging;\n    self.copy_any_merging = DtwTransaction_copy_any_merging;\n    self.move_any = DtwTransaction_move_any;\n    self.copy_any = DtwTransaction_copy_any;\n    self.delete_any = DtwTransaction_delete_any;\n\n    self.dumps_transaction_to_json = DtwTransaction_dumps_to_json;\n    self.dumps_transaction_to_json_file = DtwTransaction_dumps_to_json_file;\n\n    self.commit = DtwTransaction_commit;\n    self.represent = DtwTransaction_represent;\n    self.free =DtwTransaction_free;\n\n    self.action = newDtwActionTransactionModule();\n    self.json_error = newDtwJsonTransactionErrorModule();\n\n\n    return self;\n}\n"
	}, {
		"path":	"src/namespace/transaction_module/transaction_module/transaction_module.h",
		"original_path":	"src/namespace/transaction_module/transaction_module/transaction_module.h",
		"dir":	"src/namespace/transaction_module/transaction_module/",
		"full_name":	"transaction_module.h",
		"name":	"transaction_module",
		"extension":	"h",
		"hardware_sha256":	"821299f428cddad059d8a0bb020526e54de8ca927d2ae7005f2372ef8ea60132",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2023,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2023,
		"content_sha256":	"821299f428cddad059d8a0bb020526e54de8ca927d2ae7005f2372ef8ea60132",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwTransactionModule{\n    DtwTransaction *(*newTransaction)();\n    DtwTransaction * (*newTransaction_from_json)(cJSON *json_entry);\n    DtwTransaction * (*newTransaction_from_json_file)(const char *filename);\n    DtwJsonTransactionError * (*validate_json_transaction_file)(const char *filename);\n\n    void (*remove_from_index)(DtwTransaction *self,long index);\n    void (*remove_from_source)(DtwTransaction *self,const char *source);\n    void (*filter)(DtwTransaction *self,bool (*callback)(DtwActionTransaction *action));\n\n    void (*append_action)(struct DtwTransaction *self,struct DtwActionTransaction  *action);\n    void (*write_any)(struct DtwTransaction *self,const char *path,unsigned char *content, long size,bool is_binary);\n    void (*write_string)(struct DtwTransaction *self,const char *path,const char *content);\n\n    void (*write_long)(struct DtwTransaction *self,const char *path,long value);\n    void (*write_bool)(struct DtwTransaction *self,const char *path,bool value);\n    void (*write_double)(struct DtwTransaction *self,const char *path,double value);\n\n    void (*move_any_merging)(struct DtwTransaction *self,const char *source,const char *dest);\n    void (*copy_any_merging)(struct DtwTransaction *self,const char *source,const char *dest);\n\n\n    void (*move_any)(struct DtwTransaction *self,const char *source,const char *dest);\n    void (*copy_any)(struct DtwTransaction *self,const char *source,const char *dest);\n    void (*delete_any)(struct DtwTransaction *self,const char *source);\n\n    cJSON *(*dumps_transaction_to_json)(struct DtwTransaction *self);\n    void (*dumps_transaction_to_json_file)(struct DtwTransaction *self,const char *filename);\n\n    void (*commit)(struct DtwTransaction *self,const char *source);\n    void (*represent)(struct DtwTransaction *self);\n    void (*free)(struct DtwTransaction *self);\n\n    DtwActionTransactionModule action;\n    DtwJsonTransactionErrorModule json_error;\n\n\n}DtwTransactionModule;\n\nDtwTransactionModule newDtwTransactionModule();\n"
	}, {
		"path":	"src/namespace/tree_module/",
		"original_path":	"src/namespace/tree_module/",
		"dir":	"src/namespace/tree_module/"
	}, {
		"path":	"src/namespace/tree_module/declaration.h",
		"original_path":	"src/namespace/tree_module/declaration.h",
		"dir":	"src/namespace/tree_module/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"6bc37ff85600a3953868d56ad60b0e06cd53e8169a6dc6b5cd351178767e162d",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	163,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	163,
		"content_sha256":	"6bc37ff85600a3953868d56ad60b0e06cd53e8169a6dc6b5cd351178767e162d",
		"is_binary":	false,
		"content":	"#include \"tree_part_module/tree_part_module.h\"\n#include \"json_error/json_error.h\"\n#include \"transaction_report/transaction_report_module.h\"\n#include \"tree/tree.h\"\n"
	}, {
		"path":	"src/namespace/tree_module/definition.c",
		"original_path":	"src/namespace/tree_module/definition.c",
		"dir":	"src/namespace/tree_module/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"b786775fa7dbc6759cd5b95c433fa52ed6b9f96a2cedafb15592d70ccd7851cf",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	163,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	163,
		"content_sha256":	"b786775fa7dbc6759cd5b95c433fa52ed6b9f96a2cedafb15592d70ccd7851cf",
		"is_binary":	false,
		"content":	"#include \"tree_part_module/tree_part_module.c\"\n#include \"json_error/json_error.c\"\n#include \"transaction_report/transaction_report_module.c\"\n#include \"tree/tree.c\"\n"
	}, {
		"path":	"src/namespace/tree_module/json_error/",
		"original_path":	"src/namespace/tree_module/json_error/",
		"dir":	"src/namespace/tree_module/json_error/"
	}, {
		"path":	"src/namespace/tree_module/json_error/json_error.c",
		"original_path":	"src/namespace/tree_module/json_error/json_error.c",
		"dir":	"src/namespace/tree_module/json_error/",
		"full_name":	"json_error.c",
		"name":	"json_error",
		"extension":	"c",
		"hardware_sha256":	"ad860360012227d3bcfa67640ae6fad4f44cfd34e39b65a65f8a2d0652f9d795",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	370,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	370,
		"content_sha256":	"ad860360012227d3bcfa67640ae6fad4f44cfd34e39b65a65f8a2d0652f9d795",
		"is_binary":	false,
		"content":	"\nDtwJsonTreeErrorModule newDtwJsonTreeErrorModule(){\n    DtwJsonTreeErrorModule self = {0};\n    self.validate_json_tree_by_cJSON= DtwJsonTreeError_validate_json_tree_by_cJSON;\n    self.validate_json_tree_by_content = DtwJsonTreeError_validate_json_tree_by_content;\n    self.represent =DtwJsonTreeError_represent;\n    self.free = DtwJsonTreeError_free;\n    return self;\n}"
	}, {
		"path":	"src/namespace/tree_module/json_error/json_error.h",
		"original_path":	"src/namespace/tree_module/json_error/json_error.h",
		"dir":	"src/namespace/tree_module/json_error/",
		"full_name":	"json_error.h",
		"name":	"json_error",
		"extension":	"h",
		"hardware_sha256":	"3c3a05eec0ae050c444dbd74015d32861812f44e93a81945f86b518310f91fc2",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	374,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	374,
		"content_sha256":	"3c3a05eec0ae050c444dbd74015d32861812f44e93a81945f86b518310f91fc2",
		"is_binary":	false,
		"content":	"\n\ntypedef struct DtwJsonTreeErrorModule{\n\n    DtwJsonTreeError * (*validate_json_tree_by_cJSON)(cJSON *json_tree);\n    DtwJsonTreeError * (*validate_json_tree_by_content)(const char *content);\n    void (*free)(struct DtwJsonTreeError *self);\n    void (*represent)(struct DtwJsonTreeError *self);\n\n}DtwJsonTreeErrorModule;\n\nDtwJsonTreeErrorModule newDtwJsonTreeErrorModule();"
	}, {
		"path":	"src/namespace/tree_module/transaction_report/",
		"original_path":	"src/namespace/tree_module/transaction_report/",
		"dir":	"src/namespace/tree_module/transaction_report/"
	}, {
		"path":	"src/namespace/tree_module/transaction_report/transaction_report_module.c",
		"original_path":	"src/namespace/tree_module/transaction_report/transaction_report_module.c",
		"dir":	"src/namespace/tree_module/transaction_report/",
		"full_name":	"transaction_report_module.c",
		"name":	"transaction_report_module",
		"extension":	"c",
		"hardware_sha256":	"f3ef066c1335da2c6da9d3ba937f4d94aed97668eb5c96a416d1d0fcae6c5b07",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	238,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	238,
		"content_sha256":	"f3ef066c1335da2c6da9d3ba937f4d94aed97668eb5c96a416d1d0fcae6c5b07",
		"is_binary":	false,
		"content":	"\nDtwTreeTransactionReportModule newDtwTreeTransactionReportModule(){\n    DtwTreeTransactionReportModule self = {0};\n    self.represent = DtwTreeTransactionReport_represent;\n    self.free = DtwTreeTransactionReport_free;\n    return self;\n}"
	}, {
		"path":	"src/namespace/tree_module/transaction_report/transaction_report_module.h",
		"original_path":	"src/namespace/tree_module/transaction_report/transaction_report_module.h",
		"dir":	"src/namespace/tree_module/transaction_report/",
		"full_name":	"transaction_report_module.h",
		"name":	"transaction_report_module",
		"extension":	"h",
		"hardware_sha256":	"b30468df4df8b4202478a69823c6df37871022ffcf434fe9ae93cd8e17cfd0c6",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	275,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	275,
		"content_sha256":	"b30468df4df8b4202478a69823c6df37871022ffcf434fe9ae93cd8e17cfd0c6",
		"is_binary":	false,
		"content":	"\ntypedef struct  DtwTreeTransactionReportModule{\n\n    void (*represent)(struct DtwTreeTransactionReport *report);\n    void (*free)(struct DtwTreeTransactionReport *report);\n\n}DtwTreeTransactionReportModule;\n\nDtwTreeTransactionReportModule newDtwTreeTransactionReportModule();"
	}, {
		"path":	"src/namespace/tree_module/tree/",
		"original_path":	"src/namespace/tree_module/tree/",
		"dir":	"src/namespace/tree_module/tree/"
	}, {
		"path":	"src/namespace/tree_module/tree/tree.c",
		"original_path":	"src/namespace/tree_module/tree/tree.c",
		"dir":	"src/namespace/tree_module/tree/",
		"full_name":	"tree.c",
		"name":	"tree",
		"extension":	"c",
		"hardware_sha256":	"6e383feb18f5670dcf8036f77ceffe3e599c0a4ad119bff6a3ac82f658aca517",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1910,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1910,
		"content_sha256":	"6e383feb18f5670dcf8036f77ceffe3e599c0a4ad119bff6a3ac82f658aca517",
		"is_binary":	false,
		"content":	"\nDtwTreeModule newDtwTreeModule(){\n    DtwTreeModule self = {0};\n    self.newTree = newDtwTree;\n    self.add_tree_part_by_copy = DtwTree_add_tree_part_copy;\n    self.remove_tree_part  = DtwTree_remove_tree_part;\n    self.add_tree_part_getting_owenership = DtwTree_add_tree_part_getting_onwership;\n    self.add_tree_part_referencing = DtwTree_add_tree_part_referencing;\n    self.add_tree_parts_from_string_array = DtwTree_add_tree_parts_from_string_array;\n    self.get_sub_tree = DtwTree_get_sub_tree;\n    self.add_tree_from_hardware = DtwTree_add_tree_from_hardware;\n    self.find_tree_part_by_function = DtwTree_find_tree_part_by_function;\n    self.filter = DtwTree_filter;\n    self.map = DtwTree_map;\n\n    self.list_files = DtwTree_list_files;\n    self.list_dirs = DtwTree_list_dirs;\n    self.list_all = DtwTree_list_all;\n\n    self.list_files_recursively = DtwTree_list_files_recursively;\n    self.list_dirs_recursively = DtwTree_list_dirs_recursively;\n    self.list_all_recursively = DtwTree_list_all_recursively;\n\n    self.find_tree_part_by_name = DtwTree_find_tree_part_by_name;\n    self.find_tree_part_by_path = DtwTree_find_tree_part_by_path;\n\n    self.create_report = DtwTree_create_report;\n    self.loads_json_tree = DtwTree_loads_json_tree;\n    self.loads_json_tree_from_file = DtwTree_loads_json_tree_from_file;\n    self.dumps_json_tree = DtwTree_dumps_tree_json;\n    self.dumps_json_tree_to_file = DtwTree_dumps_tree_json_to_file;\n\n    self.represent = DtwTree_represent;\n    self.insecure_hardware_remove_tree = DtwTree_insecure_hardware_remove_tree;\n    self.insecure_hardware_write_tree = DtwTree_insecure_hardware_write_tree;\n    self.hardware_commit_tree = DtwTree_hardware_commit_tree;\n    self.free = DtwTree_free;\n    self.transaction_report = newDtwTreeTransactionReportModule();\n    self.part = newDtwTreePartModule();\n    self.json_error = newDtwJsonTreeErrorModule();\n    return self;\n}"
	}, {
		"path":	"src/namespace/tree_module/tree/tree.h",
		"original_path":	"src/namespace/tree_module/tree/tree.h",
		"dir":	"src/namespace/tree_module/tree/",
		"full_name":	"tree.h",
		"name":	"tree",
		"extension":	"h",
		"hardware_sha256":	"292f677d69ee0c0747e71a3696dd7ef29d4e9470da3266d373ef020f105b9b2c",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	3106,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	3106,
		"content_sha256":	"292f677d69ee0c0747e71a3696dd7ef29d4e9470da3266d373ef020f105b9b2c",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwTreeModule{\n\n    DtwTree  *(*newTree)();\n    void (*add_tree_part_by_copy)(\n             DtwTree *self,\n             DtwTreePart *tree_part\n    );\n\n    void (*remove_tree_part)(\n             DtwTree *self,\n            int position\n    );\n\n    void (*add_tree_part_getting_owenership)(\n             DtwTree *self,\n             DtwTreePart *tree_part\n    );\n    void (*add_tree_part_referencing)(\n            DtwTree *self,\n            DtwTreePart *tree_part\n    );\n        void (*add_tree_parts_from_string_array)(\n            struct DtwTree *self,\n            struct DtwStringArray *paths,\n            DtwTreeProps props\n    );\n\n    struct DtwTree *(*get_sub_tree)(\n            struct DtwTree *self,\n            const char *path,\n            bool copy_content\n    );\n\n    void (*add_tree_from_hardware)(\n            struct DtwTree *self,\n            const char *path,\n            DtwTreeProps props\n    );\n    //Listage Functions\n\n    DtwTreePart *(*find_tree_part_by_function)(\n            struct DtwTree *self,\n            bool (*caller)(struct  DtwTreePart *part)\n    );\n\n    DtwTree *(*filter)(\n            struct DtwTree *self,\n            bool (*caller)(struct  DtwTreePart *part)\n    );\n\n    DtwTree *(*map)(\n            struct DtwTree *self,\n            struct  DtwTreePart*(*caller)(struct  DtwTreePart *part)\n    );\n\n\n    DtwStringArray * (*list_files)(struct DtwTree *self, const char *path,bool concat_path);\n    DtwStringArray * (*list_dirs)(struct DtwTree *self, const char *path,bool concat_path);\n    DtwStringArray * (*list_all)(struct DtwTree *self, const char *path,bool concat_path);\n\n    DtwStringArray * (*list_files_recursively)(struct DtwTree *self, const char *path,bool concat_path);\n    DtwStringArray * (*list_dirs_recursively)(struct DtwTree *self, const char *path,bool concat_path);\n    DtwStringArray * (*list_all_recursively)(struct DtwTree *self, const char *path,bool concat_path);\n\n\n    struct DtwTreePart *(*find_tree_part_by_name)( struct DtwTree *self,const char *name);\n    struct DtwTreePart *(*find_tree_part_by_path)(   struct DtwTree *self,const char *path);\n\n\n    struct DtwTreeTransactionReport * (*create_report)(struct DtwTree *self);\n\n    bool (*loads_json_tree)(\n            struct DtwTree *self,\n            const char *content\n    );\n\n\n    bool (*loads_json_tree_from_file)(\n            struct DtwTree *self,\n            const char *path\n    );\n\n    char *(*dumps_json_tree)(\n            struct DtwTree *self,\n            DtwTreeProps props\n    );\n\n    void (*dumps_json_tree_to_file)(\n            struct DtwTree *self,\n            const char *path,\n            DtwTreeProps  props\n    );\n\n    void (*represent)(struct DtwTree *self);\n    void (*insecure_hardware_remove_tree)(struct DtwTree *self);\n    void (*insecure_hardware_write_tree)(struct DtwTree *self);\n    void (*hardware_commit_tree)(struct DtwTree *self);\n    void (*free)(struct DtwTree *self);\n\n    DtwTreeTransactionReportModule transaction_report;\n\n    DtwTreePartModule part;\n    DtwJsonTreeErrorModule json_error;\n\n}DtwTreeModule;\n\nDtwTreeModule newDtwTreeModule();"
	}, {
		"path":	"src/namespace/tree_module/tree_part_module/",
		"original_path":	"src/namespace/tree_module/tree_part_module/",
		"dir":	"src/namespace/tree_module/tree_part_module/"
	}, {
		"path":	"src/namespace/tree_module/tree_part_module/tree_part_module.c",
		"original_path":	"src/namespace/tree_module/tree_part_module/tree_part_module.c",
		"dir":	"src/namespace/tree_module/tree_part_module/",
		"full_name":	"tree_part_module.c",
		"name":	"tree_part_module",
		"extension":	"c",
		"hardware_sha256":	"09029f9708c9231acaebec74041342554454ae1ebcbbdc67363074dd57be4a34",
		"last_modification_in_unix":	1719387363,
		"hardware_content_size":	1109,
		"last_modification":	"2024-06-26 04:36:03",
		"content_size":	1109,
		"content_sha256":	"09029f9708c9231acaebec74041342554454ae1ebcbbdc67363074dd57be4a34",
		"is_binary":	false,
		"content":	"\n\nDtwTreePartModule newDtwTreePartModule(){\n    DtwTreePartModule self ={0};\n    self.newPart = newDtwTreePart;\n    self.newPartEmpty = newDtwTreePartEmpty;\n    self.newPartLoading = newDtwTreePartLoading;\n    self.get_content_string_by_reference = DtwTreePart_get_content_string_by_reference;\n    self.get_content_binary_by_reference = DtwTreePart_get_content_binary_by_reference;\n    self.get_content_sha = DtwTreePart_get_content_sha;\n    self.set_any_content = DtwTreePart_set_any_content;\n    self.set_string_content = DtwTreePart_set_string_content;\n    self.set_binary_content = DtwTreePart_set_binary_content;\n    self.load_content_from_hardware =DtwTreePart_load_content_from_hardware;\n    self.free_content = DtwTreePart_free_content;\n    self.represent =DtwTreePart_represent;\n    self.hardware_remove = DtwTreePart_hardware_remove;\n    self.hardware_write = DtwTreePart_hardware_write;\n    self.hardware_modify = DtwTreePart_hardware_modify;\n    self.hardware_commit =DtwTreePart_hardware_commit;\n\n    self.free = DtwTreePart_free;\n    self.self_copy = DtwTreePart_self_copy;\n\n\n    return self;\n}\n"
	}, {
		"path":	"src/namespace/tree_module/tree_part_module/tree_part_module.h",
		"original_path":	"src/namespace/tree_module/tree_part_module/tree_part_module.h",
		"dir":	"src/namespace/tree_module/tree_part_module/",
		"full_name":	"tree_part_module.h",
		"name":	"tree_part_module",
		"extension":	"h",
		"hardware_sha256":	"846daea28f4416422d6902eedfe3e20365c6896e7561b32bca51522834c354c3",
		"last_modification_in_unix":	1719387360,
		"hardware_content_size":	1317,
		"last_modification":	"2024-06-26 04:36:00",
		"content_size":	1317,
		"content_sha256":	"846daea28f4416422d6902eedfe3e20365c6896e7561b32bca51522834c354c3",
		"is_binary":	false,
		"content":	"\n\ntypedef struct DtwTreePartModule{\n\n    DtwTreePart  *(*newPart)(const char *path, DtwTreeProps props);\n    DtwTreePart  *(*newPartEmpty)(const char *path);\n    DtwTreePart * (*newPartLoading)(const char *path);\n\n    char *(*get_content_string_by_reference)(struct DtwTreePart *self);\n    unsigned char *(*get_content_binary_by_reference)(struct DtwTreePart *self);\n\n    char *(*get_content_sha)(struct DtwTreePart *self);\n    void (*set_any_content)(struct DtwTreePart *self,unsigned char *content,long content_size,bool is_binary);\n    void (*set_string_content)(struct DtwTreePart *self,const char *content);\n    void (*set_binary_content)(struct DtwTreePart *self,unsigned char *content,long content_size);\n    void (*load_content_from_hardware)(struct DtwTreePart *self);\n    void (*free_content)(struct DtwTreePart *self);\n    void(*represent)(struct DtwTreePart *self);\n\n    bool(*hardware_remove)(struct DtwTreePart *self, int transaction);\n    bool(*hardware_write)(struct DtwTreePart *self, int transaction);\n    bool(*hardware_modify)(struct DtwTreePart *self, int transaction);\n    bool(*hardware_commit)(struct DtwTreePart *self);\n\n    void (*free)(struct DtwTreePart *self);\n    struct DtwTreePart *(*self_copy)(struct DtwTreePart *self);\n}DtwTreePartModule;\n\n\nDtwTreePartModule newDtwTreePartModule();"
	}, {
		"path":	"src/numeral_io/",
		"original_path":	"src/numeral_io/",
		"dir":	"src/numeral_io/"
	}, {
		"path":	"src/numeral_io/numeral_io.c",
		"original_path":	"src/numeral_io/numeral_io.c",
		"dir":	"src/numeral_io/",
		"full_name":	"numeral_io.c",
		"name":	"numeral_io",
		"extension":	"c",
		"hardware_sha256":	"281db22a7b7d721dc696ec11343af08f9a4ea11781028e19b9b3c53047ab98f2",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2285,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2285,
		"content_sha256":	"281db22a7b7d721dc696ec11343af08f9a4ea11781028e19b9b3c53047ab98f2",
		"is_binary":	false,
		"content":	"\nlong dtw_load_long_file_content_setting_error(const char *path,int *error){\n    char *data = dtw_load_string_file_content(path);\n    if(!data){\n        *error = DTW_NOT_FOUND;\n        return DTW_NOT_FOUND;\n    }\n    long value = -1;\n    int result = sscanf(data,\"%ld\",&value);\n    free(data);\n    if(result){\n        return value;\n    }\n    *error = DTW_NOT_NUMERICAL;\n    return DTW_NOT_NUMERICAL;\n}\n\n\nlong dtw_load_long_file_content(const char * path){\n   int error;\n   return dtw_load_long_file_content_setting_error(path,&error);\n}\n\n\ndouble dtw_load_double_file_content_setting_error(const char * path, int *error){\n    char *data = dtw_load_string_file_content(path);\n    if(!data){\n        *error = DTW_NOT_FOUND;\n        return DTW_NOT_FOUND;\n    }\n    double value = -1;\n    int result = sscanf(data,\"%lf\",&value);\n    free(data);\n    if(result){\n    \n        return value;\n    }\n    *error = DTW_NOT_NUMERICAL;\n    return DTW_NOT_NUMERICAL;\n}\n\n\ndouble dtw_load_double_file_content(const char * path){\n    int error;\n    return dtw_load_double_file_content_setting_error(path,&error);\n}\n\n\nbool dtw_load_bool_file_content_setting_error(const char * path, int *error){\n    char *data = dtw_load_string_file_content(path);\n    if(!data){\n        *error = DTW_NOT_FOUND;\n        return false;\n    }\n\n    if(strcmp(data,\"true\") == 0 || strcmp(data,\"t\") == 0){\n        free(data);\n        return true;\n    }\n\n    if(strcmp(data,\"false\") == 0 || strcmp(data,\"f\") == 0){\n        free(data);\n        return false;\n    }\n    free(data);\n    *error = DTW_NOT_BOOL;\n    return false;\n\n}\n\n\nbool dtw_load_bool_file_content(const char * path){\n    int error;\n    return dtw_load_bool_file_content_setting_error(path,&error);\n    \n}\n\n\n\nvoid dtw_write_long_file_content(const char *path, long value){\n    char result[30] ={0};\n    sprintf(result,\"%ld\",value);\n    dtw_write_string_file_content(path,result);\n}\n\n\nvoid dtw_write_double_file_content(const char *path,double value){\n    char result[30] ={0};\n    sprintf(result,\"%lf\",value);\n    dtw_write_string_file_content(path,result);\n}\n\n\nvoid dtw_write_bool_file_content(const char *path, bool value){\n    if(value){\n        dtw_write_string_file_content(path,\"t\");\n    }\n    else{\n        dtw_write_string_file_content(path,\"f\");\n    }\n}\n\n\n"
	}, {
		"path":	"src/numeral_io/numeral_io.h",
		"original_path":	"src/numeral_io/numeral_io.h",
		"dir":	"src/numeral_io/",
		"full_name":	"numeral_io.h",
		"name":	"numeral_io",
		"extension":	"h",
		"hardware_sha256":	"ffc7caa5e4bcabac2aea884c7bd04bf12c268496d84100089da66d154d7fe696",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	658,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	658,
		"content_sha256":	"ffc7caa5e4bcabac2aea884c7bd04bf12c268496d84100089da66d154d7fe696",
		"is_binary":	false,
		"content":	"\n\n#define DTW_NOT_NUMERICAL -2\n#define DTW_NOT_BOOL -3\n\nlong dtw_load_long_file_content_setting_error(const char *path,int *error);\n\nlong dtw_load_long_file_content(const char * path);\n\ndouble dtw_load_double_file_content_setting_error(const char * path, int *error);\n\ndouble dtw_load_double_file_content(const char * path);\n\nbool dtw_load_bool_file_content_setting_error(const char * path, int *error);\n\n\nbool dtw_load_bool_file_content(const char * path);\n\n\nvoid dtw_write_long_file_content(const char *path, long value);\n\nvoid dtw_write_bool_file_content(const char *path, bool value);\n\nvoid dtw_write_double_file_content(const char *path,double value);\n\n"
	}, {
		"path":	"src/one.c",
		"original_path":	"src/one.c",
		"dir":	"src/",
		"full_name":	"one.c",
		"name":	"one",
		"extension":	"c",
		"hardware_sha256":	"67b01ced3ca7f0b9137decba9aa12fcd92ad16b50a15e239b503e7d2ee7ba795",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1391,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1391,
		"content_sha256":	"67b01ced3ca7f0b9137decba9aa12fcd92ad16b50a15e239b503e7d2ee7ba795",
		"is_binary":	false,
		"content":	"\n// USE  THIS FILE ONLY FOR PRODUCTION\n// This file is part of the DoTheWorld project.\n// Do not edit this file, it is automatically generated.\n// See the README.md file for more information.\n/*\nMIT License\n\nCopyright (c) 2023 Mateus Moutinho Queiroz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n#ifndef DO_THE_WORLD_H\n#include \"definition.c\"\n#include \"dependencies/definition.c\"\n\n#endif //DO_THE_WORLD_H\n\n\n\n"
	}, {
		"path":	"src/path/",
		"original_path":	"src/path/",
		"dir":	"src/path/"
	}, {
		"path":	"src/path/basic/",
		"original_path":	"src/path/basic/",
		"dir":	"src/path/basic/"
	}, {
		"path":	"src/path/basic/basic.c",
		"original_path":	"src/path/basic/basic.c",
		"dir":	"src/path/basic/",
		"full_name":	"basic.c",
		"name":	"basic",
		"extension":	"c",
		"hardware_sha256":	"b5dae827bca343e7c8c241995ddbc2e435810233e397a9661efcf91d0b821d29",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1316,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1316,
		"content_sha256":	"b5dae827bca343e7c8c241995ddbc2e435810233e397a9661efcf91d0b821d29",
		"is_binary":	false,
		"content":	"\n\nstruct DtwPath * newDtwPath(const char *path) {\n    struct DtwPath *self = (struct DtwPath *)malloc(sizeof(struct DtwPath));\n    self->garbage = newDtwStringArray();\n    self->path = private_dtw_format_path(path);\n    self->original_path_string = strdup(self->path);\n\n\n    return self;\n}\nbool DtwPath_changed(struct DtwPath *self){\n    return strcmp(self->path,self->original_path_string) != 0;\n}\n\n\n\n\nvoid DtwPath_represent(struct DtwPath *self){\n    char  *path = DtwPath_get_path(self);\n    char *full_name = DtwPath_get_full_name(self);\n    char *dir = DtwPath_get_dir(self);\n    char *name = DtwPath_get_name(self);\n    char *extension = DtwPath_get_extension(self);\n    bool changed = DtwPath_changed(self);\n\n    printf(\"First Path: %s\\n\", self->original_path_string ? self->original_path_string : \"NULL\");\n    printf(\"Path: %s\\n\", path  ? path : \"NULL\");\n    printf(\"Path Changed: %s\\n\", changed ? \"true\" : \"false\");\n    printf(\"Dir: %s\\n\", dir ? dir : \"NULL\");\n    printf(\"Full Name: %s\\n\", full_name ? full_name : \"NULL\");\n    printf(\"Name: %s\\n\", name ? name : \"NULL\");\n    printf(\"Extension: %s\\n\", extension ? extension : \"NULL\");\n\n    \n}\n\n\n\nvoid DtwPath_free(struct DtwPath *self) {\n    DtwStringArray_free(self->garbage);\n    free(self->original_path_string);\n    free(self->path);\n    free(self);\n}\n\n"
	}, {
		"path":	"src/path/basic/basic.h",
		"original_path":	"src/path/basic/basic.h",
		"dir":	"src/path/basic/",
		"full_name":	"basic.h",
		"name":	"basic",
		"extension":	"h",
		"hardware_sha256":	"3806e6464a5811e012b318a96e4841c04c9d81ef7922aa3bd557e4cfde5f3b0d",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	187,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	187,
		"content_sha256":	"3806e6464a5811e012b318a96e4841c04c9d81ef7922aa3bd557e4cfde5f3b0d",
		"is_binary":	false,
		"content":	"\n\nstruct DtwPath * newDtwPath(const char *path);\n\nbool DtwPath_changed(struct DtwPath *self);\n\n\n\n\nvoid DtwPath_represent(struct DtwPath *self);\n\n\n\nvoid DtwPath_free(struct DtwPath *self);"
	}, {
		"path":	"src/path/declaration.h",
		"original_path":	"src/path/declaration.h",
		"dir":	"src/path/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"ed6b09c15985152bbe4ca0f4ab57bb58e5cd72032e0e9d086df38214aa4dfff3",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	149,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	149,
		"content_sha256":	"ed6b09c15985152bbe4ca0f4ab57bb58e5cd72032e0e9d086df38214aa4dfff3",
		"is_binary":	false,
		"content":	"#include \"path.h\"\n#include \"basic/basic.h\"\n#include \"getters/getters.h\"\n#include \"setters/setters.h\"\n#include \"index/index.h\"\n#include \"meta/meta.h\"\n"
	}, {
		"path":	"src/path/definition.c",
		"original_path":	"src/path/definition.c",
		"dir":	"src/path/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"00048b64e66a0227f39340bd1093978dca4aab124e588ce465082bce4422ac50",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	132,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	132,
		"content_sha256":	"00048b64e66a0227f39340bd1093978dca4aab124e588ce465082bce4422ac50",
		"is_binary":	false,
		"content":	"\n#include \"basic/basic.c\"\n#include \"getters/getters.c\"\n#include \"setters/setters.c\"\n#include \"index/index.c\"\n#include \"meta/meta.c\"\n"
	}, {
		"path":	"src/path/getters/",
		"original_path":	"src/path/getters/",
		"dir":	"src/path/getters/"
	}, {
		"path":	"src/path/getters/getters.c",
		"original_path":	"src/path/getters/getters.c",
		"dir":	"src/path/getters/",
		"full_name":	"getters.c",
		"name":	"getters",
		"extension":	"c",
		"hardware_sha256":	"bc83f7a159ea9c422234b598968e68875b5e0cef365a7656cc93060e54bf242b",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2269,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2269,
		"content_sha256":	"bc83f7a159ea9c422234b598968e68875b5e0cef365a7656cc93060e54bf242b",
		"is_binary":	false,
		"content":	"\n\nchar * DtwPath_get_name(struct DtwPath *self){\n\n    long path_size = (long)strlen(self->path);\n    long start = 0;\n    long end = path_size;\n    for(long i = path_size-1; i >=0; i--){\n        char current_char = self->path[i];\n        if(current_char == '/' || current_char == '\\\\'){\n            start = i+1;\n            break;\n        }\n        if(current_char == '.'){\n            end = i;\n        }\n    }\n    if(end - start == 0){\n        return NULL;\n    }\n\n    char *buffer = private_dtw_sub_str(self->path,start,end);\n    return privateDtwStringArray_append_if_not_included(self->garbage,buffer);\n\n}\nchar * DtwPath_get_extension(struct DtwPath *self){\n    long path_size = (long)strlen(self->path);\n    long start = -1;\n    long end = path_size;\n    for(long i = path_size-1; i >=0; i--){\n        char current_char = self->path[i];\n        if(current_char == '.'){\n            start = i+1;\n            break;\n        }\n    }\n    if(start == -1){\n        return  NULL;\n    }\n    char *buffer = private_dtw_sub_str(self->path,start,end);\n    return privateDtwStringArray_append_if_not_included(self->garbage,buffer);\n}\n\nchar * DtwPath_get_full_name(struct DtwPath *self){\n    long path_size = (long)strlen(self->path);\n    long start = 0;\n    long end = path_size;\n    for(long i = path_size-1; i >=0; i--){\n        char current_char = self->path[i];\n        if(current_char == '/' || current_char == '\\\\'){\n            start = i+1;\n            break;\n        }\n    }\n    if(end - start == 0){\n        return NULL;\n    }\n    char *buffer = private_dtw_sub_str(self->path,start,end);\n    return privateDtwStringArray_append_if_not_included(self->garbage,buffer);\n}\n\nchar * DtwPath_get_dir(struct DtwPath *self){\n    long path_size = (long)strlen(self->path);\n    long start = 0;\n    long end = -1;\n    for(long i = path_size-1; i >=0; i--){\n        char current_char = self->path[i];\n        if(current_char == '/' || current_char == '\\\\'){\n            end = i+1;\n            break;\n        }\n    }\n    if(end == -1){\n        return NULL;\n    }\n\n    char *buffer = private_dtw_sub_str(self->path,start,end);\n    return privateDtwStringArray_append_if_not_included(self->garbage,buffer);\n}\n\nchar * DtwPath_get_path(struct DtwPath *self){\n    return self->path;\n}\n\n\n"
	}, {
		"path":	"src/path/getters/getters.h",
		"original_path":	"src/path/getters/getters.h",
		"dir":	"src/path/getters/",
		"full_name":	"getters.h",
		"name":	"getters",
		"extension":	"h",
		"hardware_sha256":	"41dfa02c647c07ac4b5697fd3055723532d4dd68b581dc98ea093704211219ca",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	247,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	247,
		"content_sha256":	"41dfa02c647c07ac4b5697fd3055723532d4dd68b581dc98ea093704211219ca",
		"is_binary":	false,
		"content":	"\n\nchar * DtwPath_get_name(DtwPath *self);\n\nchar * DtwPath_get_extension(struct DtwPath *self);\n\n\nchar * DtwPath_get_full_name(struct DtwPath *self);\n\n\nchar * DtwPath_get_dir(struct DtwPath *self);\n\n\nchar * DtwPath_get_path(struct DtwPath *self);\n\n"
	}, {
		"path":	"src/path/index/",
		"original_path":	"src/path/index/",
		"dir":	"src/path/index/"
	}, {
		"path":	"src/path/index/index.c",
		"original_path":	"src/path/index/index.c",
		"dir":	"src/path/index/",
		"full_name":	"index.c",
		"name":	"index",
		"extension":	"c",
		"hardware_sha256":	"a80739cb83f46aa29b611ebb4361f801749dc65a02437e3f53735911f1e16823",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	3823,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	3823,
		"content_sha256":	"a80739cb83f46aa29b611ebb4361f801749dc65a02437e3f53735911f1e16823",
		"is_binary":	false,
		"content":	"\nint DtwPath_get_total_dirs(DtwPath *self){\n    int size = 0;\n    int path_size = (int)strlen(self->path);\n    for(int i = 0; i < path_size;i++){\n        char current = self->path[i];\n        if(current == '/' || current =='\\\\'){\n            size+=1;\n        }\n    }\n    return size;\n}\n\nchar *DtwPath_get_sub_dirs_from_index(DtwPath *self, int start, int end){\n\n    int size = DtwPath_get_total_dirs(self);\n    if(size == 0){\n        return NULL;\n    }\n    int converted_start_index = (int)private_dtw_convert_index(start, size);\n    int converted_end_index = (int)private_dtw_convert_index(end, size);\n\n    if(converted_start_index == -1  || converted_end_index == -1){\n        return  NULL;\n    }\n\n    char *dir = DtwPath_get_dir(self);\n    int  dirs_string_size = (int)strlen(dir);\n    int total_dirs = 0;\n    bool start_defined = false;\n    bool end_defined  = false;\n    int start_point = 0;\n    int end_point = dirs_string_size;\n\n    for(int i= 0 ;i < dirs_string_size;i++ ){\n        char current = dir[i];\n        if(current == '/' || current =='\\\\'){\n            total_dirs+=1;\n            continue;\n        }\n        if(total_dirs == converted_start_index  &&!start_defined){\n            start_point = i;\n            start_defined = true;\n        }\n\n        if(total_dirs == (converted_end_index + 1)&&!end_defined){\n            end_point = i;\n            end_defined = true;\n        }\n    }\n    char *buffer = private_dtw_sub_str(dir,start_point,end_point);\n    return privateDtwStringArray_append_if_not_included(self->garbage,buffer);\n}\n\n\n\nint private_dtw_count_dirs_before(const char *dirs,int index){\n    int total = 0;\n    for(int i =index; i >=0; i--){\n        char current_char = dirs[i];\n        if(current_char == '\\\\' || current_char == '/' ){\n            total+=1;\n        }\n    }\n    return  total;\n}\n\nvoid DtwPath_insert_dir_at_index(DtwPath *self, int index, const char *dir){\n\n    int size = DtwPath_get_total_dirs(self);\n    int converted_index = (int)private_dtw_convert_index(index,size+1);\n\n    if(converted_index == -1){\n        return  ;\n    }\n    char * starter = NULL;\n    if(converted_index > 0){\n        starter = DtwPath_get_sub_dirs_from_index(self, 0, converted_index - 1);\n    }\n\n    const char *rest =NULL;\n    if(converted_index < size){\n        rest = DtwPath_get_sub_dirs_from_index(self, converted_index, -1);\n    }\n\n\n     char *buffer =NULL;\n    if(starter && rest){\n        buffer = private_dtw_formatt(\"%s/%s/%s\",starter,dir,rest);\n    }\n    if(starter && rest==NULL){\n        buffer = private_dtw_formatt(\"%s/%s\",starter,dir);\n    }\n    if(starter == NULL && rest){\n        buffer = private_dtw_formatt(\"%s/%s\",dir,rest);\n    }\n\n    if(!starter && !rest){\n        buffer = (char*)dir;\n    }\n\n    DtwPath_set_dir(self,buffer);\n\n    if(starter || rest){\n        free(buffer);\n    }\n}\n\n\n\nvoid DtwPath_remove_sub_dirs_at_index(DtwPath *self, int start, int end){\n\n    int size = DtwPath_get_total_dirs(self);\n    if(size == 0){\n        return ;\n    }\n    int converted_start_index = (int)private_dtw_convert_index(start, size);\n    int converted_end_index = (int)private_dtw_convert_index(end, size);\n\n    if(converted_start_index == -1  || converted_end_index == -1){\n        return  ;\n    }\n    char *start_dir = NULL;\n    if(converted_start_index != 0){\n        start_dir = DtwPath_get_sub_dirs_from_index(self,0,converted_start_index-1);\n    }\n\n    char *end_dir = DtwPath_get_sub_dirs_from_index(self,converted_end_index+1,-1);\n\n    if(start_dir != NULL  && end_dir != NULL){\n        char *full_dir = dtw_concat_path(start_dir,end_dir);\n        DtwPath_set_dir(self,full_dir);\n        free(full_dir);\n        return ;\n    }\n    if(start_dir != NULL){\n        DtwPath_set_dir(self,start_dir);\n    }\n\n    if(end_dir != NULL){\n        DtwPath_set_dir(self,end_dir);\n    }\n\n\n}\n\n"
	}, {
		"path":	"src/path/index/index.h",
		"original_path":	"src/path/index/index.h",
		"dir":	"src/path/index/",
		"full_name":	"index.h",
		"name":	"index",
		"extension":	"h",
		"hardware_sha256":	"615f622f6cf6acfcfda907b11a88db70e3862af93eb029610af58aaa3962cfa6",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	337,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	337,
		"content_sha256":	"615f622f6cf6acfcfda907b11a88db70e3862af93eb029610af58aaa3962cfa6",
		"is_binary":	false,
		"content":	"\nint DtwPath_get_total_dirs(DtwPath *self);\n\nchar *DtwPath_get_sub_dirs_from_index(DtwPath *self, int start, int end);\n\n\nint private_dtw_count_dirs_before(const char *dirs,int index);\n\nvoid DtwPath_insert_dir_at_index(DtwPath *self, int index, const char *dir);\n\nvoid DtwPath_remove_sub_dirs_at_index(DtwPath *self, int start, int end);\n"
	}, {
		"path":	"src/path/meta/",
		"original_path":	"src/path/meta/",
		"dir":	"src/path/meta/"
	}, {
		"path":	"src/path/meta/meta.c",
		"original_path":	"src/path/meta/meta.c",
		"dir":	"src/path/meta/",
		"full_name":	"meta.c",
		"name":	"meta",
		"extension":	"c",
		"hardware_sha256":	"19dc64460965731039fb3d7990d6cb7bf40c1f441627ddc0093231daf69ed6d7",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1122,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1122,
		"content_sha256":	"19dc64460965731039fb3d7990d6cb7bf40c1f441627ddc0093231daf69ed6d7",
		"is_binary":	false,
		"content":	"\nvoid DtwPath_insert_dir_after(DtwPath *self,const char *str,const char *dir){\n    char *current_dir = DtwPath_get_dir(self);\n    int index = (int)dtw_index_of_string(current_dir,str);\n    if(index == -1){\n        return;\n    }\n\n    int start = private_dtw_count_dirs_before(current_dir,index)+1;\n    DtwPath_insert_dir_at_index(self, start, dir);\n}\n\nvoid DtwPath_insert_dir_before(DtwPath *self,const char *str,const char *dir){\n    char *current_dir = DtwPath_get_dir(self);\n    int index = (int)dtw_index_of_string(current_dir,str);\n    if(index == -1){\n        return;\n    }\n    int start = private_dtw_count_dirs_before(current_dir,index);\n    DtwPath_insert_dir_at_index(self, start, dir);\n}\n\nvoid DtwPath_remove_sub_dirs_at(DtwPath *self,const char *str){\n    char *current_dir = DtwPath_get_dir(self);\n    int index = (int)dtw_index_of_string(current_dir,str);\n    if(index == -1){\n        return;\n    }\n\n    int start = private_dtw_count_dirs_before(current_dir,index);\n    int end = private_dtw_count_dirs_before(current_dir,index+ (int)strlen(str));\n    DtwPath_remove_sub_dirs_at_index(self, start, end - 1);\n}"
	}, {
		"path":	"src/path/meta/meta.h",
		"original_path":	"src/path/meta/meta.h",
		"dir":	"src/path/meta/",
		"full_name":	"meta.h",
		"name":	"meta",
		"extension":	"h",
		"hardware_sha256":	"72f93bec60afc52c3935637c58ceb93612d3e46e050144f021b26c652c9cb0dd",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	226,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	226,
		"content_sha256":	"72f93bec60afc52c3935637c58ceb93612d3e46e050144f021b26c652c9cb0dd",
		"is_binary":	false,
		"content":	"\nvoid DtwPath_insert_dir_after(DtwPath *self,const char *str,const char *dir);\n\n\nvoid DtwPath_insert_dir_before(DtwPath *self,const char *str,const char *dir);\n\n\nvoid DtwPath_remove_sub_dirs_at(DtwPath *self,const char *str);\n"
	}, {
		"path":	"src/path/path.h",
		"original_path":	"src/path/path.h",
		"dir":	"src/path/",
		"full_name":	"path.h",
		"name":	"path",
		"extension":	"h",
		"hardware_sha256":	"7a6a6ddd8750e11ae209ca276e4660fe17bb78602faf9bb7573df44a2e355e2e",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	115,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	115,
		"content_sha256":	"7a6a6ddd8750e11ae209ca276e4660fe17bb78602faf9bb7573df44a2e355e2e",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwPath {\n    char *original_path_string;\n    char *path;\n    DtwStringArray *garbage;\n\n\n}DtwPath;\n"
	}, {
		"path":	"src/path/setters/",
		"original_path":	"src/path/setters/",
		"dir":	"src/path/setters/"
	}, {
		"path":	"src/path/setters/setters.c",
		"original_path":	"src/path/setters/setters.c",
		"dir":	"src/path/setters/",
		"full_name":	"setters.c",
		"name":	"setters",
		"extension":	"c",
		"hardware_sha256":	"7fa6acd74ca0ba3dedb77613300889f0b5ba555186dc0ca251c0e7784d059fb0",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2735,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2735,
		"content_sha256":	"7fa6acd74ca0ba3dedb77613300889f0b5ba555186dc0ca251c0e7784d059fb0",
		"is_binary":	false,
		"content":	"\n\nvoid DtwPath_set_extension(struct DtwPath *self, const char *extension){\n\n    const char *dir = DtwPath_get_dir(self);\n    if(!dir){\n        dir = \"\";\n    }\n    const char *name = DtwPath_get_name(self);\n    if(!name){\n        name = \"\";\n    }\n    free(self->path);\n    char *formated_extension = dtw_replace_string(extension,\".\",\"\");\n    self->path= private_dtw_formatt(\"%s%s.%s\",dir,name,formated_extension);\n    free(formated_extension);\n}\n\n\nvoid DtwPath_set_name(struct DtwPath * self, const char * name){\n    const char *dir = DtwPath_get_dir(self);\n    if(!dir){\n        dir = \"\";\n    }\n    char *extension = DtwPath_get_extension(self);\n    free(self->path);\n\n    if(extension){\n        self->path = private_dtw_formatt(\"%s%s.%s\",dir,name,extension);\n    }\n    if(!extension){\n        self->path = private_dtw_formatt(\"%s%s\",dir,name);\n    }\n}\n\n\n\nvoid DtwPath_set_full_name(struct DtwPath * self, const char * full_name){\n    const char *dir = DtwPath_get_dir(self);\n    if(!dir){\n        dir = \"\";\n    }\n    free(self->path);\n    self->path = private_dtw_formatt(\"%s%s\",dir,full_name);\n\n}\n\n\nvoid DtwPath_set_dir(struct DtwPath *self, const char *dir){\n    const char * full_name = DtwPath_get_full_name(self);\n    if(!full_name){\n        full_name = \"\";\n    }\n    free(self->path);\n    char *buffer = private_dtw_formatt(\"%s/%s\",dir,full_name);\n    self->path = private_dtw_format_path(buffer);\n    free(buffer);\n\n}\n\n\nvoid DtwPath_set_path(struct DtwPath *self, const char *target_path) {\n    free(self->path);\n    self->path = private_dtw_format_path(target_path);\n}\n\n\nvoid DtwPath_add_start_dir(struct DtwPath *self, const char *start_dir){\n    char *element = dtw_concat_path(start_dir,self->path);\n    free(self->path);\n    self->path = private_dtw_format_path(element);\n    free(element);\n}\n\nvoid DtwPath_add_end_dir(struct DtwPath *self, const char *end_dir){\n    const char *dir = DtwPath_get_dir(self);\n    if(!dir){\n        dir = \"\";\n    }\n    const char * full_name = DtwPath_get_full_name(self);\n    if(!full_name){\n        full_name = \"\";\n    }\n    free(self->path);\n\n    char *buffer = private_dtw_formatt(\"%s/%s/%s\",dir,end_dir,full_name);\n    self->path = private_dtw_format_path(buffer);\n    free(buffer);\n}\n\nvoid DtwPath_replace_dirs(DtwPath *self,const char *str,const char *dir){\n    char *self_dir = DtwPath_get_dir(self);\n\n    char *formatted_entry = NULL;\n    if(dtw_starts_with(self_dir,str)){\n       formatted_entry = private_dtw_formatt(\"%s/\",dir);\n    }\n    else{\n        formatted_entry = private_dtw_formatt(\"/%s/\",dir);\n\n    }\n    char * formated_dir = dtw_replace_string(self_dir,str,formatted_entry);\n    DtwPath_set_dir(self,formated_dir);\n    free(formated_dir);\n    free(formatted_entry);\n\n}"
	}, {
		"path":	"src/path/setters/setters.h",
		"original_path":	"src/path/setters/setters.h",
		"dir":	"src/path/setters/",
		"full_name":	"setters.h",
		"name":	"setters",
		"extension":	"h",
		"hardware_sha256":	"ee3a4d7c5800622611745014ab88c3e387177600d2b6dd5509de99fdde3c1e36",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	577,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	577,
		"content_sha256":	"ee3a4d7c5800622611745014ab88c3e387177600d2b6dd5509de99fdde3c1e36",
		"is_binary":	false,
		"content":	"\n\nvoid DtwPath_set_extension(struct DtwPath *self, const char *extension);\n\n\nvoid DtwPath_set_name(struct DtwPath * self, const char * name);\n\n\nvoid DtwPath_set_full_name(struct DtwPath * self, const char * full_name);\n\n\nvoid DtwPath_set_dir(struct DtwPath *self, const char *dir);\n\n\n\nvoid DtwPath_set_path(struct DtwPath *self, const char *target_path);\n\n\nvoid DtwPath_add_start_dir(struct DtwPath *self, const char *start_dir);\n\n\nvoid DtwPath_add_end_dir(struct DtwPath *self, const char *end_dir);\n\n\nvoid DtwPath_replace_dirs(DtwPath *self,const char *str,const char *dir);\n"
	}, {
		"path":	"src/randonizer/",
		"original_path":	"src/randonizer/",
		"dir":	"src/randonizer/"
	}, {
		"path":	"src/randonizer/randonizer.c",
		"original_path":	"src/randonizer/randonizer.c",
		"dir":	"src/randonizer/",
		"full_name":	"randonizer.c",
		"name":	"randonizer",
		"extension":	"c",
		"hardware_sha256":	"cea1017edad84591bfe72dac7d562f34e86a9d519e8a37977f48f1e704250684",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1583,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1583,
		"content_sha256":	"cea1017edad84591bfe72dac7d562f34e86a9d519e8a37977f48f1e704250684",
		"is_binary":	false,
		"content":	"\n\n\n\nDtwRandonizer * newDtwRandonizer(){\n    DtwRandonizer *self = (DtwRandonizer*) malloc(sizeof (DtwRandonizer));\n    *self =(DtwRandonizer){0};\n\n    #ifndef DTW_DEBUG_TIME\n\n            #ifdef _WIN32\n                FILETIME ft;\n                LARGE_INTEGER li;\n\n                GetSystemTimeAsFileTime(&ft);\n                li.LowPart = ft.dwLowDateTime;\n                li.HighPart = ft.dwHighDateTime;\n\n                self->internal_seed = li.QuadPart;\n                self->internal_seed ^= GetCurrentProcessId();\n            #else\n                struct timespec ts;\n                clock_gettime(CLOCK_REALTIME, &ts);\n\n                self->internal_seed = (uint64_t)ts.tv_sec + (uint64_t)ts.tv_nsec;\n                self->internal_seed += getpid();\n            #endif\n    #endif\n    return self;\n}\n\nint DtwRandonizer_generate_num(DtwRandonizer *self,int max) {\n    self->actual_generation+=1;\n    srand(  self->internal_seed + self->actual_generation + self->seed);\n    int value = rand() % max;\n    return value;\n}\nchar * DtwRandonizer_generate_token(struct DtwRandonizer*self, int size){\n    static const char chars[] =\n            \"abcdefghijklmnopqrstuvwxyz\"\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            \"0123456789\";\n\n    int total_size = sizeof(chars) - 1;\n    char *token = (char*)malloc(size +1);\n\n    for (int i = 0; i < size; ++i) {\n        int index = DtwRandonizer_generate_num(self,total_size);\n        token[i] = chars[index];\n    }\n\n    token[size] = '\\0';\n    return token;\n}\n\nvoid DtwRandonizer_free(struct DtwRandonizer *self){\n    free(self);\n}\n\n"
	}, {
		"path":	"src/randonizer/randonizer.h",
		"original_path":	"src/randonizer/randonizer.h",
		"dir":	"src/randonizer/",
		"full_name":	"randonizer.h",
		"name":	"randonizer",
		"extension":	"h",
		"hardware_sha256":	"162e73854fdda6b1f6369837a600262723b85288be3dd9c49438a8d1d0c907ff",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	347,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	347,
		"content_sha256":	"162e73854fdda6b1f6369837a600262723b85288be3dd9c49438a8d1d0c907ff",
		"is_binary":	false,
		"content":	"\n\n\ntypedef struct DtwRandonizer{\n    long internal_seed;\n    long seed;\n    long actual_generation;\n\n}DtwRandonizer;\n\n\nDtwRandonizer * newDtwRandonizer();\n\nint DtwRandonizer_generate_num(DtwRandonizer *self,int max);\n\nchar * DtwRandonizer_generate_token(struct DtwRandonizer*self, int size);\nvoid DtwRandonizer_free(struct DtwRandonizer *self);\n\n\n"
	}, {
		"path":	"src/resource/",
		"original_path":	"src/resource/",
		"dir":	"src/resource/"
	}, {
		"path":	"src/resource/database_schema/",
		"original_path":	"src/resource/database_schema/",
		"dir":	"src/resource/database_schema/"
	}, {
		"path":	"src/resource/database_schema/database_schema.c",
		"original_path":	"src/resource/database_schema/database_schema.c",
		"dir":	"src/resource/database_schema/",
		"full_name":	"database_schema.c",
		"name":	"database_schema",
		"extension":	"c",
		"hardware_sha256":	"443a23d36cf4d6193e83157d0ba53e86c43b61cbaca1272a6542b1f734830b89",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1245,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1245,
		"content_sha256":	"443a23d36cf4d6193e83157d0ba53e86c43b61cbaca1272a6542b1f734830b89",
		"is_binary":	false,
		"content":	"\nDtwDatabaseSchema *private_newDtwDtatabaseSchema(){\n    DtwDatabaseSchema *self = (DtwDatabaseSchema*) malloc(sizeof (DtwDatabaseSchema));\n    *self = (DtwDatabaseSchema){0};\n    self->value_name = DTW_SCHEMA_DEFAULT_VALUES_NAME;\n    self->index_name = DTW_SCHEMA_DEFAULT_INDEX_NAME;\n    self->sub_schemas = (struct DtwSchema **)malloc(0);\n    return  self;\n}\n\n\nDtwSchema * privateDtwDtatabaseSchema_get_sub_schema(DtwDatabaseSchema *self,const char *name){\n\n    for(int i = 0; i < self->size; i++){\n        DtwSchema  *current = self->sub_schemas[i];\n\n        if(strcmp(current->name,name) == 0){\n            return  current;\n        }\n\n    }\n    return NULL;\n}\n\nDtwSchema * DtwDtatabaseSchema_new_subSchema(DtwDatabaseSchema *self,const char *name){\n    DtwSchema *subSchema = private_newDtwSchema(name);\n    self->sub_schemas = ( DtwSchema **) realloc(self->sub_schemas, (self->size + 1) * sizeof( DtwSchema *));\n    self->sub_schemas[self->size] = subSchema;\n    self->size+=1;\n    return subSchema;\n}\n\n\n\nvoid private_new_DtwDtatabaseSchema_free(DtwDatabaseSchema *self){\n    for (int i = 0; i < self->size; i++) {\n        private_newDtwSchema_free((DtwSchema *) self->sub_schemas[i]);\n    }\n    free(self->sub_schemas);\n    free(self);\n}\n\n"
	}, {
		"path":	"src/resource/database_schema/database_schema.h",
		"original_path":	"src/resource/database_schema/database_schema.h",
		"dir":	"src/resource/database_schema/",
		"full_name":	"database_schema.h",
		"name":	"database_schema",
		"extension":	"h",
		"hardware_sha256":	"ce7aa436310792f59cdb8bd149eebb86c37273c4d1fabccda072f70322961020",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	567,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	567,
		"content_sha256":	"ce7aa436310792f59cdb8bd149eebb86c37273c4d1fabccda072f70322961020",
		"is_binary":	false,
		"content":	"\n\n#define DTW_SCHEMA_DEFAULT_VALUES_NAME \"value\"\n#define DTW_SCHEMA_DEFAULT_INDEX_NAME \"index\"\n\n\n\ntypedef struct DtwDatabaseSchema{\n\n    const char *value_name;\n    const char *index_name;\n    struct DtwSchema **sub_schemas;\n    int size;\n}DtwDatabaseSchema;\n\nDtwDatabaseSchema *private_newDtwDtatabaseSchema();\n\nDtwSchema * privateDtwDtatabaseSchema_get_sub_schema(DtwDatabaseSchema *self,const char *name);\n\nDtwSchema * DtwDtatabaseSchema_new_subSchema(DtwDatabaseSchema *self,const char *name);\n\nvoid private_new_DtwDtatabaseSchema_free(DtwDatabaseSchema *self);\n\n"
	}, {
		"path":	"src/resource/declaration.h",
		"original_path":	"src/resource/declaration.h",
		"dir":	"src/resource/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"39fad6856e606d51bd9ffdb786099ad07783a688f9b614403afb0eaf02f85af9",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	184,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	184,
		"content_sha256":	"39fad6856e606d51bd9ffdb786099ad07783a688f9b614403afb0eaf02f85af9",
		"is_binary":	false,
		"content":	"#include \"root_props/root_props.h\"\n#include \"schema/schema.h\"\n#include \"database_schema/database_schema.h\"\n#include \"resource/declaration.h\"\n#include \"resource_array/resource_array.h\"\n"
	}, {
		"path":	"src/resource/definition.c",
		"original_path":	"src/resource/definition.c",
		"dir":	"src/resource/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"c520af15ff40c4f043bce593c989c7e7851887c57d4ed9c4f7bd9bb78efca24f",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	182,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	182,
		"content_sha256":	"c520af15ff40c4f043bce593c989c7e7851887c57d4ed9c4f7bd9bb78efca24f",
		"is_binary":	false,
		"content":	"#include \"schema/schema.c\"\n#include \"database_schema/database_schema.c\"\n#include \"root_props/root_props.c\"\n#include \"resource/definition.c\"\n#include \"resource_array/resource_array.c\""
	}, {
		"path":	"src/resource/resource/",
		"original_path":	"src/resource/resource/",
		"dir":	"src/resource/resource/"
	}, {
		"path":	"src/resource/resource/constructors_and_desctructors/",
		"original_path":	"src/resource/resource/constructors_and_desctructors/",
		"dir":	"src/resource/resource/constructors_and_desctructors/"
	}, {
		"path":	"src/resource/resource/constructors_and_desctructors/constructors_and_destructors.c",
		"original_path":	"src/resource/resource/constructors_and_desctructors/constructors_and_destructors.c",
		"dir":	"src/resource/resource/constructors_and_desctructors/",
		"full_name":	"constructors_and_destructors.c",
		"name":	"constructors_and_destructors",
		"extension":	"c",
		"hardware_sha256":	"ffce0362f8d1c2fa89444b01328560ef269a172c3ca09f7cd144e15cf14bf5dd",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	5339,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	5339,
		"content_sha256":	"ffce0362f8d1c2fa89444b01328560ef269a172c3ca09f7cd144e15cf14bf5dd",
		"is_binary":	false,
		"content":	"\n\nDtwResource *new_DtwResource(const char *path){\n    DtwResource *self = (DtwResource*) malloc(sizeof (DtwResource));\n    *self =(DtwResource){0};\n\n    self->path = strdup(path);\n    self->name = strdup(path);\n    self->sub_resources = newDtwResourceArray();\n    self->allow_transaction = true;\n    self->use_locker_on_unique_values = true;\n    self->cache_sub_resources = true;\n    self->root_props = private_newDtwResourceRootProps();\n\n    return self;\n}   \n\nDtwResource * DtwResource_sub_resource(DtwResource *self,const  char *format, ...){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n\n\n    privateDtwResource_ensure_its_possible_to_sub_resource(self);\n\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n\n\n    if(self->were_renamed){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_RENAMED_RESOURCE_CANNOT_HAVE_SONS,\n                \"you cannot create a sub resurce from a renamed resource\",\n                self->name\n        );\n        return NULL;\n    }\n\n\n    va_list args;\n    va_start(args, format);\n    char *name = private_dtw_format_vaarg(format,args);\n    va_end(args);\n\n\n    DtwResource * Already_Exist = DtwResourceArray_get_by_name((DtwResourceArray*)self->sub_resources,name);\n    if(Already_Exist){\n        free(name);\n        return Already_Exist;\n    }\n\n    DtwResource *new_element = (DtwResource*) malloc(sizeof (DtwResource));\n    *new_element =(DtwResource){0};\n\n    if(self->schema_type == PRIVATE_DTW_SCHEMA_VALUE){\n        new_element->schema_type = PRIVATE_DTW_SCHEMA_ELEMENT;\n    }\n    if(self->schema_type ==PRIVATE_DTW_SCHEMA_ELEMENT){\n        new_element->schema_type = PRIVATE_DTW_SCHEMA_ELEMENT_PROP;\n    }\n\n    if(self->schema_type == PRIVATE_DTW_SCHEMA_INDEX){\n        new_element->schema_type = PRIVATE_DTW_SCHEMA_PK_FOLDER;\n    }\n    if(self->schema_type == PRIVATE_DTW_SCHEMA_PK_FOLDER){\n        new_element->schema_type = PRIVATE_DTW_SCHEMA_PK_VALUE;\n    }\n\n\n\n    new_element->allow_transaction = self->allow_transaction;\n    new_element->use_locker_on_unique_values = self->use_locker_on_unique_values;\n    new_element->root_props = self->root_props;\n    //copied elements\n\n    new_element->mother = self;\n    new_element->path = dtw_concat_path(self->path, name);\n    new_element->name = strdup(name);\n\n\n    new_element->cache_sub_resources = self->cache_sub_resources;\n    new_element->sub_resources = newDtwResourceArray();\n\n    if(self->datatabase_schema && self->root_props->is_writing_schema == false){\n        new_element->attached_schema = privateDtwDtatabaseSchema_get_sub_schema(self->datatabase_schema, name);\n    }\n\n    if(self->schema_type == PRIVATE_DTW_SCHEMA_ELEMENT){\n        DtwResource * ancestor = self->mother->mother;\n        new_element->attached_schema = privateDtwSchema_get_sub_schema(ancestor->attached_schema, name);\n    }\n\n\n\n    if(new_element->attached_schema){\n        self->root_props->is_writing_schema = true;\n        new_element->schema_type = PRIVATE_DTW_SCHEMA_ROOT;\n        new_element->values_resource = DtwResource_sub_resource(new_element,DTW_SCHEMA_DEFAULT_VALUES_NAME);\n        new_element->values_resource->schema_type = PRIVATE_DTW_SCHEMA_VALUE;\n        new_element->index_resource = DtwResource_sub_resource(new_element,DTW_SCHEMA_DEFAULT_INDEX_NAME);\n        new_element->index_resource->schema_type = PRIVATE_DTW_SCHEMA_INDEX;\n    }\n\n\n\n    if(self->cache_sub_resources){\n        DtwResourceArray_append((DtwResourceArray*)self->sub_resources,new_element);\n    }\n\n\n    free(name);\n    return new_element;\n\n}\nDtwResource * DtwResource_sub_resource_ensuring_not_exist(DtwResource *self,const  char *format, ...){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    va_list args;\n    va_start(args, format);\n    char *name = private_dtw_format_vaarg(format,args);\n    va_end(args);\n;\n\n    DtwResource *possible_emptiy  = DtwResourceArray_get_by_name(\n            (DtwResourceArray*)self->sub_resources,\n            name\n    );\n    if(possible_emptiy){\n        return NULL;\n    }\n\n    bool old_cache_value = self->cache_sub_resources;\n    self->cache_sub_resources = false;\n    possible_emptiy = DtwResource_sub_resource(self,\"%s\",name);\n    possible_emptiy->cache_sub_resources = old_cache_value;\n    self->cache_sub_resources = old_cache_value;\n    if(self->use_locker_on_unique_values){\n        DtwResource_lock(possible_emptiy);\n    }\n\n    int type = DtwResource_type(possible_emptiy);\n\n    if(type == DTW_NOT_FOUND){\n\n\n            if(self->cache_sub_resources){\n                DtwResourceArray_append((DtwResourceArray*)self->sub_resources,possible_emptiy);\n            }\n            free(name);\n            return possible_emptiy;\n    }\n    DtwResource_unlock(possible_emptiy);\n    DtwResource_free(possible_emptiy);\n    free(name);\n    return  NULL;\n\n}\n\nvoid DtwResource_free(DtwResource *self){\n    if(!self){\n        return;\n    }\n\n    bool is_root = self->mother == NULL;\n    if(is_root){\n        privateDtwResourceRootProps_free(self->root_props);\n    }\n\n    if(self->datatabase_schema){\n        private_new_DtwDtatabaseSchema_free(self->datatabase_schema);\n    }\n\n    DtwResourceArray_free((DtwResourceArray*)self->sub_resources);\n\n\n\n    if(self->value_any){\n        free(self->value_any);\n    }\n\n\n    free(self->path);\n    free(self->name);\n    free(self);\n}"
	}, {
		"path":	"src/resource/resource/constructors_and_desctructors/constructors_and_destructors.h",
		"original_path":	"src/resource/resource/constructors_and_desctructors/constructors_and_destructors.h",
		"dir":	"src/resource/resource/constructors_and_desctructors/",
		"full_name":	"constructors_and_destructors.h",
		"name":	"constructors_and_destructors",
		"extension":	"h",
		"hardware_sha256":	"7447d4b54885622b1bfb81ff378a553dd49ce4ca56e89e0a768f5a897f441219",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	281,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	281,
		"content_sha256":	"7447d4b54885622b1bfb81ff378a553dd49ce4ca56e89e0a768f5a897f441219",
		"is_binary":	false,
		"content":	"\n\nDtwResource *new_DtwResource(const char *path);\n\nDtwResource * DtwResource_sub_resource(DtwResource *self,const  char *format, ...);\n\nDtwResource * DtwResource_sub_resource_ensuring_not_exist(DtwResource *self,const  char *format, ...);\n\nvoid DtwResource_free(DtwResource *self);"
	}, {
		"path":	"src/resource/resource/custom_constructors/",
		"original_path":	"src/resource/resource/custom_constructors/",
		"dir":	"src/resource/resource/custom_constructors/"
	}, {
		"path":	"src/resource/resource/custom_constructors/custom_constructors.c",
		"original_path":	"src/resource/resource/custom_constructors/custom_constructors.c",
		"dir":	"src/resource/resource/custom_constructors/",
		"full_name":	"custom_constructors.c",
		"name":	"custom_constructors",
		"extension":	"c",
		"hardware_sha256":	"92201655cee230e665d0ba8b06fc4db947aaa9605e1b2024279e7056de86467f",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	3618,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	3618,
		"content_sha256":	"92201655cee230e665d0ba8b06fc4db947aaa9605e1b2024279e7056de86467f",
		"is_binary":	false,
		"content":	"\n\nDtwResource * DtwResource_sub_resource_next(DtwResource *self, const char *end_path){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    long  size = dtw_get_total_itens_of_dir(self->path);\n    if(size < 0){\n        size = 0;\n    }\n    while(true){\n\n        char *path = NULL;\n        if(end_path){\n            path = private_dtw_realoc_formatting(path,\"%ld%s\",size,end_path);\n        }\n\n        else{\n            path = private_dtw_realoc_formatting(path,\"%ld\",size);\n        }\n\n        DtwResource *new_element = DtwResource_sub_resource_ensuring_not_exist(self,\"%s\",path);\n        free(path);\n        if(DtwResource_error(self)){\n            return NULL;\n        }\n\n        if(new_element){\n            return new_element;\n        }\n        size = size+1;\n    }\n}\n\n\nDtwResource * DtwResource_sub_resource_now(DtwResource *self, const char *end_path){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    bool empty_already_exist = false;\n\n\n    while(true){\n\n        long now = dtw_get_time();\n        char *time = dtw_convert_unix_time_to_string(now);\n        char *path = NULL;\n\n        if(empty_already_exist){\n            char *token = DtwRandonizer_generate_token(self->root_props->randonizer,10);\n            path = private_dtw_realoc_formatting(path,\"%s--%s\",time,token);\n            free(token);\n        }\n        else{\n            path = private_dtw_realoc_formatting(path,\"%s\",time);\n        }\n\n        free(time);\n\n        if(end_path){\n            path = private_dtw_realoc_formatting(path,\"%s%s\",path,end_path);\n        }\n\n        DtwResource *new_element = DtwResource_sub_resource_ensuring_not_exist(self,\"%s\",path);\n\n        free(path);\n\n\n        if(DtwResource_error(self)){\n            return NULL;\n        }\n        if(new_element){\n            return new_element;\n        }\n        empty_already_exist = true;\n    }\n}\n\n\nDtwResource * DtwResource_sub_resource_now_in_unix(DtwResource *self, const char *end_path){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    bool empty_already_exist = false;\n\n    while(true){\n\n        long now = dtw_get_time();\n        char *path = NULL;\n\n        if(empty_already_exist){\n            char *token = DtwRandonizer_generate_token(self->root_props->randonizer,10);\n            path = private_dtw_realoc_formatting(path,\"%ld--%s\",now,token);\n            free(token);\n        }\n        else{\n            path = private_dtw_realoc_formatting(path,\"%ld\",now);\n        }\n\n        if(end_path){\n            path = private_dtw_realoc_formatting(path,\"%s%s\",path,end_path);\n        }\n\n        DtwResource *new_element = DtwResource_sub_resource_ensuring_not_exist(self,\"%s\",path);\n\n        free(path);\n\n\n        if(DtwResource_error(self)){\n            return NULL;\n        }\n        if(new_element){\n            return new_element;\n        }\n        empty_already_exist = true;\n    }\n}\n\nDtwResource * DtwResource_sub_resource_random(DtwResource *self, const char *end_path){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    while(true){\n\n        char *path = NULL;\n        char *token = DtwRandonizer_generate_token(self->root_props->randonizer,15);\n        path = private_dtw_realoc_formatting(path,\"%s\",token);\n        free(token);\n\n        if(end_path){\n            path = private_dtw_realoc_formatting(path,\"%s%s\",path,end_path);\n        }\n\n        DtwResource *new_element = DtwResource_sub_resource_ensuring_not_exist(self,\"%s\",path);\n        free(path);\n        if(DtwResource_error(self)){\n            return NULL;\n        }\n\n        if(new_element){\n            return new_element;\n        }\n\n    }\n}\n\n\n"
	}, {
		"path":	"src/resource/resource/custom_constructors/custom_constructors.h",
		"original_path":	"src/resource/resource/custom_constructors/custom_constructors.h",
		"dir":	"src/resource/resource/custom_constructors/",
		"full_name":	"custom_constructors.h",
		"name":	"custom_constructors",
		"extension":	"h",
		"hardware_sha256":	"73f151169ea6b0c9aa4b714dc94558e7398d7e0762972bbfd1767c865d92e639",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	361,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	361,
		"content_sha256":	"73f151169ea6b0c9aa4b714dc94558e7398d7e0762972bbfd1767c865d92e639",
		"is_binary":	false,
		"content":	"\n\nDtwResource * DtwResource_sub_resource_next(DtwResource *self, const char *end_path);\n\n\nDtwResource * DtwResource_sub_resource_now(DtwResource *self, const char *end_path);\n\nDtwResource * DtwResource_sub_resource_now_in_unix(DtwResource *self, const char *end_path);\n\nDtwResource * DtwResource_sub_resource_random(DtwResource *self, const char *end_path);\n\n\n\n"
	}, {
		"path":	"src/resource/resource/declaration.h",
		"original_path":	"src/resource/resource/declaration.h",
		"dir":	"src/resource/resource/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"e5131c6c6d3da5415022868565334bd6c4e112d963f64ed76a5e6a8b3b802cb8",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	400,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	400,
		"content_sha256":	"e5131c6c6d3da5415022868565334bd6c4e112d963f64ed76a5e6a8b3b802cb8",
		"is_binary":	false,
		"content":	"#include \"resource.h\"\n#include \"constructors_and_desctructors/constructors_and_destructors.h\"\n#include \"custom_constructors/custom_constructors.h\"\n#include \"destroy/destroy.h\"\n#include \"extras/extras.h\"\n#include \"getters/getters.h\"\n#include \"loaders_and_unloaders/loaders_and_unloaders.h\"\n#include \"schema/schema.h\"\n#include \"setters/setters.h\"\n#include \"sub_resource_setters/sub_resource_setters.h\"\n"
	}, {
		"path":	"src/resource/resource/definition.c",
		"original_path":	"src/resource/resource/definition.c",
		"dir":	"src/resource/resource/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"cfc3df790720b923e8ccdd62a6071ac30474841760cf4b12038796b603813b33",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	378,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	378,
		"content_sha256":	"cfc3df790720b923e8ccdd62a6071ac30474841760cf4b12038796b603813b33",
		"is_binary":	false,
		"content":	"#include \"constructors_and_desctructors/constructors_and_destructors.c\"\n#include \"custom_constructors/custom_constructors.c\"\n#include \"destroy/destroy.c\"\n#include \"extras/extras.c\"\n#include \"getters/getters.c\"\n#include \"loaders_and_unloaders/loaders_and_unloaders.c\"\n#include \"schema/schema.c\"\n#include \"setters/setters.c\"\n#include \"sub_resource_setters/sub_resource_setters.c\"\n"
	}, {
		"path":	"src/resource/resource/destroy/",
		"original_path":	"src/resource/resource/destroy/",
		"dir":	"src/resource/resource/destroy/"
	}, {
		"path":	"src/resource/resource/destroy/destroy.c",
		"original_path":	"src/resource/resource/destroy/destroy.c",
		"dir":	"src/resource/resource/destroy/",
		"full_name":	"destroy.c",
		"name":	"destroy",
		"extension":	"c",
		"hardware_sha256":	"009d74206c304840def6a604c2cf9a0f0a61f17c67ec25e444b24c2e3e28af5d",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2939,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2939,
		"content_sha256":	"009d74206c304840def6a604c2cf9a0f0a61f17c67ec25e444b24c2e3e28af5d",
		"is_binary":	false,
		"content":	"\nvoid private_DtwResurce_destroy_primary_key(DtwResource *self) {\n\n\n    if (!DtwResource_is_file(self)) {\n        return;\n    }\n\n    DtwResource *root = self->mother->mother->mother;\n    DtwResource *pk_index_folder = DtwResource_sub_resource(root->index_resource, \"%s\", self->name);\n    long size;\n    bool is_binary;\n    unsigned char *possible_pk_value = DtwResource_get_any(self, &size, &is_binary);\n    char *pk_sha = dtw_generate_sha_from_any(possible_pk_value, size);\n\n    DtwResource *pk_index_value = DtwResource_sub_resource(pk_index_folder, \"%s\", pk_sha);\n\n    if(DtwResource_error(self)){\n        return;\n    }\n\n    free(pk_sha);\n    if (self->allow_transaction) {\n        DtwTransaction_delete_any(self->root_props->transaction, pk_index_value->path);\n    } else {\n        dtw_remove_any(pk_index_value->path);\n    }\n\n\n}\nvoid private_DtwResource_destroy_all_primary_keys(DtwResource *self){\n    DtwSchema * schema = (DtwSchema*)self->mother->mother->attached_schema;\n    for(int i = 0; i < schema->primary_keys->size; i++){\n        char *current_pk = schema->primary_keys->strings[i];\n        DtwResource *son = DtwResource_sub_resource(self,\"%s\",current_pk);\n        private_DtwResurce_destroy_primary_key(son);\n\n        if(DtwResource_error(self)){\n            return;\n        }\n\n    }\n}\nvoid DtwResource_destroy(DtwResource *self){\n    if(DtwResource_error(self)){\n        return;\n    }\n\n\n    if(self->schema_type == PRIVATE_DTW_SCHEMA_ELEMENT){\n        self->root_props->is_writing_schema = true;\n        private_DtwResource_destroy_all_primary_keys(self);\n        self->root_props->is_writing_schema =false;\n    }\n\n    if(private_DtwResource_its_a_pk(self)){\n        self->root_props->is_writing_schema = true;\n        private_DtwResurce_destroy_primary_key(self);\n        self->root_props->is_writing_schema =false;\n\n    }\n\n    if(DtwResource_error(self)){\n        return;\n    }\n\n    if(self->root_props->is_writing_schema == false){\n        if(\n                self->schema_type == PRIVATE_DTW_SCHEMA_VALUE\n                || self->schema_type == PRIVATE_DTW_SCHEMA_INDEX\n                || self->schema_type == PRIVATE_DTW_SCHEMA_PK_FOLDER\n                || self->schema_type == PRIVATE_DTW_SCHEMA_PK_VALUE\n        ){\n            private_DtwResource_raise_error(\n                    self,\n                    DTW_RESOURCE_ONLY_ROOT_SCHEMA_CANN_MODIFY_SCHEMA_PROPS,\n                    \"you cannot delete a internal schema part\"\n            );\n        }\n    }\n\n    if(DtwResource_error(self)){\n        return;\n    }\n\n\n    if(self->allow_transaction){\n        DtwTransaction_delete_any(self->root_props->transaction,self->path);\n    }\n    else{\n        dtw_remove_any(self->path);\n    }\n\n}\n\nvoid DtwResource_destroy_sub_resource(DtwResource *self, const char *key){\n    if(DtwResource_error(self)){\n        return;\n    }\n    DtwResource *son = DtwResource_sub_resource(self, \"%s\",key);\n    DtwResource_destroy(son);\n}\n\n"
	}, {
		"path":	"src/resource/resource/destroy/destroy.h",
		"original_path":	"src/resource/resource/destroy/destroy.h",
		"dir":	"src/resource/resource/destroy/",
		"full_name":	"destroy.h",
		"name":	"destroy",
		"extension":	"h",
		"hardware_sha256":	"441e6a850875e9cf5f10b3c73c8c0828481aced53654654b55168bd8a3bd5af0",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	261,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	261,
		"content_sha256":	"441e6a850875e9cf5f10b3c73c8c0828481aced53654654b55168bd8a3bd5af0",
		"is_binary":	false,
		"content":	"\nvoid private_DtwResurce_destroy_primary_key(DtwResource *self);\n\n\nvoid private_DtwResource_destroy_all_primary_keys(DtwResource *self);\n\nvoid DtwResource_destroy(DtwResource *self);\n\n\nvoid DtwResource_destroy_sub_resource(DtwResource *self, const char *key);\n\n"
	}, {
		"path":	"src/resource/resource/extras/",
		"original_path":	"src/resource/resource/extras/",
		"dir":	"src/resource/resource/extras/"
	}, {
		"path":	"src/resource/resource/extras/extras.c",
		"original_path":	"src/resource/resource/extras/extras.c",
		"dir":	"src/resource/resource/extras/",
		"full_name":	"extras.c",
		"name":	"extras",
		"extension":	"c",
		"hardware_sha256":	"aa8524c23c898514c07d5f993a4c02440a3ef24b55aa909320d5957d2510ecc5",
		"last_modification_in_unix":	1719252176,
		"hardware_content_size":	6372,
		"last_modification":	"2024-06-24 15:02:56",
		"content_size":	6372,
		"content_sha256":	"aa8524c23c898514c07d5f993a4c02440a3ef24b55aa909320d5957d2510ecc5",
		"is_binary":	false,
		"content":	"\n\n\nbool DtwResource_error(DtwResource *self){\n    if(self==NULL){\n        return true;\n    }\n    if(DtwResource_get_error_code(self) == DTW_RESOURCE_OK){\n        return false;\n    }\n    return true;\n}\n\n\n\nint DtwResource_get_error_code(DtwResource *self){\n    if(self == NULL){\n        return DTW_RESOURCE_ELEMENT_IS_NULL;\n    }\n    return self->root_props->error_code;\n}\nchar * DtwResource_get_error_path(DtwResource *self){\n    if(self == NULL){\n        return NULL;\n    }\n\n    if(self->root_props == NULL){\n        return NULL;\n    }\n    return self->root_props->error_path;\n}\n\n\nchar * DtwResource_get_error_message(DtwResource *self){\n\n    if(self== NULL){\n        return (char*)\"element its null\";\n    }\n\n    return self->root_props->error_message;\n}\nvoid  DtwResource_clear_errors(DtwResource *self){\n    if(!DtwResource_error(self)){\n        return;\n    }\n    free(self->root_props->error_message);\n    self->root_props->error_message = NULL;\n    free(self->root_props->error_path);\n    self->root_props->error_path = NULL;\n    self->root_props->error_code = DTW_RESOURCE_OK;\n\n}\n\n\nvoid  private_DtwResource_raise_error(DtwResource *self, int error_code, const char *format,...){\n\n    va_list args;\n    va_start(args, format);\n    char *error_message = private_dtw_format_vaarg(format,args);\n    va_end(args);\n\n    self->root_props->error_code = error_code;\n    self->root_props->error_path = strdup(self->path);\n    self->root_props->error_message = dtw_replace_string(error_message,\"#path#\",self->path);\n    free(error_message);\n}\n\nvoid DtwResource_rename(DtwResource *self,const char *new_name){\n    if(DtwResource_error(self)){\n        return;\n    }\n    if(private_DtwResource_its_a_pk(self)){\n        private_DtwResource_raise_error(\n                self,\n                DTW_IMPOSSIBLE_TO_RENAME_A_PRIMARY_KEY,\n                \"primary key %s cannot be renamed\",\n                self->name\n        );\n        return;\n    }\n    DtwResourceArray *sons =(DtwResourceArray*)self->sub_resources;\n    if(sons->size > 0){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_RENAMED_RESOURCE_CANNOT_HAVE_SONS,\n                \"you cannot rename a resource with active sons\",\n                self->name\n        );\n        return;\n    }\n\n    self->were_renamed = true;\n    char *old_path = strdup(self->path);\n    free(self->path);\n    free(self->name);\n\n    if(self->mother){\n        self->path  = dtw_concat_path(self->mother->path, new_name);\n    }\n    if(self->mother==NULL){\n        self->path = strdup(new_name);\n    }\n\n    self->name = strdup(new_name);\n\n    if(self->allow_transaction){\n        DtwTransaction_move_any(self->root_props->transaction,old_path,self->path);\n    }\n    else{\n        dtw_move_any(old_path,self->path,DTW_NOT_MERGE);\n    }\n\n    free(old_path);\n\n}\n\nvoid DtwResource_rename_sub_resource(DtwResource *self,const char *old_name,const  char *new_name){\n    if(DtwResource_error(self)){\n        return;\n    }\n    DtwResource *created = DtwResource_sub_resource(self,\"name\");\n    DtwResource_rename(created,new_name);\n}\n\nint DtwResource_lock(DtwResource *self){\n    if(DtwResource_error(self)){\n        return -1;\n    }\n    return DtwLocker_lock(self->root_props->locker, self->path);\n}\n\nvoid DtwResource_unlock(DtwResource *self){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    DtwLocker_unlock(self->root_props->locker, self->path);\n    \n}\n\n\n\nvoid DtwResource_commit(DtwResource *self){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    DtwTransaction_commit(self->root_props->transaction,NULL);\n}\n\nlong DtwResource_size(DtwResource *self){\n    if(DtwResource_error(self)){\n        return -1;\n    }\n    return dtw_get_total_itens_of_dir(self->path);\n}\n\n\n\nDtwStringArray *DtwResource_list_names(DtwResource *self){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    return dtw_list_all(self->path,DTW_NOT_CONCAT_PATH);\n}\n\nint DtwResource_type(DtwResource *self){\n    if(DtwResource_error(self)){\n        return -1;\n    }\n    DtwResource_load_if_not_loaded(self);\n\n    if(self->value_any == NULL){\n        return dtw_entity_type(self->path);\n    }\n\n    if(self->value_size == 0){\n        return DTW_COMPLEX_STRING_TYPE;\n    }\n    if(self->is_binary){\n        return DTW_COMPLEX_BINARY;\n    }\n\n    char *data_in_string = DtwResource_get_string(self);\n\n    if(\n            strcmp(data_in_string,\"t\") == 0 || strcmp(data_in_string,\"true\") == 0  ||\n                    strcmp(data_in_string,\"f\") == 0 || strcmp(data_in_string,\"false\") == 0\n\n    ){\n        return DTW_COMPLEX_BOOL_TYPE;\n    }\n\n\n    double data_double;\n    int result = sscanf(data_in_string,\"%lf\",&data_double);\n    if(result == 0){\n        return DTW_COMPLEX_STRING_TYPE;\n\n    }\n\n\n    for(int i = 0; i < self->value_size; i++){\n        char current = data_in_string[i];\n        if(current == '.'){\n            return  DTW_COMPLEX_DOUBLE_TYPE;\n        }\n    }\n    return  DTW_COMPLEX_LONG_TYPE;\n\n}\nbool DtwResource_is_file(DtwResource *self){\n    if(DtwResource_error(self)){\n        return -1;\n    }\n    DtwResource_load_if_not_loaded(self);\n\n    if(self->value_any){\n        return true;\n    }\n    return  false;\n\n}\n\nconst char * DtwResource_type_in_str(DtwResource *self){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n     return dtw_convert_entity(DtwResource_type(self));\n}\n\nvoid DtwResource_represent(DtwResource *self){\n    if(DtwResource_error(self)){\n        return;\n    }\n\n    if(DtwResource_error(self)){\n        printf(\"error code: %d\\n\", DtwResource_get_error_code(self));\n        printf(\"error message: %s\\n\", DtwResource_get_error_message(self));\n        return ;\n    }\n\n    printf(\"path: %s\\n\", self->path);\n    printf(\"name: %s\\n\",self->name);\n    if(self->loaded){\n        printf(\"type: %s\\n\",DtwResource_type_in_str(self));\n        int type = DtwResource_type(self);\n        if(type == DTW_COMPLEX_STRING_TYPE){\n            printf(\"value: %s\\n\", DtwResource_get_string(self));\n        }\n        if(type == DTW_COMPLEX_LONG_TYPE){\n            printf(\"value: %ld\\n\", DtwResource_get_long(self));\n        }\n\n        if(type == DTW_COMPLEX_DOUBLE_TYPE){\n            printf(\"value: %lf\\n\", DtwResource_get_double(self));\n        }\n\n        if(type == DTW_COMPLEX_BOOL_TYPE){\n            printf(\"value: %s\\n\",DtwResource_get_bool(self) ?\"true\": \"false\");\n        }\n\n    }\n\n\n}\n\n"
	}, {
		"path":	"src/resource/resource/extras/extras.h",
		"original_path":	"src/resource/resource/extras/extras.h",
		"dir":	"src/resource/resource/extras/",
		"full_name":	"extras.h",
		"name":	"extras",
		"extension":	"h",
		"hardware_sha256":	"5a0c466481a5400115eed2d03541f719f321879842dc302d345c529914b4d8b1",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	964,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	964,
		"content_sha256":	"5a0c466481a5400115eed2d03541f719f321879842dc302d345c529914b4d8b1",
		"is_binary":	false,
		"content":	"\n\n\nbool DtwResource_error(DtwResource *self);\n\nint DtwResource_get_error_code(DtwResource *self);\n\n\nchar * DtwResource_get_error_message(DtwResource *self);\n\nchar * DtwResource_get_error_path(DtwResource *self);\n\nvoid  DtwResource_clear_errors(DtwResource *self);\n\n\nvoid  private_DtwResource_raise_error(DtwResource *self, int error_code, const char *format,...);\n\nvoid DtwResource_rename(DtwResource *self,const char *new_name);\n\nvoid DtwResource_rename_sub_resource(DtwResource *self,const char *old_name,const  char *new_name);\n\nint DtwResource_lock(DtwResource *self);\n\nvoid DtwResource_unlock(DtwResource *self);\n\n\nvoid DtwResource_commit(DtwResource *self);\n\nlong DtwResource_size(DtwResource *self);\n\n\n\nDtwStringArray *DtwResource_list_names(DtwResource *self);\n\nint DtwResource_type(DtwResource *self);\n\nbool DtwResource_is_file(DtwResource *self);\n\n\nconst char * DtwResource_type_in_str(DtwResource *self);\n\nvoid DtwResource_represent(DtwResource *self);\n"
	}, {
		"path":	"src/resource/resource/getters/",
		"original_path":	"src/resource/resource/getters/",
		"dir":	"src/resource/resource/getters/"
	}, {
		"path":	"src/resource/resource/getters/getters.c",
		"original_path":	"src/resource/resource/getters/getters.c",
		"dir":	"src/resource/resource/getters/",
		"full_name":	"getters.c",
		"name":	"getters",
		"extension":	"c",
		"hardware_sha256":	"d70a45692b4c0205b71a4805e6fe6a977375475a6982af750c47ae7cb3dfc803",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	5289,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	5289,
		"content_sha256":	"d70a45692b4c0205b71a4805e6fe6a977375475a6982af750c47ae7cb3dfc803",
		"is_binary":	false,
		"content":	"\nunsigned char *DtwResource_get_any(DtwResource *self, long *size, bool *is_binary){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    DtwResource_load_if_not_loaded(self);\n    *size = self->value_size;\n    *is_binary = self->is_binary;\n\n    if(!self->value_any){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ELEMENT_NOT_EXIST,\n                \"element at #path# not exist\"\n                );\n        return NULL;\n    }\n\n    return self->value_any;\n\n\n}\n\nunsigned char *DtwResource_get_any_from_sub_resource(DtwResource *self, long *size, bool *is_binary,const char *format,...){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    va_list args;\n    va_start(args, format);\n    char *name = private_dtw_format_vaarg(format,args);\n    va_end(args);\n\n    DtwResource *element = DtwResource_sub_resource(self,\"%s\",name);\n    free(name);\n    return DtwResource_get_any(element,size,is_binary);\n\n}\n\nunsigned char *DtwResource_get_binary(DtwResource *self, long *size){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    bool is_binary;\n\n    return DtwResource_get_any(self,size,&is_binary);\n}\n\nunsigned char *DtwResource_get_binary_from_sub_resource(DtwResource *self, long *size,const char *format,...){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n\n    va_list args;\n    va_start(args, format);\n    char *name = private_dtw_format_vaarg(format,args);\n    va_end(args);\n\n    DtwResource *element = DtwResource_sub_resource(self,\"%s\",name);\n    free(name);\n    return DtwResource_get_binary(element,size);\n}\n\n\nchar *DtwResource_get_string(DtwResource *self){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n\n    long size;\n    bool is_binary;\n    char *result =  (char *)DtwResource_get_any(self,&size,&is_binary);\n\n    if(is_binary){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ELEMENT_NOT_STRING,\n                \"element at #path# its an binary\"\n        );\n        return NULL;\n    }\n\n    return result;\n}\n\n\nchar *DtwResource_get_string_from_sub_resource(DtwResource *self,const char *format,...){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n\n    va_list args;\n    va_start(args, format);\n    char *name = private_dtw_format_vaarg(format,args);\n    va_end(args);\n\n\n    DtwResource *element = DtwResource_sub_resource(self,\"%s\",name);\n    free(name);\n    return DtwResource_get_string(element);\n}\n\n\nlong DtwResource_get_long(DtwResource *self){\n\n    if(DtwResource_error(self)){\n        return -1;\n    }\n\n    char *element = DtwResource_get_string(self);\n\n    if(DtwResource_error(self)){\n        return -1;\n    }\n\n    long value;\n    int result = sscanf(element,\"%ld\",&value);\n    if(result == 0){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ELEMENT_NOT_LONG,\n                \"element at #path# its not long\"\n        );\n        return -1;\n    }\n    return value;\n}\n\n\nlong DtwResource_get_long_from_sub_resource(DtwResource *self,const char *format,...){\n    if(DtwResource_error(self)){\n        return -1;\n    }\n    va_list args;\n    va_start(args, format);\n    char *name = private_dtw_format_vaarg(format,args);\n    va_end(args);\n\n\n    DtwResource *element = DtwResource_sub_resource(self,\"%s\",name);\n    free(name);\n    return DtwResource_get_long(element);\n}\n\n\ndouble DtwResource_get_double(DtwResource *self){\n    if(DtwResource_error(self)){\n        return -1;\n    }\n\n    char *element = DtwResource_get_string(self);\n    if(DtwResource_error(self)){\n        return -1;\n    }\n\n    double value;\n    int result = sscanf(element,\"%lf\",&value);\n    if(result == 0){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ELEMENT_NOT_DOUBLE,\n                \"element at #path# its not long\"\n        );\n        return-1;\n    }\n    return value;\n}\n\ndouble DtwResource_get_double_from_sub_resource(DtwResource *self,const char *format,...){\n\n    if(DtwResource_error(self)){\n        return -1;\n    }\n\n    va_list args;\n    va_start(args, format);\n    char *name = private_dtw_format_vaarg(format,args);\n    va_end(args);\n\n\n    DtwResource *element = DtwResource_sub_resource(self,\"%s\",name);\n    free(name);\n    return DtwResource_get_double(element);\n}\n\n\nbool DtwResource_get_bool(DtwResource *self){\n    if(DtwResource_error(self)){\n        return false;\n    }\n    char *element = DtwResource_get_string(self);\n    if(DtwResource_error(self)){\n        return false;\n    }\n\n    if(strcmp(element,\"true\") == 0 || strcmp(element,\"t\") == 0){\n        return true;\n    }\n    if(strcmp(element,\"false\") == 0 || strcmp(element,\"f\") == 0){\n        return false;\n    }\n\n    private_DtwResource_raise_error(\n            self,\n            DTW_RESOURCE_ELEMENT_NOT_BOOL,\n            \"element at #path# its not bool\"\n    );\n    return false;\n}\n\nbool DtwResource_get_bool_from_sub_resource(DtwResource *self,const char *format,...){\n    if(DtwResource_error(self)){\n        return false;\n    }\n\n    va_list args;\n    va_start(args, format);\n    char *name = private_dtw_format_vaarg(format,args);\n    va_end(args);\n\n    DtwResource *element = DtwResource_sub_resource(self,\"%s\",name);\n    free(name);\n    return DtwResource_get_bool(element);\n}"
	}, {
		"path":	"src/resource/resource/getters/getters.h",
		"original_path":	"src/resource/resource/getters/getters.h",
		"dir":	"src/resource/resource/getters/",
		"full_name":	"getters.h",
		"name":	"getters",
		"extension":	"h",
		"hardware_sha256":	"8821db734e64c618cb147c51eb7c2368b40c1c0839f07cd3e3d3b785311e0d9a",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	953,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	953,
		"content_sha256":	"8821db734e64c618cb147c51eb7c2368b40c1c0839f07cd3e3d3b785311e0d9a",
		"is_binary":	false,
		"content":	"\nunsigned char *DtwResource_get_any(DtwResource *self, long *size, bool *is_binary);\n\n\nunsigned char *DtwResource_get_any_from_sub_resource(DtwResource *self, long *size, bool *is_binary,const char *format,...);\n\nunsigned char *DtwResource_get_binary(DtwResource *self, long *size);\n\nunsigned char *DtwResource_get_binary_from_sub_resource(DtwResource *self, long *size,const char *format,...);\n\nchar *DtwResource_get_string(DtwResource *self);\n\nchar *DtwResource_get_string_from_sub_resource(DtwResource *self,const char *format,...);\n\n\nlong DtwResource_get_long(DtwResource *self);\n\n\n\nlong DtwResource_get_long_from_sub_resource(DtwResource *self,const char *format,...);\n\n\ndouble DtwResource_get_double(DtwResource *self);\n\ndouble DtwResource_get_double_from_sub_resource(DtwResource *self,const char *format,...);\n\nbool DtwResource_get_bool(DtwResource *self);\n\nbool DtwResource_get_bool_from_sub_resource(DtwResource *self,const char *format,...);\n"
	}, {
		"path":	"src/resource/resource/loaders_and_unloaders/",
		"original_path":	"src/resource/resource/loaders_and_unloaders/",
		"dir":	"src/resource/resource/loaders_and_unloaders/"
	}, {
		"path":	"src/resource/resource/loaders_and_unloaders/loaders_and_unloaders.c",
		"original_path":	"src/resource/resource/loaders_and_unloaders/loaders_and_unloaders.c",
		"dir":	"src/resource/resource/loaders_and_unloaders/",
		"full_name":	"loaders_and_unloaders.c",
		"name":	"loaders_and_unloaders",
		"extension":	"c",
		"hardware_sha256":	"fbe43050254978425605a99d876461c66a73eff55d51dd2ee5d76677db08f7a9",
		"last_modification_in_unix":	1719256152,
		"hardware_content_size":	736,
		"last_modification":	"2024-06-24 16:09:12",
		"content_size":	736,
		"content_sha256":	"fbe43050254978425605a99d876461c66a73eff55d51dd2ee5d76677db08f7a9",
		"is_binary":	false,
		"content":	"\n\nvoid DtwResource_unload(DtwResource *self){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    if(self->loaded == false){\n        return;\n    }\n    if(self->value_any){\n        free(self->value_any);\n    }\n\n    self->value_any = NULL;\n    self->is_binary = false;\n    self->value_size = 0;\n}\n\nvoid DtwResource_load(DtwResource *self){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    DtwResource_unload(self);\n    self->value_any = dtw_load_any_content(self->path,&self->value_size,&self->is_binary);\n\n    self->loaded = true;\n\n}\nvoid DtwResource_load_if_not_loaded(DtwResource *self){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    if(self->loaded == false){\n        DtwResource_load(self);\n    }\n}\n\n"
	}, {
		"path":	"src/resource/resource/loaders_and_unloaders/loaders_and_unloaders.h",
		"original_path":	"src/resource/resource/loaders_and_unloaders/loaders_and_unloaders.h",
		"dir":	"src/resource/resource/loaders_and_unloaders/",
		"full_name":	"loaders_and_unloaders.h",
		"name":	"loaders_and_unloaders",
		"extension":	"h",
		"hardware_sha256":	"c09a4d9e521dd73e01b670aa7b6521d4b61e5fced30935566d5d5b3d818a84a4",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	148,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	148,
		"content_sha256":	"c09a4d9e521dd73e01b670aa7b6521d4b61e5fced30935566d5d5b3d818a84a4",
		"is_binary":	false,
		"content":	"\n\nvoid DtwResource_unload(DtwResource *self);\n\n\nvoid DtwResource_load(DtwResource *self);\n\nvoid DtwResource_load_if_not_loaded(DtwResource *self);\n\n"
	}, {
		"path":	"src/resource/resource/resource.h",
		"original_path":	"src/resource/resource/resource.h",
		"dir":	"src/resource/resource/",
		"full_name":	"resource.h",
		"name":	"resource",
		"extension":	"h",
		"hardware_sha256":	"b266732f7a27753f84ad0e09eeab197927b74b1cfd9969fd634bdd3addc6d040",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	974,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	974,
		"content_sha256":	"b266732f7a27753f84ad0e09eeab197927b74b1cfd9969fd634bdd3addc6d040",
		"is_binary":	false,
		"content":	"\n\ntypedef struct DtwResource{\n\n    bool allow_transaction;\n    bool use_locker_on_unique_values;\n\n\n    privateDtwResourceRootProps *root_props;\n    struct DtwResource *mother;\n    char *name;\n    char *path;\n\n\n\n\n    //in the schema struct there is:\n    //|/root\n    //|/root/values\n    //|root/values/element  <-----------------------------|\n    //|root/values/element/pk_name ->any(write_point)     |\n    //|root/values/element/element_prop ->any(write_point)|\n    //|root/index                                         |\n    //|root/index/pk_name/pk_sha ->txt  -------------------\n    DtwSchema *attached_schema;\n    DtwDatabaseSchema *datatabase_schema;\n    struct DtwResource *values_resource;\n    struct DtwResource *index_resource;\n    int schema_type;\n\n    bool loaded;\n    bool is_binary;\n    bool were_renamed;\n    unsigned char *value_any;\n    long value_size;\n   \n    //cache implementation\n    bool cache_sub_resources;\n    void *sub_resources;\n\n}DtwResource;\n\n\n\n"
	}, {
		"path":	"src/resource/resource/schema/",
		"original_path":	"src/resource/resource/schema/",
		"dir":	"src/resource/resource/schema/"
	}, {
		"path":	"src/resource/resource/schema/schema.c",
		"original_path":	"src/resource/resource/schema/schema.c",
		"dir":	"src/resource/resource/schema/",
		"full_name":	"schema.c",
		"name":	"schema",
		"extension":	"c",
		"hardware_sha256":	"ad1334a88f6c6c7e505d7f8f5f790243b124f1a5943a60d620bc0251553e0a65",
		"last_modification_in_unix":	1719251127,
		"hardware_content_size":	7529,
		"last_modification":	"2024-06-24 14:45:27",
		"content_size":	7529,
		"content_sha256":	"ad1334a88f6c6c7e505d7f8f5f790243b124f1a5943a60d620bc0251553e0a65",
		"is_binary":	false,
		"content":	"\nbool private_DtwResource_its_a_pk(DtwResource *self){\n    if(self->schema_type != PRIVATE_DTW_SCHEMA_ELEMENT_PROP){\n        return false;\n    }\n    DtwResource *ancestor = self->mother->mother->mother;\n    DtwSchema * schema = ancestor->attached_schema;\n    return DtwStringArray_find_position(schema->primary_keys,self->name) !=-1;\n}\n\nvoid privateDtwResource_ensure_its_possible_to_sub_resource(DtwResource *self){\n\n    if(self->root_props->is_writing_schema){\n        return;\n    }\n\n    if(self->schema_type == 0){\n\n        return;\n    }\n\n\n    if(self->schema_type != PRIVATE_DTW_SCHEMA_ELEMENT && self->schema_type != PRIVATE_DTW_SCHEMA_ELEMENT_PROP){\n\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_IMPOSSIBLE_TO_ADD_SUB_RESOURCE_INSIDE_SCHEMA_STRUCT,\n                \"impossible to add sub resource inside schema struct \"\n        );\n        return ;\n    }\n\n    if(private_DtwResource_its_a_pk(self)){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_PRIMARY_KEY_CANNOT_HAVE_SUB_RESOURCE,\n                \"primary key %s cannot have a sub resource\",\n                self->name\n        );\n        return;\n    }\n\n}\n\n\nDtwResource * DtwResource_new_schema_insertion(DtwResource *self){\n\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    if(self->schema_type != PRIVATE_DTW_SCHEMA_ROOT || self->datatabase_schema){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_IMPSSIBLE_TO_ADD_INSERTION_OUTSIDE_ROOT_SCHEMA,\n                \"only root schema can generate insertions\");\n        return NULL;\n    }\n    self->root_props->is_writing_schema = true;\n\n    DtwResource  *created = DtwResource_sub_resource_random(self->values_resource,NULL);\n    self->root_props->is_writing_schema = false;\n    return created;\n}\n\nDtwResource  *DtwResource_find_by_name_id(DtwResource *self, const char *name){\n\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    if(self->schema_type != PRIVATE_DTW_SCHEMA_ROOT){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ONLY_ROOT_SCHEMA_CAN_FIND_BY_ID_OR_PK,\n                \"only root schema can find by id or pk\"\n                );\n        return NULL;\n    }\n    self->root_props->is_writing_schema = true;\n\n    DtwResource *element = DtwResource_sub_resource(self->values_resource,name);\n\n    if(DtwResource_type(element) == DTW_NOT_FOUND){\n        return NULL;\n    }\n    self->root_props->is_writing_schema = false;\n\n    return element;\n}\nDtwResource * DtwResource_find_by_primary_key_with_binary(DtwResource *self, const char *primary_key, unsigned  char *value, long size){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    if(self->schema_type != PRIVATE_DTW_SCHEMA_ROOT){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ONLY_ROOT_SCHEMA_CAN_FIND_BY_ID_OR_PK,\n                \"only root schema can find by id or pk\"\n                );\n        return NULL;\n    }\n    self->root_props->is_writing_schema = true;\n\n    DtwResource *primary_key_folder = DtwResource_sub_resource(self->index_resource, \"%s\", primary_key);\n    char *sha = dtw_generate_sha_from_any(value,size);\n    DtwResource *index_value = DtwResource_sub_resource(primary_key_folder,\"%s\",sha);\n    free(sha);\n    if(DtwResource_type(index_value) == DTW_NOT_FOUND){\n        return NULL;\n    }\n    char *element_folder = DtwResource_get_string(index_value);\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    if(element_folder == NULL){\n        return NULL;\n    }\n\n    DtwResource *founded_resource = DtwResource_sub_resource(self->values_resource, \"%s\", element_folder);\n    self->root_props->is_writing_schema = false;\n    return founded_resource;\n}\n\n\n\nDtwResource * DtwResource_find_by_primary_key_with_string(DtwResource *self, const char *key, const char *value){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    return DtwResource_find_by_primary_key_with_binary(self,key,(unsigned char*)value, (long)strlen(value));\n}\n\n\nvoid DtwResource_dangerous_remove_schema_prop(DtwResource*self,const char *prop){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    if(self->schema_type != PRIVATE_DTW_SCHEMA_ROOT){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ONLY_ROOT_SCHEMA_CANN_MODIFY_SCHEMA_PROPS,\n                \"only root schema can modify schema props\"\n        );\n        return;\n    }\n    self->root_props->is_writing_schema = true;\n\n    bool allow_transaction = self->allow_transaction;\n\n    DtwResourceArray * all_values = DtwResource_sub_resources(self->values_resource);\n    DtwTransaction * transaction = self->root_props->transaction;\n    for(int i = 0; i < all_values->size; i++){\n        DtwResource *current = all_values->resources[i];\n        DtwResource *prop_to_remove = DtwResource_sub_resource(current,\"%s\",prop);\n        if(allow_transaction){\n            DtwTransaction_delete_any(transaction,prop_to_remove->path);\n        }else{\n            dtw_remove_any(prop_to_remove->path);\n        }\n\n    }\n    DtwResource *index_element = DtwResource_sub_resource(self->index_resource,\"%s\",prop);\n    if(allow_transaction){\n        DtwTransaction_delete_any(transaction,index_element->path);\n    }else{\n        dtw_remove_any(index_element->path);\n    }\n    self->root_props->is_writing_schema = false;\n\n}\n\n\nvoid DtwResource_dangerous_rename_schema_prop(DtwResource*self,const char *prop,const char *new_name){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    if(self->schema_type != PRIVATE_DTW_SCHEMA_ROOT){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ONLY_ROOT_SCHEMA_CANN_MODIFY_SCHEMA_PROPS,\n                \"only root schema can modify schema props\"\n        );\n        return;\n    }\n    self->root_props->is_writing_schema = true;\n    bool allow_transaction = self->allow_transaction;\n\n    DtwResourceArray * all_values = DtwResource_sub_resources(self->values_resource);\n    DtwTransaction * transaction = self->root_props->transaction;\n    for(int i = 0; i < all_values->size; i++){\n        DtwResource *current = all_values->resources[i];\n        DtwResource *prop_to_remove = DtwResource_sub_resource(current,\"%s\",prop);\n        DtwResource *new_prop = DtwResource_sub_resource(current,\"%s\",new_name);\n        if(allow_transaction){\n            DtwTransaction_move_any_merging(transaction,prop_to_remove->path,new_prop->path);\n        }else{\n            dtw_move_any(prop_to_remove->path,new_prop->path,DTW_MERGE);\n        }\n\n    }\n\n\n    DtwResource *index_element = DtwResource_sub_resource(self->index_resource,\"%s\",prop);\n    DtwResource *new_index = DtwResource_sub_resource(self->index_resource,\"%s\",new_name);\n    if(allow_transaction){\n        DtwTransaction_move_any_merging(transaction,index_element->path,new_index->path);\n    }else{\n        dtw_move_any(index_element->path,new_index->path,DTW_MERGE);\n    }\n    self->root_props->is_writing_schema = false;\n\n}\n\n\n\nDtwDatabaseSchema * DtwResource_newDatabaseSchema(DtwResource *self){\n    if(DtwResource_error(self)){\n        return  NULL;\n    }\n    privateDtwResource_ensure_its_possible_to_sub_resource(self);\n\n    if(DtwResource_error(self)){\n        return  NULL;\n    }\n\n    if(self->datatabase_schema){\n        return self->datatabase_schema;\n    }\n\n    self->datatabase_schema = private_newDtwDtatabaseSchema();\n    return self->datatabase_schema;\n}\n"
	}, {
		"path":	"src/resource/resource/schema/schema.h",
		"original_path":	"src/resource/resource/schema/schema.h",
		"dir":	"src/resource/resource/schema/",
		"full_name":	"schema.h",
		"name":	"schema",
		"extension":	"h",
		"hardware_sha256":	"64c8658ce58e1a86a5499d46e392f8c1fb0970b79620db7b9ae07a8ad0bd4d13",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1060,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1060,
		"content_sha256":	"64c8658ce58e1a86a5499d46e392f8c1fb0970b79620db7b9ae07a8ad0bd4d13",
		"is_binary":	false,
		"content":	"\n#define PRIVATE_DTW_SCHEMA_ROOT  1\n#define PRIVATE_DTW_SCHEMA_VALUE 2\n#define PRIVATE_DTW_SCHEMA_ELEMENT 3\n#define PRIVATE_DTW_SCHEMA_ELEMENT_PROP 4\n#define PRIVATE_DTW_SCHEMA_INDEX 5\n#define PRIVATE_DTW_SCHEMA_PK_FOLDER 6\n#define PRIVATE_DTW_SCHEMA_PK_VALUE 7\n\nbool private_DtwResource_its_a_pk(DtwResource *self);\n\nvoid privateDtwResource_ensure_its_possible_to_sub_resource(DtwResource *self);\n\nDtwResource * DtwResource_new_schema_insertion(DtwResource *self);\n\nDtwResource  *DtwResource_find_by_name_id(DtwResource *self, const char *name);\n\nDtwResource * DtwResource_find_by_primary_key_with_binary(DtwResource *self, const char *primary_key, unsigned  char *value, long size);\n\nDtwResource * DtwResource_find_by_primary_key_with_string(DtwResource *self, const char *key, const char *value);\n\nvoid DtwResource_dangerous_remove_schema_prop(DtwResource*self,const char *prop);\n\nvoid DtwResource_dangerous_rename_schema_prop(DtwResource*self,const char *prop,const char *new_name);\n\n\n\nDtwDatabaseSchema * DtwResource_newDatabaseSchema(DtwResource *self);\n"
	}, {
		"path":	"src/resource/resource/setters/",
		"original_path":	"src/resource/resource/setters/",
		"dir":	"src/resource/resource/setters/"
	}, {
		"path":	"src/resource/resource/setters/setters.c",
		"original_path":	"src/resource/resource/setters/setters.c",
		"dir":	"src/resource/resource/setters/",
		"full_name":	"setters.c",
		"name":	"setters",
		"extension":	"c",
		"hardware_sha256":	"0967b8d8531beeb7ddbcd03908e2c74b003c8698016493514754f890ba105b7d",
		"last_modification_in_unix":	1719252292,
		"hardware_content_size":	4451,
		"last_modification":	"2024-06-24 15:04:52",
		"content_size":	4451,
		"content_sha256":	"0967b8d8531beeb7ddbcd03908e2c74b003c8698016493514754f890ba105b7d",
		"is_binary":	false,
		"content":	"//\n// Created by mateusmoutinho on 05/08/23.\n//\nvoid private_dtw_resource_set_primary_key(DtwResource *self, unsigned  char *element, long size){\n\n    self->root_props->is_writing_schema = true;\n    DtwResource * ancestor = self->mother->mother->mother;\n    DtwResource *index_resource =ancestor->index_resource;\n    DtwResource *pk_folder = DtwResource_sub_resource(index_resource,\"%s\",self->name);\n\n    char *sha = dtw_generate_sha_from_any(element,size);\n    DtwResource  *pk_value = DtwResource_sub_resource(pk_folder,sha);\n    free(sha);\n    char *mothers_name =self->mother->name;\n\n    if(DtwResource_is_file(pk_value)) {\n        char *content = DtwResource_get_string(pk_value);\n        if (DtwResource_error(self)) {\n            self->root_props->is_writing_schema = false;\n            return;\n        }\n\n        //means its the same\n        if (strcmp(content, mothers_name) == 0) {\n            self->root_props->is_writing_schema = false;\n            return;\n        }\n\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_PRIMARY_KEY_ALREADY_EXIST,\n                \"primary key: %s already exist\",\n                self->name\n        );\n        self->root_props->is_writing_schema = false;\n        return;\n\n    }\n    DtwResource_set_string(pk_value,mothers_name);\n    self->root_props->is_writing_schema = false;\n\n}\nvoid DtwResource_set_any(DtwResource *self, unsigned char *element, long size,bool is_binary){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    DtwResource_unload(self);\n\n    if(private_DtwResource_its_a_pk(self)){\n        private_dtw_resource_set_primary_key(self, element, size);\n    }\n\n    if(DtwResource_error(self)){\n        return;\n    }\n\n    if(self->allow_transaction){\n        DtwTransaction_write_any(self->root_props->transaction,self->path,element,size,is_binary);\n    }\n    else{\n        dtw_write_any_content(self->path,element,size);\n    }\n\n    self->loaded = true;\n    self->value_size = size;\n    self->is_binary = is_binary;\n    self->value_any = (unsigned  char *) malloc(size+1);\n\n    self->value_any[size]= '\\0';\n    memcpy(self->value_any,element,size);\n}\nvoid DtwResource_set_binary(DtwResource *self, unsigned char *element, long size){\n    DtwResource_set_any(self,element,size,true);\n}\n\nvoid DtwResource_set_string(DtwResource *self,const  char *element){\n    DtwResource_set_any(self,(unsigned char *)element,strlen(element),false);\n}\n\nvoid DtwResource_set_binary_sha(DtwResource *self, unsigned  char *value, long size){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    char *generated_sha = dtw_generate_sha_from_any(value,size);\n    DtwResource_set_string(self,generated_sha);\n    free(generated_sha);\n}\n\nvoid DtwResource_set_string_sha(DtwResource *self,const char *value){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    DtwResource_set_binary_sha(self,(unsigned char*)value, (long)strlen(value));\n}\n\n\n\n\n\n\n\n\nvoid DtwResource_set_long(DtwResource *self,long element){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    if(self->allow_transaction){\n        DtwTransaction_write_long(self->root_props->transaction,self->path,element);\n    }\n    else{\n        dtw_write_long_file_content(self->path,element);\n    }\n    DtwResource_unload(self);\n    self->loaded = true;\n    char result[20] ={0};\n    sprintf(result,\"%ld\",element);\n    self->value_any = (unsigned char *)strdup(result);\n\n}\n\nvoid DtwResource_set_double(DtwResource *self,double element){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    if(self->allow_transaction){\n        DtwTransaction_write_double(self->root_props->transaction,self->path,element);\n    }\n    else{\n        dtw_write_double_file_content(self->path,element);\n    }\n    DtwResource_unload(self);\n    self->loaded = true;\n    char result[20] ={0};\n    sprintf(result,\"%lf\",element);\n    self->value_any = (unsigned char *)strdup(result);\n\n\n}\n\nvoid DtwResource_set_bool( DtwResource *self,bool element){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    if(self->allow_transaction){\n        DtwTransaction_write_bool(self->root_props->transaction,self->path,element);\n    }\n    else{\n        dtw_write_bool_file_content(self->path,element);\n    }\n\n    DtwResource_unload(self);\n    self->loaded = true;\n    if(element){\n        self->value_any = (unsigned char*)strdup(\"true\");\n    }\n    else{\n        self->value_any = (unsigned char*)strdup(\"false\");\n\n    }\n\n}\n"
	}, {
		"path":	"src/resource/resource/setters/setters.h",
		"original_path":	"src/resource/resource/setters/setters.h",
		"dir":	"src/resource/resource/setters/",
		"full_name":	"setters.h",
		"name":	"setters",
		"extension":	"h",
		"hardware_sha256":	"2f40e686182860ec2ee4b06bf2202b9cecfe3a74b568ff53547d9131157ae011",
		"last_modification_in_unix":	1719250063,
		"hardware_content_size":	744,
		"last_modification":	"2024-06-24 14:27:43",
		"content_size":	744,
		"content_sha256":	"2f40e686182860ec2ee4b06bf2202b9cecfe3a74b568ff53547d9131157ae011",
		"is_binary":	false,
		"content":	"//\n// Created by mateusmoutinho on 05/08/23.\n//\nvoid private_dtw_resource_set_primary_key(DtwResource *self, unsigned  char *element, long size);\n\nvoid DtwResource_set_any(DtwResource *self, unsigned char *element, long size,bool is_binary);\n\nvoid DtwResource_set_binary(DtwResource *self, unsigned char *element, long size);\n\n\nvoid DtwResource_set_string(DtwResource *self,const  char *element);\n\nvoid DtwResource_set_binary_sha(DtwResource *self, unsigned  char *value, long size);\n\n\nvoid DtwResource_set_string_sha(DtwResource *self,const char *value);\n\n\nvoid DtwResource_set_long(DtwResource *self,long element);\n\n\nvoid DtwResource_set_double(DtwResource *self,double element);\n\nvoid DtwResource_set_bool( DtwResource *self,bool element);\n\n"
	}, {
		"path":	"src/resource/resource/sub_resource_setters/",
		"original_path":	"src/resource/resource/sub_resource_setters/",
		"dir":	"src/resource/resource/sub_resource_setters/"
	}, {
		"path":	"src/resource/resource/sub_resource_setters/sub_resource_setters.c",
		"original_path":	"src/resource/resource/sub_resource_setters/sub_resource_setters.c",
		"dir":	"src/resource/resource/sub_resource_setters/",
		"full_name":	"sub_resource_setters.c",
		"name":	"sub_resource_setters",
		"extension":	"c",
		"hardware_sha256":	"496b38f42826821fb6d82a2aa0a6517ed7b0c5d820ed2c843add85f5517d894c",
		"last_modification_in_unix":	1719250520,
		"hardware_content_size":	2259,
		"last_modification":	"2024-06-24 14:35:20",
		"content_size":	2259,
		"content_sha256":	"496b38f42826821fb6d82a2aa0a6517ed7b0c5d820ed2c843add85f5517d894c",
		"is_binary":	false,
		"content":	"\nvoid DtwResource_set_any_in_sub_resource(DtwResource *self,const char *key, unsigned char *element, long size,bool is_binary) {\n    if(DtwResource_error(self)){\n        return ;\n    }\n\n    DtwResource *created = DtwResource_sub_resource(self,\"%s\",key);\n    DtwResource_set_any(created, element, size,is_binary);\n}\n\nvoid DtwResource_set_binary_in_sub_resource(DtwResource *self,const char *key, unsigned char *element, long size){\n    if(DtwResource_error(self)){\n        return ;\n    }\n\n    DtwResource *created = DtwResource_sub_resource(self,\"%s\",key);\n    DtwResource_set_binary(created, element, size);\n}\n\nvoid DtwResource_set_binary_sha_in_sub_resource(DtwResource *self, const char *key, unsigned  char *value, long size){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    DtwResource *created = DtwResource_sub_resource(self,\"%s\",key);\n    DtwResource_set_binary_sha(created,value,size);\n}\n\n\nvoid DtwResource_set_string_sha_in_sub_resource(DtwResource *self, const char *key, const char *value){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    DtwResource *created = DtwResource_sub_resource(self,\"%s\",key);\n    DtwResource_set_string_sha(created,value);\n}\n\nvoid DtwResource_set_string_in_sub_resource(DtwResource *self, const char *key, const  char *element){\n    if(DtwResource_error(self)){\n        return ;\n    }\n\n    DtwResource *created = DtwResource_sub_resource(self,\"%s\",key);\n    DtwResource_set_string(created,element);\n}\n\nvoid DtwResource_set_long_in_sub_resource(DtwResource *self, const char *key, long element){\n    if(DtwResource_error(self)){\n        return ;\n    }\n    DtwResource *created = DtwResource_sub_resource(self,\"%s\",key);\n    DtwResource_set_long(created,element);\n}\n\nvoid DtwResource_set_double_in_sub_resource(DtwResource *self, const char *key, double element){\n    if(DtwResource_error(self)){\n        return ;\n    }\n\n    DtwResource *created = DtwResource_sub_resource(self,\"%s\",key);\n    DtwResource_set_double(created,element);\n}\n\nvoid DtwResource_set_bool_in_sub_resource(DtwResource *self,const char *key, bool element){\n    if(DtwResource_error(self)){\n        return ;\n    }\n\n    DtwResource *created = DtwResource_sub_resource(self,\"%s\",key);\n    DtwResource_set_bool(created,element);\n}\n"
	}, {
		"path":	"src/resource/resource/sub_resource_setters/sub_resource_setters.h",
		"original_path":	"src/resource/resource/sub_resource_setters/sub_resource_setters.h",
		"dir":	"src/resource/resource/sub_resource_setters/",
		"full_name":	"sub_resource_setters.h",
		"name":	"sub_resource_setters",
		"extension":	"h",
		"hardware_sha256":	"b0f1bc8a20d06e45d63cd0f5ccbb61fc90f8135524a6e39f6db377401d422ac8",
		"last_modification_in_unix":	1719250503,
		"hardware_content_size":	861,
		"last_modification":	"2024-06-24 14:35:03",
		"content_size":	861,
		"content_sha256":	"b0f1bc8a20d06e45d63cd0f5ccbb61fc90f8135524a6e39f6db377401d422ac8",
		"is_binary":	false,
		"content":	"\nvoid DtwResource_set_any_in_sub_resource(DtwResource *self,const char *key, unsigned char *element, long size,bool is_binary);\n\n\nvoid DtwResource_set_binary_in_sub_resource(DtwResource *self,const char *key, unsigned char *element, long size);\n\n\nvoid DtwResource_set_binary_sha_in_sub_resource(DtwResource *self, const char *key, unsigned  char *value, long size);\n\n\nvoid DtwResource_set_string_sha_in_sub_resource(DtwResource *self, const char *key, const char *value);\n\nvoid DtwResource_set_string_in_sub_resource(DtwResource *self, const char *key, const  char *element);\n\nvoid DtwResource_set_long_in_sub_resource(DtwResource *self, const char *key, long element);\n\nvoid DtwResource_set_double_in_sub_resource(DtwResource *self, const char *key, double element);\n\nvoid DtwResource_set_bool_in_sub_resource(DtwResource *self,const char *key, bool element);\n"
	}, {
		"path":	"src/resource/resource_array/",
		"original_path":	"src/resource/resource_array/",
		"dir":	"src/resource/resource_array/"
	}, {
		"path":	"src/resource/resource_array/resource_array.c",
		"original_path":	"src/resource/resource_array/resource_array.c",
		"dir":	"src/resource/resource_array/",
		"full_name":	"resource_array.c",
		"name":	"resource_array",
		"extension":	"c",
		"hardware_sha256":	"e11d805fc99fa795754bf74c7ae66063deda749b959c5d6943a9b60138a15e29",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2575,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2575,
		"content_sha256":	"e11d805fc99fa795754bf74c7ae66063deda749b959c5d6943a9b60138a15e29",
		"is_binary":	false,
		"content":	"\n\n\nDtwResourceArray * newDtwResourceArray(){\n    DtwResourceArray *self = (DtwResourceArray*) malloc(sizeof (DtwResourceArray));\n    self->resources = (DtwResource**) malloc(0);\n    self->size = 0;\n    return self;\n}\n\n\nvoid DtwResourceArray_append(DtwResourceArray *self, DtwResource *element){\n    self->resources = (DtwResource**)realloc(self->resources,(self->size +1) * sizeof (DtwResource**));\n    self->resources[self->size] = element;\n    self->size+=1;\n}\n\n\nDtwResource* DtwResourceArray_get_by_name(DtwResourceArray *self, const char *name){\n    for(int i = 0; i < self->size; i++){\n        DtwResource *current = self->resources[i];\n        if(strcmp(current->name,name) ==0){\n            return current;\n        }\n    }\n    return NULL;\n}\n\nDtwResourceArray * DtwResource_get_schema_values(DtwResource *self){\n    if(DtwResource_error(self)){\n        return NULL;\n    }\n    self->root_props->is_writing_schema = true;\n\n    if(self->schema_type != PRIVATE_DTW_SCHEMA_ROOT){\n        private_DtwResource_raise_error(\n                self,\n                DTW_RESOURCE_ONLY_ROOT_SCHEMA_HAVE_SCHEMA_VALUES,\n                \"only root schema have schema values\"\n        );\n        return NULL;\n    }\n\n    DtwResourceArray *elements =  DtwResource_sub_resources(self->values_resource);\n    self->root_props->is_writing_schema = false;\n    return elements;\n}\n\n\nDtwResourceArray * DtwResource_sub_resources(DtwResource *self){\n\n\n\n    DtwStringArray  *names  = DtwResource_list_names(self);\n    DtwStringArray_sort(names);\n    DtwResourceArray *target_array = (DtwResourceArray*)self->sub_resources;\n\n    if(self->cache_sub_resources == false){\n        target_array = newDtwResourceArray();\n    }\n\n    for(int i = 0; i < names->size; i++){\n        char *current_name = names->strings[i];\n\n        if(self->cache_sub_resources){\n            DtwResource_sub_resource(self,\"%s\", current_name);\n        }\n        \n        else{\n            DtwResource *current_resource = DtwResource_sub_resource(self,\"%s\",current_name);\n            DtwResourceArray_append(target_array,current_resource);\n        }\n    }\n\n    DtwStringArray_free(names);\n    return target_array;\n\n\n}\n\n\nvoid DtwResourceArray_represent(DtwResourceArray *self){\n    for(int i = 0; i< self->size; i++){\n        printf(\"----------------------------------------\\n\");\n        DtwResource_represent(self->resources[i]);\n    }\n}\n\nvoid DtwResourceArray_free(DtwResourceArray *self){\n    for(int i = 0; i < self->size; i++){\n        DtwResource_free(self->resources[i]);\n\n    }\n    free(self->resources);\n    free(self);\n}\n"
	}, {
		"path":	"src/resource/resource_array/resource_array.h",
		"original_path":	"src/resource/resource_array/resource_array.h",
		"dir":	"src/resource/resource_array/",
		"full_name":	"resource_array.h",
		"name":	"resource_array",
		"extension":	"h",
		"hardware_sha256":	"00be303c31ab88c05093946d7e5c22bffc16259329d1392b012259bcee704b5d",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	557,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	557,
		"content_sha256":	"00be303c31ab88c05093946d7e5c22bffc16259329d1392b012259bcee704b5d",
		"is_binary":	false,
		"content":	"\n\n\ntypedef struct DtwResourceArray{\n    DtwResource **resources;\n    long size;\n\n}DtwResourceArray;\n\nDtwResourceArray * newDtwResourceArray();\n\nvoid DtwResourceArray_append(DtwResourceArray *self, DtwResource *element);\n\n\nDtwResource * DtwResourceArray_get_by_name(DtwResourceArray *self, const char *name);\n\nDtwResourceArray * DtwResource_get_schema_values(DtwResource *self);\n\nDtwResourceArray * DtwResource_sub_resources(DtwResource *self);\n\n\nvoid DtwResourceArray_represent(DtwResourceArray *self);\n\nvoid DtwResourceArray_free(DtwResourceArray *self);\n\n"
	}, {
		"path":	"src/resource/root_props/",
		"original_path":	"src/resource/root_props/",
		"dir":	"src/resource/root_props/"
	}, {
		"path":	"src/resource/root_props/root_props.c",
		"original_path":	"src/resource/root_props/root_props.c",
		"dir":	"src/resource/root_props/",
		"full_name":	"root_props.c",
		"name":	"root_props",
		"extension":	"c",
		"hardware_sha256":	"747bffca89dc558c30925e72e997080161e7415c330c0dc8be05a6ac5092eaea",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	764,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	764,
		"content_sha256":	"747bffca89dc558c30925e72e997080161e7415c330c0dc8be05a6ac5092eaea",
		"is_binary":	false,
		"content":	"\n\nprivateDtwResourceRootProps *private_newDtwResourceRootProps(){\n    privateDtwResourceRootProps *self  = (privateDtwResourceRootProps*) malloc(sizeof (privateDtwResourceRootProps));\n    *self = (privateDtwResourceRootProps){0};\n    self->transaction = newDtwTransaction();\n    self->randonizer = newDtwRandonizer();\n    self->locker = newDtwLocker();\n    self->error_code = DTW_RESOURCE_OK;\n\n    return self;\n}\n\n\nvoid privateDtwResourceRootProps_free(privateDtwResourceRootProps *self){\n    DtwTransaction_free(self->transaction);\n    DtwRandonizer_free(self->randonizer);\n    DtwLocker_free(self->locker);\n    if(self->error_path){\n        free(self->error_path);\n    }\n\n    if(self->error_message){\n        free(self->error_message);\n    }\n\n\n\n    free(self);\n}"
	}, {
		"path":	"src/resource/root_props/root_props.h",
		"original_path":	"src/resource/root_props/root_props.h",
		"dir":	"src/resource/root_props/",
		"full_name":	"root_props.h",
		"name":	"root_props",
		"extension":	"h",
		"hardware_sha256":	"e5fc52163b4952852e02efccc6eaf1f8ef76a1907929fefe3e2a2e4bdd4c0341",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1200,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1200,
		"content_sha256":	"e5fc52163b4952852e02efccc6eaf1f8ef76a1907929fefe3e2a2e4bdd4c0341",
		"is_binary":	false,
		"content":	"#define DTW_RESOURCE_ELEMENT_IS_NULL -1\n#define DTW_RESOURCE_OK 0\n#define DTW_RESOURCE_ELEMENT_NOT_EXIST 1\n#define DTW_RESOURCE_ELEMENT_NOT_BOOL 2\n#define DTW_RESOURCE_ELEMENT_NOT_LONG 3\n#define DTW_RESOURCE_ELEMENT_NOT_DOUBLE 4\n#define DTW_RESOURCE_ELEMENT_NOT_STRING 5\n#define DTW_RESOURCE_PRIMARY_KEY_ALREADY_EXIST 6\n#define DTW_RESOURCE_PRIMARY_KEY_CANNOT_HAVE_SUB_RESOURCE 7\n#define DTW_IMPOSSIBLE_TO_RENAME_A_PRIMARY_KEY 8\n#define DTW_RESOURCE_RENAMED_RESOURCE_CANNOT_HAVE_SONS 9\n#define DTW_RESOURCE_IMPSSIBLE_TO_ADD_INSERTION_OUTSIDE_ROOT_SCHEMA 10\n#define DTW_RESOURCE_IMPOSSIBLE_TO_ADD_SUB_RESOURCE_INSIDE_SCHEMA_STRUCT 11\n#define DTW_RESOURCE_ONLY_ROOT_SCHEMA_CAN_FIND_BY_ID_OR_PK 12\n#define DTW_RESOURCE_ONLY_ROOT_SCHEMA_HAVE_SCHEMA_VALUES 13\n#define DTW_RESOURCE_ONLY_ROOT_SCHEMA_CANN_MODIFY_SCHEMA_PROPS 14\n\ntypedef struct {\n    DtwTransaction  *transaction;\n    DtwRandonizer  *randonizer;\n    DtwLocker *locker;\n    bool is_writing_schema;\n    int error_code;\n    char *error_path;\n    char *error_message;\n    \n}privateDtwResourceRootProps;\n\nprivateDtwResourceRootProps *private_newDtwResourceRootProps();\n\n\nvoid privateDtwResourceRootProps_free(privateDtwResourceRootProps *self);\n\n"
	}, {
		"path":	"src/resource/schema/",
		"original_path":	"src/resource/schema/",
		"dir":	"src/resource/schema/"
	}, {
		"path":	"src/resource/schema/schema.c",
		"original_path":	"src/resource/schema/schema.c",
		"dir":	"src/resource/schema/",
		"full_name":	"schema.c",
		"name":	"schema",
		"extension":	"c",
		"hardware_sha256":	"f75abbe96a519d95f6846d664f7f7682c3c0bfe0e29e93dba32906d39c848dc4",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1514,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1514,
		"content_sha256":	"f75abbe96a519d95f6846d664f7f7682c3c0bfe0e29e93dba32906d39c848dc4",
		"is_binary":	false,
		"content":	"\nDtwSchema *private_newDtwSchema(const char *name){\n    DtwSchema *self = (DtwSchema*) malloc(sizeof (DtwSchema));\n    *self = (DtwSchema){0};\n    self->value_name = DTW_SCHEMA_DEFAULT_VALUES_NAME;\n    self->index_name = DTW_SCHEMA_DEFAULT_INDEX_NAME;\n    self->sub_schemas = ( DtwSchema **)malloc(0);\n    if(name){\n        self->primary_keys = newDtwStringArray();\n        self->name = strdup(name);\n    }\n\n    return  self;\n}\n\n\nDtwSchema * privateDtwSchema_get_sub_schema(DtwSchema *self,const char *name){\n\n    for(int i = 0; i < self->size; i++){\n        DtwSchema  *current = self->sub_schemas[i];\n\n        if(strcmp(current->name,name) == 0){\n            return  current;\n        }\n    }\n    return NULL;\n}\n\nDtwSchema * DtwSchema_new_subSchema(DtwSchema *self,const char *name){\n    DtwSchema *subSchema = private_newDtwSchema(name);\n    self->sub_schemas = ( DtwSchema **) realloc(self->sub_schemas, (self->size + 1) * sizeof( DtwSchema *));\n    self->sub_schemas[self->size] = subSchema;\n    self->size+=1;\n    return subSchema;\n}\n\n\nvoid DtwSchema_add_primary_key(DtwSchema *self,const char *name){\n    DtwStringArray_append(self->primary_keys,name);\n}\n\nvoid private_newDtwSchema_free(DtwSchema *self){\n\n    for (int i = 0; i < self->size; i++) {\n        private_newDtwSchema_free((DtwSchema *) self->sub_schemas[i]);\n    }\n\n    free(self->sub_schemas);\n    if(self->name){\n        free(self->name);\n    }\n    if(self->primary_keys){\n        DtwStringArray_free(self->primary_keys);\n    }\n    free(self);\n}"
	}, {
		"path":	"src/resource/schema/schema.h",
		"original_path":	"src/resource/schema/schema.h",
		"dir":	"src/resource/schema/",
		"full_name":	"schema.h",
		"name":	"schema",
		"extension":	"h",
		"hardware_sha256":	"0e97cee36b41ab88d6348793c14f9b21ca2093aa06490b4e421dc7c2a1838645",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	524,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	524,
		"content_sha256":	"0e97cee36b41ab88d6348793c14f9b21ca2093aa06490b4e421dc7c2a1838645",
		"is_binary":	false,
		"content":	"\n\ntypedef struct DtwSchema{\n\n\n    const char *value_name;\n    const char *index_name;\n\n    char *name;\n    struct DtwSchema **sub_schemas;\n    int size;\n    DtwStringArray  *primary_keys;\n}DtwSchema;\n\nDtwSchema *private_newDtwSchema(const char *name);\n\nDtwSchema * privateDtwSchema_get_sub_schema(DtwSchema *self,const char *name);\n\n\nDtwSchema * (DtwSchema_new_subSchema)(DtwSchema *self,const char *name);\n\nvoid DtwSchema_add_primary_key(DtwSchema *self,const char *name);\n\nvoid private_newDtwSchema_free(DtwSchema *self);\n"
	}, {
		"path":	"src/sha256/",
		"original_path":	"src/sha256/",
		"dir":	"src/sha256/"
	}, {
		"path":	"src/sha256/sha256.c",
		"original_path":	"src/sha256/sha256.c",
		"dir":	"src/sha256/",
		"full_name":	"sha256.c",
		"name":	"sha256",
		"extension":	"c",
		"hardware_sha256":	"75c4cc6ddccc6754d57731aae7a7fc69b16cd4c45b953bbbec30e917cdede4a8",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1578,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1578,
		"content_sha256":	"75c4cc6ddccc6754d57731aae7a7fc69b16cd4c45b953bbbec30e917cdede4a8",
		"is_binary":	false,
		"content":	"char * calc_sha_256_returning_string(const void *input, size_t len)\n{\n\n\n    uint8_t hash[SIZE_OF_SHA_256_HASH];\n    calc_sha_256(hash, input, len);\n    char *hash_string = (char*)malloc(SIZE_OF_SHA_256_HASH * 2 + 1);\n    for (unsigned int i = 0; i < SIZE_OF_SHA_256_HASH; i++) {\n        sprintf(hash_string + i * 2, \"%02x\", hash[i]);\n    }\n    return hash_string;\n}\n\nvoid  calc_sha_256_from_string(uint8_t hash[SIZE_OF_SHA_256_HASH], const char *input)\n{\n    calc_sha_256(hash, input, strlen(input));\n\n}\n\nchar * calc_sha_256_from_string_returning_string(const char *input)\n{\n    return calc_sha_256_returning_string(input, strlen(input));\n}\n\nint calc_sha_256_from_file(uint8_t hash[SIZE_OF_SHA_256_HASH], const char *filename)\n{\n    int size;\n    char *content = sha256_open_file(filename, &size);\n    if(content == NULL){\n        return -1;\n    }\n    calc_sha_256(hash, content, size);\n    free(content);\n    return 0;\n}\n\nchar * calc_sha_256_from_file_returning_string(const char *filename)\n{\n    int size;\n    char *content = sha256_open_file(filename, &size);\n    if(content == NULL){\n        return NULL;\n    }\n    char *hash_string = calc_sha_256_returning_string(content, size);\n    free(content);\n    return hash_string;\n\n}\nchar * sha256_open_file(const char *filename, int *size){\n    FILE *file = fopen(filename, \"rb\");\n    if (file == NULL) {\n        return NULL;\n    }\n    fseek(file,0,SEEK_END);\n    *size = ftell(file);\n    fseek(file,0,SEEK_SET);\n    char *content = (char*)malloc(*size +1);\n    fread(content,1,*size,file);\n    fclose(file);\n    return content;\n}"
	}, {
		"path":	"src/sha256/sha256.h",
		"original_path":	"src/sha256/sha256.h",
		"dir":	"src/sha256/",
		"full_name":	"sha256.h",
		"name":	"sha256",
		"extension":	"h",
		"hardware_sha256":	"e3d6682c7796b479b6040080be9bb3fe53323386a9ab27021fc3b15b767076cb",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1094,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1094,
		"content_sha256":	"e3d6682c7796b479b6040080be9bb3fe53323386a9ab27021fc3b15b767076cb",
		"is_binary":	false,
		"content":	"\nchar * calc_sha_256_returning_string(const void *input, size_t len);\n/*\n    @param input: the string to be hashed\n    @param len: the length of the string\n    @return: the hash of the string\n    @note: if the input string is NULL, the results are unpredictable\n*/\n\nvoid calc_sha_256_from_string(uint8_t hash[SIZE_OF_SHA_256_HASH], const char *input);\n/*\n    @param hash: the hash array, where the result is delivered\n    @param input: the string to be hashed\n    @note: if the input string is NULL, the results are unpredictable\n*/\n\nint calc_sha_256_from_file(uint8_t hash[SIZE_OF_SHA_256_HASH], const char *filename);\n/*\n    @param hash: the hash array, where the result is delivered\n    @param filename: the name of the file to be hashed\n    @return: 0 if the file was hashed successfully, -1 otherwise\n*/\n\nchar * calc_sha_256_from_file_returning_string(const char *filename);\n/*\n    @param filename: the name of the file to be hashed\n    @return: the hash of the file\n    @note: if the filename is NULL, the return value is NULL\n*/\nchar * sha256_open_file(const char *filename, int *size);\n"
	}, {
		"path":	"src/string_array/",
		"original_path":	"src/string_array/",
		"dir":	"src/string_array/"
	}, {
		"path":	"src/string_array/string_array.c",
		"original_path":	"src/string_array/string_array.c",
		"dir":	"src/string_array/",
		"full_name":	"string_array.c",
		"name":	"string_array",
		"extension":	"c",
		"hardware_sha256":	"eea3f229e475357ba1aa5e45fca6df4e488feb3a1efeb48bcf9919041dc86bdc",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2745,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2745,
		"content_sha256":	"eea3f229e475357ba1aa5e45fca6df4e488feb3a1efeb48bcf9919041dc86bdc",
		"is_binary":	false,
		"content":	"\nstruct DtwStringArray * newDtwStringArray(){\n    struct DtwStringArray *self = (struct DtwStringArray*)malloc(sizeof(struct DtwStringArray));\n    self->size = 0;\n\n    self->strings = (char**)malloc(1);\n\n    return self;\n}\n\nint DtwStringArray_find_position(struct DtwStringArray *self, const char *string){\n    for(int i = 0; i < self->size; i++){\n        if(strcmp(self->strings[i], string) == 0){\n            return i;\n        }\n    }\n    return -1;\n}\n\n\nvoid DtwStringArray_set_value(struct DtwStringArray *self, int index, const char *value){\n    if(index < self->size && index >= 0){\n        int size = strlen(value);\n        self->strings[index] = (char*)realloc(self->strings[index], size + 1);\n        self->strings[index][size] = '\\0';\n        strcpy(self->strings[index], value);\n    }\n}\nvoid DtwStringArray_append_getting_ownership(struct DtwStringArray *self, char *string){\n    self->strings =  (char**)realloc(self->strings, (self->size+ 1) * sizeof(char*));\n    self->strings[self->size] = string;\n    self->size+=1;\n}\n\n// Function prototypes\nvoid DtwStringArray_append(struct DtwStringArray *self, const  char *string){\n\n    self->strings =  (char**)realloc(self->strings, (self->size+ 1) * sizeof(char*));\n    self->strings[self->size] = strdup(string);\n    self->size+=1;\n}\n\nvoid DtwStringArray_pop(struct DtwStringArray *self, int position){\n    free(self->strings[position]);\n    for(int i = position; i < self->size -1; i++){\n        self->strings[i] = self->strings[i+1];\n    }\n    self->size-=1;\n}\n\nvoid DtwStringArray_merge(struct DtwStringArray *self, struct DtwStringArray *other){\n    for(int i = 0; i < other->size; i++){\n        DtwStringArray_append(self, other->strings[i]);\n    }\n}\n\n\nvoid DtwStringArray_represent(struct DtwStringArray *self){\n    for(int i = 0; i < self->size; i++){\n        printf(\"%s\\n\", self->strings[i]);\n    }\n}\n\n\n\nvoid DtwStringArray_sort(struct DtwStringArray *self) {\n\n    qsort(self->strings, self->size, sizeof(char*), private_dtw_string_cmp);\n\n\n}\n\nstruct DtwStringArray * DtwStringArray_clone(DtwStringArray *self){\n    DtwStringArray  *clone = newDtwStringArray();\n    for(int i = 0; i< self->size; i++){\n        DtwStringArray_append(clone,self->strings[i]);\n    }\n    return clone;\n}\n\nchar * privateDtwStringArray_append_if_not_included(DtwStringArray *self,char *value){\n    long position=DtwStringArray_find_position(self,value);\n    if(position != -1){\n        free(value);\n        return self->strings[position];\n    }\n    DtwStringArray_append_getting_ownership(self,value);\n    return value;\n}\nvoid DtwStringArray_free(struct DtwStringArray *self){\n    for(int i = 0; i < self->size; i++){\n            free(self->strings[i]);\n    }\n\n    free(self->strings);\n    free(self);\n}\n"
	}, {
		"path":	"src/string_array/string_array.h",
		"original_path":	"src/string_array/string_array.h",
		"dir":	"src/string_array/",
		"full_name":	"string_array.h",
		"name":	"string_array",
		"extension":	"h",
		"hardware_sha256":	"f90c8cff80bef037d62a16cf202129067ec0c49231487100372f497d554bcd13",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	997,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	997,
		"content_sha256":	"f90c8cff80bef037d62a16cf202129067ec0c49231487100372f497d554bcd13",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwStringArray {\n  int size;\n\n  char **strings;\n\n\n\n}DtwStringArray;\n\n// End the structure with a semicolon\nint  DtwStringArray_find_position(struct DtwStringArray *self, const char *string);\n\n\nvoid DtwStringArray_append_getting_ownership(struct DtwStringArray *self, char *string);\n\nvoid DtwStringArray_append(struct DtwStringArray *self, const char *string);\n\nvoid DtwStringArray_pop(struct DtwStringArray *self, int position);\n\nvoid DtwStringArray_merge(struct DtwStringArray *self, struct DtwStringArray *other);\nvoid DtwStringArray_represent(struct DtwStringArray *self);\nvoid DtwStringArray_free(struct DtwStringArray *self);\nvoid DtwStringArray_sort(struct DtwStringArray *self);\n\nvoid DtwStringArray_set_value(struct DtwStringArray *self, int index, const char *value);\n\nstruct DtwStringArray * newDtwStringArray();\n\nchar * privateDtwStringArray_append_if_not_included(DtwStringArray *self,char *value);\n\nstruct DtwStringArray * DtwStringArray_clone(DtwStringArray *self);\n\n"
	}, {
		"path":	"src/string_functions/",
		"original_path":	"src/string_functions/",
		"dir":	"src/string_functions/"
	}, {
		"path":	"src/string_functions/string_functions.c",
		"original_path":	"src/string_functions/string_functions.c",
		"dir":	"src/string_functions/",
		"full_name":	"string_functions.c",
		"name":	"string_functions",
		"extension":	"c",
		"hardware_sha256":	"af8a35eb86b269ebd2d2b411a1a254527213b9a6b8a53c3f94b7c6d334d41917",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	5875,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	5875,
		"content_sha256":	"af8a35eb86b269ebd2d2b411a1a254527213b9a6b8a53c3f94b7c6d334d41917",
		"is_binary":	false,
		"content":	"\n\nvoid private_dtw_remove_double_bars_from_string_array(struct DtwStringArray*path){\n    for(int i =0;i< path->size;i++){\n        char *buffer = private_dtw_format_path(path->strings[i]);\n        free(path->strings[i]);\n        path->strings[i] = buffer;\n    }\n}\n\nchar *dtw_concat_path(const char *path1, const char *path2){\n\n    if(!path1){\n        return strdup(path2);\n    }\n\n    if(!path2){\n        return strdup(path1);\n    }\n\n    char *path = (char *)malloc(strlen(path1) + strlen(path2) + 3);\n\n    if(dtw_ends_with(path1, \"/\") || dtw_ends_with(path1, \"\\\\\")){\n        sprintf(path,\"%s%s\",path1,path2);\n\n    }\n    else{\n        sprintf(path,\"%s/%s\",path1,path2);\n\n    }\n    return path;\n}\n\nchar * private_dtw_format_vaarg(const char *expresion, va_list args){\n\n    va_list args_copy;\n    va_copy(args_copy, args);\n    long required_size = vsnprintf(NULL, 0,expresion,args_copy);\n    va_end(args_copy);\n    char *buffer = (char*)malloc(sizeof(char) * required_size + 2);\n    vsnprintf(buffer,sizeof (char) * required_size+1,expresion,args);\n    return buffer;\n}\n\nchar *private_dtw_format_path(const char *path){\n    int path_size = (int)strlen(path);\n    char *buffer = (char*)malloc((path_size+2) * sizeof(char));\n    int buffer_size = 0;\n    bool already_concatened = false;\n    for(long i = 0; i < path_size;i++){\n        char current_char = path[i];\n\n        bool is_a_divisor =current_char == '\\\\' || current_char == '/';\n\n        if(is_a_divisor && already_concatened){\n            continue;\n        }\n        if(is_a_divisor){\n#ifdef __linux\n            buffer[buffer_size] = '/';\n#else\n            buffer[buffer_size] = '\\\\';\n#endif\n            buffer_size+=1;\n            already_concatened = true;\n            continue;\n        }\n\n        already_concatened = false;\n        buffer[buffer_size] = current_char;\n        buffer_size+=1;\n\n    }\n    buffer[buffer_size] = '\\0';\n    return buffer;\n}\n\n\nchar * private_dtw_sub_str(const char *str, long start,long end){\n    long size = end - start;\n    char *value = (char*)malloc(size+ 2);\n\n    for(long i = 0; i <size; i++){\n        value[i] = str[i+start];\n    }\n    value[size] = '\\0';\n    return value;\n}\n\nint private_dtw_string_cmp(const void *a, const void *b){\n    const char *str_a = *(const char **)a;\n    const char *str_b = *(const char **)b;\n    return strcmp(str_a, str_b);\n}\n\n\nbool dtw_starts_with(const char *string, const char *prefix){\n    if(!string || !prefix){\n        return false;\n    }\n    if(strncmp(string, prefix, strlen(prefix)) == 0){\n        return true;\n    }\n    return false;\n}\n\nbool dtw_ends_with(const char *string, const char *suffix){\n    if(strlen(string) < strlen(suffix)){\n        return false;\n    }\n    if(strcmp(string + strlen(string) - strlen(suffix), suffix) == 0){\n        return true;\n    }\n    return false;\n}\n\nchar *private_dtw_replace_string_once(const char *target, const char *old_element, const char *new_element) {\n\n    const char *pos = strstr(target, old_element);\n\n    int size_of_old_element = (int)strlen(old_element);\n    int size_of_new_element = (int)strlen(new_element);\n    // Allocate memory for the new string\n    char *result = (char *)malloc(strlen(target) + size_of_new_element - size_of_old_element + 1);\n\n    // Copy the part of the original string before the old substring\n    strncpy(result, target, pos - target);\n\n    // Copy the new substring to the result string\n    strcpy(result + (pos - target), new_element);\n\n    // Copy the rest of the original string after the old substring\n    strcpy(result + (pos - target) + size_of_new_element, pos + size_of_old_element);\n\n    return result;\n\n    \n\n}\n\nchar* dtw_replace_string(const char *target, const char *old_element, const char *new_element) {\n    char *result = (char *)malloc(strlen(target) + 1);\n    strcpy(result, target);\n    char *temp = NULL;\n    while (strstr(result, old_element) != NULL) {\n        temp = private_dtw_replace_string_once(result, old_element, new_element);\n        free(result);\n        result = temp;\n    }\n    return result;\n}\n\n\n\nchar *private_dtw_change_beginning_of_string(const char *target,int start_element_to_remove_size, const char *new_element) {\n    int target_size = (int)strlen(target);\n    int new_element_size = (int)strlen(new_element);\n    char *result = (char *)malloc(target_size- start_element_to_remove_size + new_element_size   +2);\n    strcpy(result, new_element);\n    char *new_target = (char *)malloc(target_size - start_element_to_remove_size + 2);\n    strcpy(new_target, target + start_element_to_remove_size);\n    strcat(result, new_target);\n    free(new_target);\n    return result;\n}\n\n\n\nchar *private_dtw_realoc_formatting(char *ptr,const char *format,...){\n\n    va_list args;\n    va_start(args, format);\n    char *value = private_dtw_format_vaarg(format,args);\n    va_end(args);\n    if(ptr){\n        free(ptr);\n    }\n\n    return value;\n}\nchar *private_dtw_formatt(const char *format,...){\n\n    va_list args;\n    va_start(args, format);\n    char *value = private_dtw_format_vaarg(format,args);\n    va_end(args);\n    return value;\n}\nbool dtw_is_string_at_point(\n        const char *str,\n        long str_size,\n        const char *target,\n        long target_size,\n        long target_point\n        ){\n\n    if(target_size + target_point > str_size){\n        return false;\n    }\n    for(long i = 0; i < target_size; i++ ){\n        char current_char = target[i];\n        char char_to_compare = str[i+target_point];\n        if(current_char != char_to_compare){\n            return  false;\n        }\n    }\n    return true;\n}\n\nlong  dtw_index_of_string(const char *str,const char *element){\n    long str_size = (long)strlen(str);\n    long element_size = (long)strlen(element);\n\n    for(int i = 0; i <str_size; i++){\n        if(dtw_is_string_at_point(str,str_size,element,element_size,i)){\n            return i;\n        }\n    }\n    return -1;\n}"
	}, {
		"path":	"src/string_functions/string_functions.h",
		"original_path":	"src/string_functions/string_functions.h",
		"dir":	"src/string_functions/",
		"full_name":	"string_functions.h",
		"name":	"string_functions",
		"extension":	"h",
		"hardware_sha256":	"91fddfc5d6cfcaa73639e960b313c24c91f5e728f430e372c86d9a88a86763c6",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1303,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1303,
		"content_sha256":	"91fddfc5d6cfcaa73639e960b313c24c91f5e728f430e372c86d9a88a86763c6",
		"is_binary":	false,
		"content":	"\n\nchar *dtw_concat_path(const char *path1, const char *path2);\n\nDtwStringArray* private_dtw_remove_start_path(struct DtwStringArray *paths,const char *path_to_remove);\n\nchar *private_dtw_format_path(const char *path);\n\nvoid private_dtw_remove_double_bars_from_string_array(struct DtwStringArray*path);\n\nchar * private_dtw_format_vaarg(const char *expresion, va_list args);\n\nchar *private_dtw_realoc_formatting(char *ptr,const char *format,...);\n\nchar *private_dtw_formatt(const char *format,...);\n\nchar * private_dtw_sub_str(const char *str, long start,long end);\n\nint private_dtw_string_cmp(const void *a, const void *b);\n\nbool dtw_is_string_at_point(\n        const char *str,\n        long str_size,\n        const char *target,\n        long target_size,\n        long target_point\n);\n\nlong  dtw_index_of_string(const char *str,const char *element);\n\nbool dtw_starts_with(const char *string, const char *prefix);\nbool dtw_ends_with(const char *string, const char *suffix);\nchar *private_dtw_replace_string_once(const char *target, const char *old_element, const char *new_element);\nchar* dtw_replace_string(const char *target, const char *old_element, const char *new_element);\n\nchar *private_dtw_change_beginning_of_string(const char *target,int start_element_to_remove_size, const char *new_element);\n\n"
	}, {
		"path":	"src/transaction/",
		"original_path":	"src/transaction/",
		"dir":	"src/transaction/"
	}, {
		"path":	"src/transaction/action/",
		"original_path":	"src/transaction/action/",
		"dir":	"src/transaction/action/"
	}, {
		"path":	"src/transaction/action/action.c",
		"original_path":	"src/transaction/action/action.c",
		"dir":	"src/transaction/action/",
		"full_name":	"action.c",
		"name":	"action",
		"extension":	"c",
		"hardware_sha256":	"f5df63d11c608477994a9947d172fe88c492b8b98465046f98525a2a9049affd",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	3368,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	3368,
		"content_sha256":	"f5df63d11c608477994a9947d172fe88c492b8b98465046f98525a2a9049affd",
		"is_binary":	false,
		"content":	"\n\nDtwActionTransaction * newDtwActionTransaction(){\n    DtwActionTransaction *self = (DtwActionTransaction*) malloc(sizeof (DtwActionTransaction));\n    *self= (DtwActionTransaction){0};\n    return self;\n}\n\n\nDtwActionTransaction * DtwActionTransaction_write_any(const char *source, unsigned  char *content,long size,bool is_binary){\n    DtwActionTransaction *self = newDtwActionTransaction();\n    self->action_type = DTW_ACTION_WRITE;\n    self->content = (unsigned char*)malloc(size +2);\n    memcpy(self->content,content,size);\n    self->content[size] = '\\0';\n    self->size = size;\n    self->source = strdup(source);\n    self->is_binary = is_binary;\n    return self;\n}\n\n\nDtwActionTransaction * DtwActionTransaction_move_any(const char *source, const char *dest){\n    DtwActionTransaction *self = newDtwActionTransaction();\n    self->action_type = DTW_ACTION_MOVE;\n    self->source = strdup(source);\n    self->dest = strdup(dest);\n    return self;\n\n}\n\n\nDtwActionTransaction * DtwActionTransaction_copy_any(const char *source, const char *dest){\n    DtwActionTransaction *self = newDtwActionTransaction();\n    self->action_type = DTW_ACTION_COPY;\n    self->source = strdup(source);\n    self->dest = strdup(dest);\n    return self;\n}\nDtwActionTransaction * DtwActionTransaction_move_any_merging(const char *source, const char *dest){\n    DtwActionTransaction *self = newDtwActionTransaction();\n    self->action_type = DTW_ACTION_MOVE_MERGING;\n    self->source = strdup(source);\n    self->dest = strdup(dest);\n    return self;\n}\n\nDtwActionTransaction * DtwActionTransaction_copy_any_merging(const char *source, const char *dest){\n    DtwActionTransaction *self = newDtwActionTransaction();\n    self->action_type = DTW_ACTION_COPY_MERGING;\n    self->source = strdup(source);\n    self->dest = strdup(dest);\n    return self;\n}\n\nDtwActionTransaction * DtwActionTransaction_delete_any(const char *source){\n    DtwActionTransaction *self = newDtwActionTransaction();\n    self->action_type = DTW_ACTION_DELETE;\n    self->source = strdup(source);\n    return self;\n}\n\n\n\nvoid DtwActionTransaction_commit(DtwActionTransaction* self,const char *path){\n\n    char *formated_source = dtw_concat_path(path,self->source);\n\n\n    if(self->action_type == DTW_ACTION_WRITE){\n        dtw_write_any_content(formated_source,self->content,self->size);\n        free(formated_source);\n        return;\n    }\n    if(self->action_type == DTW_ACTION_DELETE){\n        dtw_remove_any(formated_source);\n        free(formated_source);\n        return;\n    }\n    char *formated_dest = dtw_concat_path(path,self->dest);\n\n    if(self->action_type == DTW_ACTION_MOVE){\n        dtw_move_any(formated_source,formated_dest,DTW_NOT_MERGE);\n    }\n\n    if(self->action_type == DTW_ACTION_MOVE_MERGING){\n        dtw_move_any(formated_source,formated_dest,DTW_MERGE);\n    }\n\n    if(self->action_type == DTW_ACTION_COPY){\n        dtw_copy_any(formated_source,formated_dest,DTW_NOT_MERGE);\n    }\n\n    if(self->action_type == DTW_ACTION_COPY_MERGING){\n        dtw_copy_any(formated_source,formated_dest,DTW_MERGE);\n    }\n\n    free(formated_dest);\n    free(formated_source);\n\n}\n\n\nvoid DtwActionTransaction_free(DtwActionTransaction* self){\n\n    if(self->content){\n        free(self->content);\n    }\n    if(self->source){\n        free(self->source);\n    }\n    if(self->dest){\n        free(self->dest);\n    }\n    free(self);\n}\n"
	}, {
		"path":	"src/transaction/action/action.h",
		"original_path":	"src/transaction/action/action.h",
		"dir":	"src/transaction/action/",
		"full_name":	"action.h",
		"name":	"action",
		"extension":	"h",
		"hardware_sha256":	"be15bfa9701969a8dd3995553d9968952f7d3f0b7d4c5482f32ca6d71f2c6b5b",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1661,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1661,
		"content_sha256":	"be15bfa9701969a8dd3995553d9968952f7d3f0b7d4c5482f32ca6d71f2c6b5b",
		"is_binary":	false,
		"content":	"\n\nenum {\n    DTW_ACTION_FILE_NOT_FOUND,\n    DTW_ACTION_ITS_NOT_JSON,\n    DTW_ACTION_WRITE,\n    DTW_ACTION_MOVE,\n    DTW_ACTION_MOVE_MERGING,\n    DTW_ACTION_COPY,\n    DTW_ACTION_COPY_MERGING,\n    DTW_ACTION_DELETE\n};\n\n\ntypedef struct DtwActionTransaction{\n    short action_type;\n    unsigned  char *content;\n    long size;\n    bool is_binary;\n\n    char *dest;\n    char *source;\n\n}DtwActionTransaction;\n\nDtwActionTransaction *newDtwActionTransaction();\n\nDtwJsonTransactionError * private_dtw_validate_json_action_transaction(cJSON *json_obj);\n\n\nDtwActionTransaction * private_DtwActionTransaction_parse_json_object(cJSON *json_obj);\n\n\nDtwActionTransaction * DtwActionTransaction_write_any(const char *source,unsigned  char *content,long size,bool is_binary);\n\nDtwActionTransaction * DtwActionTransaction_move_any(const char *source, const char *dest);\n\nDtwActionTransaction * DtwActionTransaction_copy_any(const char *source, const char *dest);\n\nDtwActionTransaction * DtwActionTransaction_move_any_merging(const char *source, const char *dest);\n\nDtwActionTransaction * DtwActionTransaction_copy_any_merging(const char *source, const char *dest);\n\nDtwActionTransaction * DtwActionTransaction_delete_any(const char *source);\n\nshort DtwActionTransaction_convert_action_to_integer(char *action);\n\n\nconst char * DtwActionTransaction_convert_action_to_string(int action);\n\n\ncJSON *  private_DtwActionTransaction_create_json_object(DtwActionTransaction* self);\n\n\nvoid DtwActionTransaction_commit(DtwActionTransaction* self,const char *path);\n\nvoid DtwActionTransaction_represent(DtwActionTransaction* self);\n\nvoid DtwActionTransaction_free(DtwActionTransaction* self);\n"
	}, {
		"path":	"src/transaction/action/action_parsment.c",
		"original_path":	"src/transaction/action/action_parsment.c",
		"dir":	"src/transaction/action/",
		"full_name":	"action_parsment.c",
		"name":	"action_parsment",
		"extension":	"c",
		"hardware_sha256":	"b22731bcbafc5ca353e260f395dcabd37660ce889e1a37317195d9dd47e33c89",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	7123,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	7123,
		"content_sha256":	"b22731bcbafc5ca353e260f395dcabd37660ce889e1a37317195d9dd47e33c89",
		"is_binary":	false,
		"content":	"\nshort DtwActionTransaction_convert_action_to_integer(char *action){\n    if(strcmp(action,\"write\") == 0){\n        return DTW_ACTION_WRITE;\n    }\n\n    if(strcmp(action,\"move\") == 0){\n        return DTW_ACTION_MOVE;\n    }\n\n    if(strcmp(action,\"copy\") == 0){\n        return DTW_ACTION_COPY;\n    }\n\n    if(strcmp(action,\"delete\") == 0){\n        return DTW_ACTION_DELETE;\n    }\n    return -1;\n\n}\n\nconst char * DtwActionTransaction_convert_action_to_string(int action){\n    if(action == DTW_ACTION_WRITE){\n        return \"write\";\n    }\n    if(action == DTW_ACTION_MOVE){\n        return \"move\";\n    }\n\n    if(action == DTW_ACTION_COPY){\n        return \"copy\";\n    }\n    if(action == DTW_ACTION_DELETE){\n        return \"delete\";\n    }\n    return NULL;\n}\n\nDtwJsonTransactionError * private_dtw_validate_json_action_transaction(cJSON *json_obj){\n\n    if(json_obj->type != cJSON_Object ){\n        return private_new_DtwJsonTransactionError(\n                JSON_TRANSACTION_WRONG_TYPE,\n                \"the action object its not an object\",\n                NULL\n        );\n    }\n\n    cJSON *action = cJSON_GetObjectItem(json_obj,\"action\");\n\n    if(!action){\n        return private_new_DtwJsonTransactionError(\n                JSON_TRANSACTION_NOT_PRESENT_VALUE,\n                \"the action is not present\",\n                \"[\\\"action\\\"]\"\n        );\n    }\n\n    if(action->type != cJSON_String){\n        return private_new_DtwJsonTransactionError(\n                JSON_TRANSACTION_WRONG_TYPE,\n                \"the action is not an string\",\n                \"[\\\"action\\\"]\"\n        );\n    }\n\n\n    int converted_action = DtwActionTransaction_convert_action_to_integer(action->valuestring);\n\n    if(converted_action == -1){\n\n        char *formated_mensage = (char*)calloc(sizeof (char),strlen(action->valuestring) + 30);\n        sprintf(formated_mensage,\"the action: %s its not valid\",action->valuestring);\n        DtwJsonTransactionError  *error = private_new_DtwJsonTransactionError(\n                JSON_TRANSACTION_INVALID_ACTION,\n                formated_mensage,\n                \"[\\\"action\\\"]\"\n        );\n        free(formated_mensage);\n        return error;\n    }\n\n    if(converted_action == DTW_ACTION_WRITE){\n        cJSON  *content = cJSON_GetObjectItem(json_obj,\"content\");\n        if(!content){\n            return private_new_DtwJsonTransactionError(\n                    JSON_TRANSACTION_NOT_PRESENT_VALUE,\n                    \"the content is not present\",\n                    \"[\\\"content\\\"]\"\n            );\n        }\n        if(content->type != cJSON_String){\n            return private_new_DtwJsonTransactionError(\n                    JSON_TRANSACTION_WRONG_TYPE,\n                    \"the content is not an string\",\n                    \"[\\\"content\\\"]\"\n            );\n        }\n        cJSON *is_binary = cJSON_GetObjectItem(json_obj,\"is binary\");\n        if(is_binary){\n            if(!cJSON_IsBool(is_binary)){\n                return private_new_DtwJsonTransactionError(\n                        JSON_TRANSACTION_WRONG_TYPE,\n                        \"the is binary is not an bool\",\n                        \"[\\\"is binary\\\"]\"\n                );\n            }\n        }\n\n    }\n\n\n\n\n    cJSON *source = cJSON_GetObjectItem(json_obj,\"source\");\n    if(!source){\n        return private_new_DtwJsonTransactionError(\n                JSON_TRANSACTION_NOT_PRESENT_VALUE,\n                \"the source is not present\",\n                \"[\\\"source\\\"]\"\n        );\n    }\n\n    if(source->type != cJSON_String){\n        return private_new_DtwJsonTransactionError(\n                JSON_TRANSACTION_WRONG_TYPE,\n                \"the source is not an string\",\n                \"[\\\"source\\\"]\"\n        );\n    }\n\n    if(converted_action == DTW_ACTION_MOVE || converted_action == DTW_ACTION_COPY){\n        cJSON *dest = cJSON_GetObjectItem(json_obj,\"dest\");\n\n        if(!dest){\n            return private_new_DtwJsonTransactionError(\n                    JSON_TRANSACTION_NOT_PRESENT_VALUE,\n                    \"the dest is not present\",\n                    \"[\\\"dest\\\"]\"\n            );\n        }\n        if(dest->type != cJSON_String){\n            return private_new_DtwJsonTransactionError(\n                    JSON_TRANSACTION_WRONG_TYPE,\n                    \"the dest is not an string\",\n                    \"[\\\"dest\\\"]\"\n            );\n        }\n    }\n    return NULL;\n\n}\n\n\nDtwActionTransaction * private_DtwActionTransaction_parse_json_object(cJSON *json_obj){\n    DtwActionTransaction  *self = newDtwActionTransaction();\n\n    char *action = cJSON_GetObjectItem(json_obj,\"action\")->valuestring;\n    self->action_type  = DtwActionTransaction_convert_action_to_integer(action);\n\n    char *source = cJSON_GetObjectItem(json_obj,\"source\")->valuestring;\n    self->source = strdup(source);\n\n    if(self->action_type == DTW_ACTION_DELETE){\n        return self;\n    }\n\n    if(self->action_type == DTW_ACTION_WRITE){\n        cJSON *is_binary = cJSON_GetObjectItem(json_obj,\"is binary\");\n\n        if(is_binary){\n            if(is_binary->valueint){\n                self->is_binary= true;\n            }\n        }\n\n        char *content = cJSON_GetObjectItem(json_obj,\"content\")->valuestring;\n        if(self->is_binary){\n            self->content = dtw_base64_decode(content,&self->size);\n        }\n        else{\n            self->content =(unsigned char*)strdup(content);\n            self->size =(long)strlen(content);\n        }\n\n        return self;\n    }\n    char *dest  = cJSON_GetObjectItem(json_obj,\"dest\")->valuestring;\n    self->dest = strdup(dest);\n    return self;\n}\n\ncJSON *  private_DtwActionTransaction_create_json_object(DtwActionTransaction* self){\n    cJSON * json_object = cJSON_CreateObject();\n    cJSON_AddStringToObject(json_object,\"action\",DtwActionTransaction_convert_action_to_string(self->action_type));\n\n    cJSON_AddStringToObject(json_object,\"source\",self->source);\n    if(self->action_type ==DTW_ACTION_WRITE){\n        if(self->is_binary){\n            char *converted = dtw_base64_encode(self->content,self->size);\n            cJSON_AddStringToObject(json_object,\"content\",converted);\n            free(converted);\n            cJSON_AddBoolToObject(json_object,\"is binary\",true);\n        }\n        else{\n            cJSON_AddStringToObject(json_object,\"content\",(char*)self->content);\n        }\n    }\n    if(self->action_type != DTW_ACTION_DELETE){\n        cJSON_AddStringToObject(json_object,\"dest\",self->dest);\n    }\n\n    return json_object;\n}\n\n\n\nvoid DtwActionTransaction_represent(DtwActionTransaction* self){\n\n    printf(\"\\taction: %s\\n\", DtwActionTransaction_convert_action_to_string(self->action_type));\n    printf(\"\\tsource:%s\\n\",self->source);\n    if(self->action_type == DTW_ACTION_WRITE){\n\n        if(!self->is_binary && self->size <  30){\n\n            printf(\"\\tcontent : %s\\n\",(char*)self->content);\n        }\n        else{\n            printf(\"\\tcontent: impossible to show\\n\");\n        }\n\n        printf(\"\\tsize:%ld\\n\",self->size);\n        printf(\"\\tis binary: %s\\n\",self->is_binary? \"true\":\"false\");\n        return;\n    }\n\n    if(self->action_type != DTW_ACTION_DELETE){\n        printf(\"\\tdest: %s\\n\",self->dest);\n    }\n\n}\n\n"
	}, {
		"path":	"src/transaction/declaration.h",
		"original_path":	"src/transaction/declaration.h",
		"dir":	"src/transaction/",
		"full_name":	"declaration.h",
		"name":	"declaration",
		"extension":	"h",
		"hardware_sha256":	"598be8fc62c572818e29096202b84f1df767b8e34a682afe9eada9371e31e30b",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	111,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	111,
		"content_sha256":	"598be8fc62c572818e29096202b84f1df767b8e34a682afe9eada9371e31e30b",
		"is_binary":	false,
		"content":	"#include \"json_error/json_transaction_error.h\"\n#include \"action/action.h\"\n#include \"transaction/transaction.h\"\n"
	}, {
		"path":	"src/transaction/definition.c",
		"original_path":	"src/transaction/definition.c",
		"dir":	"src/transaction/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"d0f2b5d5c65e3aa07aafa31b936b434eee36c64b5dffb32720d3bba9dd2ac806",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	194,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	194,
		"content_sha256":	"d0f2b5d5c65e3aa07aafa31b936b434eee36c64b5dffb32720d3bba9dd2ac806",
		"is_binary":	false,
		"content":	"#include \"json_error/json_transaction_error.c\"\n\n#include \"action/action.c\"\n#include \"action/action_parsment.c\"\n\n#include \"transaction/transaction.c\"\n#include \"transaction/transaction_parsment.c\""
	}, {
		"path":	"src/transaction/json_error/",
		"original_path":	"src/transaction/json_error/",
		"dir":	"src/transaction/json_error/"
	}, {
		"path":	"src/transaction/json_error/json_transaction_error.c",
		"original_path":	"src/transaction/json_error/json_transaction_error.c",
		"dir":	"src/transaction/json_error/",
		"full_name":	"json_transaction_error.c",
		"name":	"json_transaction_error",
		"extension":	"c",
		"hardware_sha256":	"e9c119d4f84dfdc44beab9a0042e039575fecf851acc17ee0028a8b2642dd52a",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1149,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1149,
		"content_sha256":	"e9c119d4f84dfdc44beab9a0042e039575fecf851acc17ee0028a8b2642dd52a",
		"is_binary":	false,
		"content":	"\n\n\n\n\nDtwJsonTransactionError * private_new_DtwJsonTransactionError( int code,const char *mensage,const  char *path){\n    DtwJsonTransactionError *self = (DtwJsonTransactionError*) malloc(sizeof(DtwJsonTransactionError));\n    self->code  = code;\n    self->mensage = strdup(mensage);\n    self->path = NULL;\n    if(path){\n        self->path = strdup(path);\n    }\n\n    return self;\n}\n\nvoid DtwJsonTransactionError_represent(struct DtwJsonTransactionError *self){\n    printf(\"code: %d\\n\",self->code);\n    printf(\"mensage:%s\\n\",self->mensage);\n    if(self->path){\n        printf(\"path: %s\",self->path);\n    }\n}\n\nvoid DtwJsonTransactionError_prepend_path(struct DtwJsonTransactionError *self,char *path){\n    if(self->path){\n\n        char *new_path = (char*)calloc(sizeof (char), strlen(self->path) + strlen(path) + 2);\n\n        sprintf(new_path,\"%s%s\",path,self->path);\n\n        free(self->path);\n        self->path = new_path;\n        return;\n    }\n    self->path = strdup(path);\n}\n\n\nvoid DtwJsonTransactionError_free(struct DtwJsonTransactionError *self){\n    free(self->mensage);\n    if(self->path){\n        free(self->path);\n    }\n    free(self);\n\n}\n\n"
	}, {
		"path":	"src/transaction/json_error/json_transaction_error.h",
		"original_path":	"src/transaction/json_error/json_transaction_error.h",
		"dir":	"src/transaction/json_error/",
		"full_name":	"json_transaction_error.h",
		"name":	"json_transaction_error",
		"extension":	"h",
		"hardware_sha256":	"8230b23ffe566ab1a7b40b680f4b93b29f8102924778bcd3c621752bb02a664b",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	596,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	596,
		"content_sha256":	"8230b23ffe566ab1a7b40b680f4b93b29f8102924778bcd3c621752bb02a664b",
		"is_binary":	false,
		"content":	"enum {\n\n    JSON_TRANSACTION_WRONG_TYPE,\n    JSON_TRANSACTION_NOT_PRESENT_VALUE,\n    JSON_TRANSACTION_INVALID_ACTION\n};\ntypedef struct DtwJsonTransactionError{\n    int code;\n    char *mensage;\n    char *path;\n\n\n}DtwJsonTransactionError;\n\nDtwJsonTransactionError * private_new_DtwJsonTransactionError( int code,const char *mensage,const  char *path);\n\nvoid DtwJsonTransactionError_represent(struct DtwJsonTransactionError *self);\n\nvoid DtwJsonTransactionError_prepend_path(struct DtwJsonTransactionError *self,char *path);\n\nvoid DtwJsonTransactionError_free(struct DtwJsonTransactionError *self);\n"
	}, {
		"path":	"src/transaction/transaction/",
		"original_path":	"src/transaction/transaction/",
		"dir":	"src/transaction/transaction/"
	}, {
		"path":	"src/transaction/transaction/transaction.c",
		"original_path":	"src/transaction/transaction/transaction.c",
		"dir":	"src/transaction/transaction/",
		"full_name":	"transaction.c",
		"name":	"transaction",
		"extension":	"c",
		"hardware_sha256":	"2e98bab52f62edb350d4334193c2617d735cf27cbb90c939bba149e770282857",
		"last_modification_in_unix":	1719383785,
		"hardware_content_size":	4227,
		"last_modification":	"2024-06-26 03:36:25",
		"content_size":	4227,
		"content_sha256":	"2e98bab52f62edb350d4334193c2617d735cf27cbb90c939bba149e770282857",
		"is_binary":	false,
		"content":	"\n\nDtwTransaction * newDtwTransaction(){\n    DtwTransaction *self = (DtwTransaction*) malloc(sizeof(DtwTransaction));\n    self->actions = (DtwActionTransaction **) malloc(sizeof (DtwActionTransaction**));\n    self->size = 0;\n\n    return self;\n}\n\nvoid DtwTransaction_append_action(struct DtwTransaction *self,struct DtwActionTransaction  *action){\n    self->actions =  (DtwActionTransaction**)realloc(\n            self->actions,\n            (sizeof(DtwActionTransaction*) * (self->size+1))\n    );\n    self->actions[self->size] = action;\n    self->size++;\n}\n\n\nvoid DtwTransaction_remove_from_index(DtwTransaction *self,long index){\n\n\n    DtwActionTransaction_free(self->actions[index]);\n    self->size -=1;\n    if(self->size == 0){\n        return;\n    }\n    for(long i = index; i < self->size; i++){\n        self->actions[i] = self->actions[i+1];\n    }\n\n}\nvoid DtwTransaction_filter(DtwTransaction *self,bool (*callback)(DtwActionTransaction *action)){\n    for(long i = 0; i < self->size; i++){\n        DtwActionTransaction *current = self->actions[i];\n        if(!callback(current)){\n            DtwTransaction_remove_from_index(self,i);\n            i-=1;\n        }\n    }\n}\n\nvoid DtwTransaction_remove_from_source(DtwTransaction *self,const char *source){\n    for(long i = 0; i < self->size; i++){\n        DtwActionTransaction *current = self->actions[i];\n        if(strcmp(current->source,source) ==0){\n            DtwTransaction_remove_from_index(self,i);\n            i-=1;\n        }\n    }\n}\n\n\nvoid DtwTransaction_write_any(struct DtwTransaction *self,const char *path,unsigned char *content, long size,bool is_binary){\n    DtwActionTransaction * action = DtwActionTransaction_write_any(path,content,size,is_binary);\n    DtwTransaction_append_action(self,action);\n}\n\nvoid DtwTransaction_write_string(struct DtwTransaction *self,const char *path,const char *content){\n    DtwActionTransaction * action = DtwActionTransaction_write_any(path,(unsigned char*)content, strlen(content),false);\n    DtwTransaction_append_action(self,action);\n}\n\n\nvoid DtwTransaction_write_long(struct DtwTransaction *self,const char *path,long value){\n    char converted[20] ={0};\n    sprintf(converted,\"%ld\",value);\n    DtwTransaction_write_string(self,path,converted);\n}\n\nvoid DtwTransaction_write_bool(struct DtwTransaction *self,const char *path,bool value){\n    if(value){\n        DtwTransaction_write_string(self,path,\"t\");\n    }\n    else{\n        DtwTransaction_write_string(self,path,\"f\");\n    }\n}\n\nvoid DtwTransaction_write_double(struct DtwTransaction *self,const char *path,double value){\n    char converted[20] ={0};\n    sprintf(converted,\"%lf\",value);\n    DtwTransaction_write_string(self,path,converted);\n}\n\n\nvoid DtwTransaction_move_any(struct DtwTransaction *self,const char *source,const char *dest){\n    DtwActionTransaction * action = DtwActionTransaction_move_any(source,dest);\n    DtwTransaction_append_action(self,action);\n}\n\nvoid DtwTransaction_copy_any(struct DtwTransaction *self,const char *source,const char *dest){\n    DtwActionTransaction * action = DtwActionTransaction_copy_any(source,dest);\n    DtwTransaction_append_action(self,action);\n}\n\nvoid DtwTransaction_move_any_merging(struct DtwTransaction *self,const char *source,const char *dest){\n    DtwActionTransaction * action = DtwActionTransaction_move_any_merging(source,dest);\n    DtwTransaction_append_action(self,action);\n}\n\n\nvoid DtwTransaction_copy_any_merging(struct DtwTransaction *self,const char *source,const char *dest){\n    DtwActionTransaction * action = DtwActionTransaction_copy_any_merging(source,dest);\n    DtwTransaction_append_action(self,action);\n}\n\n\nvoid DtwTransaction_delete_any(struct DtwTransaction *self,const char *source){\n     DtwActionTransaction  *action = DtwActionTransaction_delete_any(source);\n     DtwTransaction_append_action(self,action);\n}\n\n\n\nvoid DtwTransaction_commit(struct DtwTransaction *self,const char *path){\n    for(int i = 0; i < self->size; i++){\n        DtwActionTransaction_commit(self->actions[i],path);\n    }\n}\n\n\n\nvoid DtwTransaction_free(struct DtwTransaction *self){\n    for(int i =0; i < self->size; i++){\n        DtwActionTransaction_free(self->actions[i]);\n    }\n    free(self->actions);\n    free(self);\n}\n"
	}, {
		"path":	"src/transaction/transaction/transaction.h",
		"original_path":	"src/transaction/transaction/transaction.h",
		"dir":	"src/transaction/transaction/",
		"full_name":	"transaction.h",
		"name":	"transaction",
		"extension":	"h",
		"hardware_sha256":	"a1ca3d264f4332c983f477188c47fb7fcfe74843d65c27799cf2dc742aca2c7c",
		"last_modification_in_unix":	1719383829,
		"hardware_content_size":	2137,
		"last_modification":	"2024-06-26 03:37:09",
		"content_size":	2137,
		"content_sha256":	"a1ca3d264f4332c983f477188c47fb7fcfe74843d65c27799cf2dc742aca2c7c",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwTransaction{\n\n    DtwActionTransaction  **actions;\n    long size;\n\n\n\n}DtwTransaction;\n\nDtwTransaction * newDtwTransaction();\n\nDtwTransaction * newDtwTransaction_from_json(cJSON *json_entry);\n\nDtwJsonTransactionError * dtw_validate_json_transaction(cJSON *json_entry);\n\nDtwJsonTransactionError * dtw_validate_json_transaction_file(const char *filename);\n\n\nDtwTransaction * newDtwTransaction_from_json_file(const char *filename);\n\nvoid DtwTransaction_remove_from_index(DtwTransaction *self,long index);\n\nvoid DtwTransaction_remove_from_source(DtwTransaction *self,const char *source);\n\nvoid DtwTransaction_filter(DtwTransaction *self,bool (*callback)(DtwActionTransaction *action));\n\nvoid DtwTransaction_append_action(struct DtwTransaction *self,struct DtwActionTransaction  *action);\n\nvoid DtwTransaction_write_any(struct DtwTransaction *self,const char *path,unsigned char *content, long size,bool is_binary);\n\nvoid DtwTransaction_write_string(struct DtwTransaction *self,const char *path,const char *content);\n\nvoid DtwTransaction_write_long(struct DtwTransaction *self,const char *path,long value);\n\nvoid DtwTransaction_write_bool(struct DtwTransaction *self,const char *path,bool value);\n\nvoid DtwTransaction_write_double(struct DtwTransaction *self,const char *path,double value);\n\nvoid DtwTransaction_move_any(struct DtwTransaction *self,const char *source,const char *dest);\n\nvoid DtwTransaction_move_any_merging(struct DtwTransaction *self,const char *source,const char *dest);\n\nvoid DtwTransaction_copy_any_merging(struct DtwTransaction *self,const char *source,const char *dest);\n\nvoid DtwTransaction_copy_any(struct DtwTransaction *self,const char *source,const char *dest);\n\nvoid DtwTransaction_delete_any(struct DtwTransaction *self,const char *source);\n\ncJSON * DtwTransaction_dumps_to_json(struct DtwTransaction *self);\n\nvoid DtwTransaction_dumps_to_json_file(struct DtwTransaction *self,const char *filename);\n\nvoid DtwTransaction_commit(struct DtwTransaction *self,const char *path);\n\nvoid DtwTransaction_represent(struct DtwTransaction *self);\n\n\nvoid DtwTransaction_free(struct DtwTransaction *self);\n"
	}, {
		"path":	"src/transaction/transaction/transaction_parsment.c",
		"original_path":	"src/transaction/transaction/transaction_parsment.c",
		"dir":	"src/transaction/transaction/",
		"full_name":	"transaction_parsment.c",
		"name":	"transaction_parsment",
		"extension":	"c",
		"hardware_sha256":	"01aa28c2a1cba707200b60c6215a27fad8f220e618c86d6c8c3885ae5c7c1a84",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	4208,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	4208,
		"content_sha256":	"01aa28c2a1cba707200b60c6215a27fad8f220e618c86d6c8c3885ae5c7c1a84",
		"is_binary":	false,
		"content":	"\n\nDtwJsonTransactionError * dtw_validate_json_transaction(cJSON *json_entry){\n    if(json_entry->type != cJSON_Array){\n        return private_new_DtwJsonTransactionError(\n                JSON_TRANSACTION_WRONG_TYPE,\n                \"the initial value its not an array\",\n                NULL\n                );\n    }\n    long  element_size = cJSON_GetArraySize(json_entry);\n    for(long  i = 0; i <element_size; i++){\n\n        cJSON *current_obj = cJSON_GetArrayItem(json_entry,i);\n\n        DtwJsonTransactionError  *current_error = private_dtw_validate_json_action_transaction(current_obj);\n        if(current_error){\n            char formated_path[20] = {0};\n            sprintf(formated_path,\"[%ld]\",i);\n            DtwJsonTransactionError_prepend_path(current_error,formated_path);\n\n            return current_error;\n        }\n\n    }\n\n    return NULL;\n}\n\nDtwJsonTransactionError * dtw_validate_json_transaction_file(const char *filename){\n    char *content = dtw_load_string_file_content(filename);\n    if(!content){\n        char *formated_mensage = (char*)calloc(sizeof (char), strlen(filename) + 50);\n        sprintf(formated_mensage, \"file: %s not found\",filename);\n        DtwJsonTransactionError  *error = private_new_DtwJsonTransactionError(\n                DTW_ACTION_FILE_NOT_FOUND,\n                formated_mensage,\n                NULL\n                );\n        free(formated_mensage);\n        return error;\n    }\n    cJSON *parsed = cJSON_Parse(content);\n    if(!parsed){\n        char *formated_mensage = (char*)calloc(sizeof (char), strlen(filename) + 50);\n        sprintf(formated_mensage, \"file: %s its not an valid json\",filename);\n        DtwJsonTransactionError  *error = private_new_DtwJsonTransactionError(\n                DTW_ACTION_ITS_NOT_JSON,\n                formated_mensage,\n                NULL\n        );\n        free(formated_mensage);\n        free(content);\n        return error;\n    }\n    DtwJsonTransactionError *generated_error = dtw_validate_json_transaction(parsed);\n\n    free(content);\n    cJSON_Delete(parsed);\n    return generated_error;\n}\n\n\nDtwTransaction * newDtwTransaction_from_json(cJSON *json_entry){\n    DtwJsonTransactionError *generated_error = dtw_validate_json_transaction(json_entry);\n    if(generated_error) {\n        DtwJsonTransactionError_free(generated_error);\n        return NULL;\n    }\n    DtwTransaction *self = newDtwTransaction();\n    long size = cJSON_GetArraySize(json_entry);\n    for(int i  = 0; i < size; i ++){\n        cJSON  *object_action = cJSON_GetArrayItem(json_entry,i);\n        DtwActionTransaction  *current_action = private_DtwActionTransaction_parse_json_object(object_action);\n        DtwTransaction_append_action(self,current_action);\n    }\n    return self;\n}\n\n\n\nDtwTransaction * newDtwTransaction_from_json_file(const char *filename){\n    char *content = dtw_load_string_file_content(filename);\n    if(!content){\n        return NULL;\n    }\n\n    cJSON  *element = cJSON_Parse(content);\n    free(content);\n    if(!element){\n        return NULL;\n    }\n\n    DtwJsonTransactionError *error = dtw_validate_json_transaction(element);\n    if(error){\n        DtwJsonTransactionError_free(error);\n        cJSON_Delete(element);\n        return NULL;\n    }\n\n\n    DtwTransaction  *self = newDtwTransaction_from_json(element);\n    cJSON_Delete(element);\n\n    return self;\n}\n\ncJSON * DtwTransaction_dumps_to_json(struct DtwTransaction *self){\n    cJSON * json_array = cJSON_CreateArray();\n    for(int i =0; i < self->size; i ++){\n\n        cJSON_AddItemToArray(\n                json_array,\n                private_DtwActionTransaction_create_json_object(self->actions[i])\n        );\n\n    }\n    return json_array;\n}\n\n\nvoid DtwTransaction_dumps_to_json_file(struct DtwTransaction *self,const char *filename){\n    cJSON *json_array = DtwTransaction_dumps_to_json(self);\n    char *result = cJSON_Print(json_array);\n    dtw_write_string_file_content(filename,result);\n    free(result);\n    cJSON_Delete(json_array);\n}\n\nvoid DtwTransaction_represent(struct DtwTransaction *self){\n\n    for(int i = 0; i < self->size; i++){\n\n        DtwActionTransaction_represent(self->actions[i]);\n        printf(\"------------------------------------\\n\");\n\n    }\n\n}"
	}, {
		"path":	"src/tree/",
		"original_path":	"src/tree/",
		"dir":	"src/tree/"
	}, {
		"path":	"src/tree/declarations.h",
		"original_path":	"src/tree/declarations.h",
		"dir":	"src/tree/",
		"full_name":	"declarations.h",
		"name":	"declarations",
		"extension":	"h",
		"hardware_sha256":	"4079dd5da714c0478ad5ea78b3dd635c3ea44e6abcf131c91ab1f3301a51a50a",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	178,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	178,
		"content_sha256":	"4079dd5da714c0478ad5ea78b3dd635c3ea44e6abcf131c91ab1f3301a51a50a",
		"is_binary":	false,
		"content":	"\n#include \"tree_props/tree_props.h\"\n#include \"json_error/json_error.h\"\n#include \"transaction_report/transaction_report.h\"\n#include \"tree_part/tree_part.h\"\n#include \"tree/tree.h\"\n"
	}, {
		"path":	"src/tree/definition.c",
		"original_path":	"src/tree/definition.c",
		"dir":	"src/tree/",
		"full_name":	"definition.c",
		"name":	"definition",
		"extension":	"c",
		"hardware_sha256":	"30c19993da122044ebeadeee05f6e7284b8881b263e6a705ab79ad7a93fab198",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	305,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	305,
		"content_sha256":	"30c19993da122044ebeadeee05f6e7284b8881b263e6a705ab79ad7a93fab198",
		"is_binary":	false,
		"content":	"#include \"tree_props/tree_props.c\"\n#include \"json_error/json_error.c\"\n#include \"transaction_report/transaction_report.c\"\n#include \"tree_part/tree_part.c\"\n#include \"tree_part/hardware_tree_part.c\"\n\n#include \"tree/json_tree.c\"\n#include \"tree/tree_finding.c\"\n#include \"tree/listage.c\"\n#include \"tree/tree.c\"\n"
	}, {
		"path":	"src/tree/json_error/",
		"original_path":	"src/tree/json_error/",
		"dir":	"src/tree/json_error/"
	}, {
		"path":	"src/tree/json_error/json_error.c",
		"original_path":	"src/tree/json_error/json_error.c",
		"dir":	"src/tree/json_error/",
		"full_name":	"json_error.c",
		"name":	"json_error",
		"extension":	"c",
		"hardware_sha256":	"903a71298c5f5b124b68b7a85f295213a008dbbf694ec7aebd7361874570c657",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	5973,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	5973,
		"content_sha256":	"903a71298c5f5b124b68b7a85f295213a008dbbf694ec7aebd7361874570c657",
		"is_binary":	false,
		"content":	" DtwJsonTreeError * newDtwJsonError(){\n     DtwJsonTreeError *self =(DtwJsonTreeError*)malloc(sizeof(struct DtwJsonTreeError));\n    return self;\n}\n\nDtwJsonTreeError * DtwJsonTreeError_validate_json_tree_by_cJSON(cJSON *json_tree){\n     struct DtwJsonTreeError *json_error = newDtwJsonError();\n    //verifiy if json_tre is not null\n    if(json_tree == NULL){\n        json_error->code = DTW_JSON_SYNTAX_ERROR;\n        json_error->menssage = \"json_tree is null\";\n        return json_error;\n    }\n\n    //verifiy if json_tre is an array\n    if(!cJSON_IsArray(json_tree)){\n        cJSON_Delete(json_tree);\n        json_error->code = DTW_JSON_TYPE_ERROR;\n        json_error->menssage = \"json_tree is not an array\";\n        return json_error;\n    }\n\n    int size = cJSON_GetArraySize(json_tree);\n    for(int i = 0; i < size; i++){\n        json_error->position = i;\n        cJSON *json_tree_part = cJSON_GetArrayItem(json_tree, i);\n        cJSON *path = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"path\");\n        cJSON *original_path = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"original_path\");\n        cJSON *hardware_sha = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"hardware_sha256\");\n        cJSON *hardware_content_size = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"hardware_content_size\");\n        cJSON *last_modification_in_unix_time = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"last_modification_in_unix_time\");\n        cJSON *content_size = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"content_size\");\n        cJSON *is_binary = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"is_binary\");\n        cJSON *content = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"content\");\n        cJSON *ignore = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"ignore\");\n        cJSON *pending_action = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"pending_action\");\n        //path is required\n        if(!cJSON_IsString(path)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_KEY_ERROR;\n            json_error->menssage = \"path is not a string\";\n            return json_error;\n        }\n\n        //Others are not required\n        if(original_path != NULL && !cJSON_IsString(original_path)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n            json_error->menssage = \"original_path is not a string\";\n            return json_error;\n        }\n        if(hardware_sha != NULL && !cJSON_IsString(hardware_sha)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n            json_error->menssage = \"hardware_sha is not a string\";\n            return json_error;\n        }\n        if(hardware_content_size != NULL && !cJSON_IsNumber(hardware_content_size)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n            json_error->menssage = \"hardware_content_size is not a number\";\n            return json_error;\n        }\n        if(last_modification_in_unix_time != NULL && !cJSON_IsNumber(last_modification_in_unix_time)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n            json_error->menssage = \"last_modification_in_unix_time is not a number\";\n            return json_error;\n        }\n        if(content_size != NULL && !cJSON_IsNumber(content_size)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n            json_error->menssage = \"content_size is not a number\";\n            return json_error;\n        }\n\n        if(is_binary != NULL && !cJSON_IsBool(is_binary)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n            json_error->menssage = \"is_binary is not a bool\";\n            return json_error;\n        }\n        if(content != NULL && !cJSON_IsString(content)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n            json_error->menssage = \"content is not a string\";\n            return json_error;\n        }\n        if(ignore != NULL && !cJSON_IsBool(ignore)){\n            cJSON_Delete(json_tree);\n            json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n            json_error->menssage = \"ignore is not a bool\";\n            return json_error;\n        }\n\n        if(pending_action != NULL && cJSON_IsNull(pending_action) == false){\n\n            if(cJSON_IsString(pending_action)){\n\n                int action = private_dtw_convert_string_to_action(\n                    cJSON_GetStringValue(pending_action)\n                );\n                if(action == DTW_ACTION_ERROR){\n                    cJSON_Delete(json_tree);\n                    json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n                    json_error->menssage = \"pending_action is not a valid action\";\n                    return json_error;\n                }\n            }\n            else{\n                cJSON_Delete(json_tree);\n                json_error->code = DTW_JSON_REQUIRED_VALUE_ERROR;\n                json_error->menssage = \"pending_action is not a valid action\";\n                return json_error;\n            }\n\n\n        }\n\n    }\n     DtwJsonTreeError_free(json_error);\n     return NULL;\n }\n\n DtwJsonTreeError * DtwJsonTreeError_validate_json_tree_by_content(const char *content){\n     cJSON *json_tree = cJSON_Parse(content);\n     DtwJsonTreeError *json_error = DtwJsonTreeError_validate_json_tree_by_cJSON(json_tree);\n     cJSON_Delete(json_tree);\n     return json_error;\n }\n\n\n\n\nvoid DtwJsonTreeError_represent( DtwJsonTreeError *self){\n\n    if(self == NULL){\n        return;\n    }\n    printf(\"code: %d\\n\", self->code);\n    printf(\"position: %d\\n\", self->position);\n    printf(\"menssage: %s\\n\", self->menssage);\n}\n\nvoid DtwJsonTreeError_free(struct DtwJsonTreeError *self){\n     if(self){\n         free(self);\n     }\n}"
	}, {
		"path":	"src/tree/json_error/json_error.h",
		"original_path":	"src/tree/json_error/json_error.h",
		"dir":	"src/tree/json_error/",
		"full_name":	"json_error.h",
		"name":	"json_error",
		"extension":	"h",
		"hardware_sha256":	"b322a371108729933a231a630d76ca66d90f7fe3bef82c2e22ccce3ad5a9aabb",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	657,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	657,
		"content_sha256":	"b322a371108729933a231a630d76ca66d90f7fe3bef82c2e22ccce3ad5a9aabb",
		"is_binary":	false,
		"content":	"#define DTW_JSON_TYPE_ERROR 1\n#define DTW_JSON_SYNTAX_ERROR 2\n#define DTW_JSON_REQUIRED_KEY_ERROR 3\n#define DTW_JSON_REQUIRED_VALUE_ERROR 4\n#define DTW_JSON_NOT_FOUND_ERROR 5\n#define DTW_ACTION_ERROR (-1)\n\n\ntypedef struct DtwJsonTreeError {\n    int code;\n    int position;\n    const char *menssage;\n\n\n}DtwJsonTreeError;\n\nDtwJsonTreeError * newDtwJsonError();\n\nDtwJsonTreeError * DtwJsonTreeError_validate_json_tree_by_cJSON(cJSON *json_tree);\n\nDtwJsonTreeError * DtwJsonTreeError_validate_json_tree_by_content(const char *content);\n\nvoid DtwJsonTreeError_represent(struct DtwJsonTreeError *self);\n\nvoid DtwJsonTreeError_free(struct DtwJsonTreeError *self);\n"
	}, {
		"path":	"src/tree/transaction_report/",
		"original_path":	"src/tree/transaction_report/",
		"dir":	"src/tree/transaction_report/"
	}, {
		"path":	"src/tree/transaction_report/transaction_report.c",
		"original_path":	"src/tree/transaction_report/transaction_report.c",
		"dir":	"src/tree/transaction_report/",
		"full_name":	"transaction_report.c",
		"name":	"transaction_report",
		"extension":	"c",
		"hardware_sha256":	"1253b56023b634d4418b61dd3f58a2d1414ef6936c167c08b8c6727c5b76bd37",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	1009,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	1009,
		"content_sha256":	"1253b56023b634d4418b61dd3f58a2d1414ef6936c167c08b8c6727c5b76bd37",
		"is_binary":	false,
		"content":	"\n\nstruct DtwTreeTransactionReport * newDtwTreeTransactionReport(){\n    struct DtwTreeTransactionReport *new_report = (struct DtwTreeTransactionReport *)malloc(sizeof(struct DtwTreeTransactionReport));\n    new_report->write = newDtwStringArray();\n    new_report->modify = newDtwStringArray();\n    new_report->remove = newDtwStringArray();\n    return new_report;\n}\n\nvoid  DtwTreeTransactionReport_represent(struct DtwTreeTransactionReport *report){\n    printf(\"Write:---------------------------------------\\n\");\n    DtwStringArray_represent(report->write);\n    printf(\"Modify:--------------------------------------\\n\");\n    DtwStringArray_represent(report->modify);\n    printf(\"Remove:--------------------------------------\\n\");\n    DtwStringArray_represent(report->remove);\n    puts(\"\");\n}\n\nvoid  DtwTreeTransactionReport_free(struct DtwTreeTransactionReport *report){\n    DtwStringArray_free(report->write);\n    DtwStringArray_free(report->modify);\n    DtwStringArray_free(report->remove);\n    free(report);\n}"
	}, {
		"path":	"src/tree/transaction_report/transaction_report.h",
		"original_path":	"src/tree/transaction_report/transaction_report.h",
		"dir":	"src/tree/transaction_report/",
		"full_name":	"transaction_report.h",
		"name":	"transaction_report",
		"extension":	"h",
		"hardware_sha256":	"b2f74dd7756d203871730f089bf07a897ff22f32ecfb953cdbe8c03244e3bda4",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	379,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	379,
		"content_sha256":	"b2f74dd7756d203871730f089bf07a897ff22f32ecfb953cdbe8c03244e3bda4",
		"is_binary":	false,
		"content":	"\ntypedef struct DtwTreeTransactionReport{\n    DtwStringArray *write;\n    DtwStringArray *modify;\n    DtwStringArray *remove;\n\n}DtwTreeTransactionReport;\n\nstruct DtwTreeTransactionReport * newDtwTreeTransactionReport();\nvoid  DtwTreeTransactionReport_represent(struct DtwTreeTransactionReport *report);\nvoid  DtwTreeTransactionReport_free(struct DtwTreeTransactionReport *report);"
	}, {
		"path":	"src/tree/tree/",
		"original_path":	"src/tree/tree/",
		"dir":	"src/tree/tree/"
	}, {
		"path":	"src/tree/tree/json_tree.c",
		"original_path":	"src/tree/tree/json_tree.c",
		"dir":	"src/tree/tree/",
		"full_name":	"json_tree.c",
		"name":	"json_tree",
		"extension":	"c",
		"hardware_sha256":	"dc8c07b5493bb0a1309c77c34c3921b4597bb65be16df457bf254e2b776aba9d",
		"last_modification_in_unix":	1719387416,
		"hardware_content_size":	9564,
		"last_modification":	"2024-06-26 04:36:56",
		"content_size":	9564,
		"content_sha256":	"dc8c07b5493bb0a1309c77c34c3921b4597bb65be16df457bf254e2b776aba9d",
		"is_binary":	false,
		"content":	"\n\nbool DtwTree_loads_json_tree(struct DtwTree *self, const char *all_tree){\n    //load json\n    cJSON *json_tree = cJSON_Parse(all_tree);\n    if(json_tree == NULL){\n        return false;\n    }\n    DtwJsonTreeError *json_error = DtwJsonTreeError_validate_json_tree_by_cJSON(json_tree);\n    if(json_error){\n        DtwJsonTreeError_free(json_error);\n        return  false;\n    }\n\n    int size = cJSON_GetArraySize(json_tree);\n    for(int i = 0; i < size; i++){\n\n        cJSON *json_tree_part = cJSON_GetArrayItem(json_tree, i);\n        cJSON *path = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"path\");\n        cJSON *original_path = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"original_path\");\n        cJSON *hardware_sha = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"hardware_sha256\");\n        cJSON *hardware_content_size = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"hardware_content_size\");\n        cJSON *last_modification_in_unix_time = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"last_modification_in_unix_time\");\n        cJSON *content_size = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"content_size\");\n        cJSON *is_binary = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"is_binary\");\n        cJSON *content = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"content\");\n        cJSON *pending_action = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"pending_action\");\n        cJSON *ignore = cJSON_GetObjectItemCaseSensitive(json_tree_part, \"ignore\");\n   \n        struct DtwTreePart *part = newDtwTreePartEmpty(\n                path->valuestring\n                );\n\n        if(original_path != NULL){\n            if(  part->path->original_path_string){\n                free(  part->path->original_path_string);\n            }\n            part->path->original_path_string = strdup(original_path->valuestring);\n\n        }\n\n        if(hardware_sha != NULL){\n            part->content_exist_in_hardware = true;\n            part->hawdware_content_sha = (char *)realloc(part->hawdware_content_sha,strlen(hardware_sha->valuestring)+1);\n            strcpy(part->hawdware_content_sha,hardware_sha->valuestring);\n            \n        }\n\n        if(hardware_content_size != NULL){\n            part->content_exist_in_hardware = true;\n            part->hardware_content_size = hardware_content_size->valueint;\n        }\n        \n        if(last_modification_in_unix_time != NULL){\n            part->last_modification_time = last_modification_in_unix_time->valueint;\n        }\n    \n        if(is_binary != NULL){\n            part->is_binary = is_binary->valueint;\n        }\n        \n        if(content_size != NULL){\n            part->content_size = content_size->valueint;\n        }\n\n        if(content != NULL){\n\n            if(part->is_binary){\n                long out_size;\n                unsigned char *decoded =dtw_base64_decode(\n                    content->valuestring,\n                    &out_size\n                );\n                DtwTreePart_set_binary_content(part,decoded,out_size);\n                free(decoded);\n            }\n           else{\n                DtwTreePart_set_string_content(part,content->valuestring);\n           } \n        }\n        if(pending_action != NULL &&  pending_action->valuestring){\n    \n            part->pending_action = private_dtw_convert_string_to_action(\n                pending_action->valuestring\n            );\n        }\n        if(ignore != NULL){\n            part->ignore = ignore->valueint;\n        }\n\n        DtwTree_add_tree_part_getting_onwership(self, part);\n        \n    }\n    cJSON_Delete(json_tree);\n    return  true;\n}\n\n\nbool DtwTree_loads_json_tree_from_file( DtwTree *self, const char *path){\n    char *content = dtw_load_string_file_content(path);\n    if(content == NULL){\n        return false;\n    }\n    bool result = DtwTree_loads_json_tree(self,content);\n    free(content);\n    return result;\n}\n\nchar * DtwTree_dumps_tree_json( DtwTree *self, DtwTreeProps  props){\n\n\n    DtwTreeProps formated_props = DtwTreeProps_format_props(props);\n\n    cJSON *json_array = cJSON_CreateArray();\n    for(int i = 0; i < self->size; i++){\n       \n        cJSON *json_tree_part = cJSON_CreateObject();\n        DtwTreePart *tree_part = self->tree_parts[i];\n        char *path_string = DtwPath_get_path(tree_part->path);\n        if(path_string ==NULL){\n            cJSON_Delete(json_tree_part);\n            continue;\n        }\n\n        if(formated_props.ignored_elements == DTW_INCLUDE && tree_part->ignore){\n            continue;\n        }\n        \n        if(tree_part->ignore){\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"ignore\", \n                cJSON_CreateBool(true)\n            );\n        }\n\n        cJSON_AddItemToObject(\n            json_tree_part, \n            \"path\", \n            cJSON_CreateString(path_string)\n        );\n        \n        \n        \n        if(formated_props.path_atributes == DTW_INCLUDE ){\n                char *dir_string = DtwPath_get_dir(tree_part->path);\n                char *full_name_string = DtwPath_get_full_name(tree_part->path);\n                char *name_string = DtwPath_get_name(tree_part->path);\n                char *extension_string = DtwPath_get_extension(tree_part->path);\n                if(tree_part->path->original_path_string != path_string){\n                    cJSON_AddItemToObject(\n                        json_tree_part, \n                        \"original_path\", \n                        cJSON_CreateString(tree_part->path->original_path_string)\n                    );\n                }\n                cJSON_AddItemToObject(\n                    json_tree_part, \n                    \"dir\", \n                    cJSON_CreateString(dir_string)\n                );\n                \n                cJSON_AddItemToObject(\n                    json_tree_part, \n                    \"full_name\", \n                    cJSON_CreateString(full_name_string)\n                );\n                \n                cJSON_AddItemToObject(\n                    json_tree_part, \n                    \"name\", \n                    cJSON_CreateString(name_string)\n                );\n                \n                cJSON_AddItemToObject(\n                    json_tree_part, \n                    \"extension\", \n                    cJSON_CreateString(extension_string)\n                );\n\n\n        }\n\n\n        if(formated_props.hadware_data == DTW_INCLUDE && tree_part->metadata_loaded){\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"hardware_sha256\", \n                cJSON_CreateString(tree_part->hawdware_content_sha)\n            );\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"last_modification_in_unix\", \n                cJSON_CreateNumber(tree_part->last_modification_time)\n            );\n\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"hardware_content_size\", \n                cJSON_CreateNumber(tree_part->hardware_content_size)\n            );\n\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"last_modification\", \n                cJSON_CreateString(tree_part->last_modification_in_str)\n            );\n        }\n\n        if(formated_props.content_data == DTW_INCLUDE && tree_part->content){\n            char *content_sha = DtwTreePart_get_content_sha(tree_part);\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"content_size\", \n                cJSON_CreateNumber(tree_part->content_size)\n            );\n\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"content_sha256\", \n                cJSON_CreateString(content_sha)\n            );\n\n        }\n\n        if(formated_props.content == DTW_INCLUDE && tree_part->content){\n\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"is_binary\", \n                cJSON_CreateBool(tree_part->is_binary)\n            );  \n            if(tree_part->is_binary == false){\n                cJSON_AddItemToObject(\n                    json_tree_part, \n                    \"content\", \n                    cJSON_CreateString(DtwTreePart_get_content_string_by_reference(tree_part))\n                );\n            }\n            else{\n                char *content_base64 = dtw_base64_encode(tree_part->content, tree_part->content_size);\n         \n     \n                cJSON_AddItemToObject(\n                    json_tree_part, \n                    \"content\", \n                    cJSON_CreateString(content_base64)\n                );  \n                free(content_base64);\n            }\n        }\n       \n        //adding action \n        const char *action_string = private_dtw_convert_action_to_string(tree_part->pending_action);\n        if(action_string != NULL){\n            cJSON_AddItemToObject(\n                json_tree_part, \n                \"pending_action\", \n                cJSON_CreateString(action_string)\n            );\n        } \n        //Add json_tree_part  \n        cJSON_AddItemToArray(json_array,json_tree_part);\n\n    }\n    \n    char *json_string = cJSON_Print(json_array);\n    //set ident to 4 spaces\n    if(formated_props.minification == DTW_MIMIFY){\n        cJSON_Minify(json_string);\n    }\n    cJSON_Delete(json_array);\n    return json_string;\n}\n\nvoid  DtwTree_dumps_tree_json_to_file(struct DtwTree *self, const char *path, DtwTreeProps  props){\n    char *json_string = DtwTree_dumps_tree_json(self,props);\n    dtw_write_string_file_content(path,json_string);\n    free(json_string);\n}"
	}, {
		"path":	"src/tree/tree/listage.c",
		"original_path":	"src/tree/tree/listage.c",
		"dir":	"src/tree/tree/",
		"full_name":	"listage.c",
		"name":	"listage",
		"extension":	"c",
		"hardware_sha256":	"1f62878e21920a131c3285121e8ee83f3433d6f3554177c1d845d976700b45f7",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	6595,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	6595,
		"content_sha256":	"1f62878e21920a131c3285121e8ee83f3433d6f3554177c1d845d976700b45f7",
		"is_binary":	false,
		"content":	"\n//listages\n DtwStringArray *DtwTree_list_files( DtwTree *self, const char *path,bool concat_path){\n    DtwStringArray *formated_elements = newDtwStringArray();\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart *current = self->tree_parts[i];\n        DtwPath *current_path = current->path;\n        char *current_path_string = DtwPath_get_path(current_path);\n\n        long size = strlen(current_path_string);\n        char last_char = current_path_string[size-1];\n        if(last_char =='/'){\n            continue;\n        }\n\n        if(dtw_starts_with(current_path_string,path)){\n            //means its not an path from these dimension\n            int path_size = strlen(path);\n            bool insert = true;\n\n            for(int i =path_size +1; i < size;i++){\n                if(current_path_string[i] == '/'){\n                    insert = false;\n                    continue;\n                }\n            }\n\n            if(insert){\n                DtwStringArray_append(formated_elements,current_path_string);\n            }\n\n        }\n\n\n    }\n    if(!concat_path){\n\n        DtwStringArray  *not_concatened = private_dtw_remove_start_path(formated_elements,path);\n        DtwStringArray_free(formated_elements);\n        return not_concatened;\n    }\n\n\n    return formated_elements;\n}\n\n DtwStringArray *DtwTree_list_dirs( DtwTree *self, const char *path,bool concat_path){\n\n    DtwStringArray *formated_elements = newDtwStringArray();\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart *current = self->tree_parts[i];\n        DtwPath *current_path = current->path;\n        char *current_path_string = DtwPath_get_path(current_path);\n\n        long size = strlen(current_path_string);\n        char last_char = current_path_string[size-1];\n        if(last_char !='/'){\n            continue;\n        }\n\n        if(dtw_starts_with(current_path_string,path)){\n            //means its not an path from these dimension\n            int path_size = strlen(path);\n\n            int total_found = 0;\n            for(int i =path_size +1; i < size;i++){\n                if(current_path_string[i] == '/'){\n                    total_found+=1;\n                    continue;\n                }\n            }\n\n            if(total_found ==1){\n                DtwStringArray_append(formated_elements,current_path_string);\n            }\n\n        }\n\n\n    }\n    if(!concat_path){\n\n        DtwStringArray  *not_concatened = private_dtw_remove_start_path(formated_elements,path);\n        DtwStringArray_free(formated_elements);\n        return not_concatened;\n    }\n\n\n    return formated_elements;\n}\n\nstruct DtwStringArray *DtwTree_list_all( DtwTree *self, const char *path,bool concat_path){\n\n    DtwStringArray *formated_elements = newDtwStringArray();\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart *current = self->tree_parts[i];\n        DtwPath *current_path = current->path;\n        char *current_path_string = DtwPath_get_path(current_path);\n\n        if(dtw_starts_with(current_path_string,path)){\n            //means its not an path from these dimension\n            int path_size = strlen(path);\n            long size = strlen(current_path_string);\n            char last_char = current_path_string[size-1];\n\n            int total_found = 0;\n            for(int i =path_size+1; i < size;i++){\n                if(current_path_string[i] == '/'){\n                    total_found+=1;\n                    continue;\n                }\n            }\n\n            if(total_found ==1 && last_char == '/'){\n                DtwStringArray_append(formated_elements,current_path_string);\n            }\n            if(total_found ==0){\n                DtwStringArray_append(formated_elements,current_path_string);\n\n            }\n\n\n\n        }\n\n\n    }\n    if(!concat_path){\n\n        DtwStringArray  *not_concatened = private_dtw_remove_start_path(formated_elements,path);\n        DtwStringArray_free(formated_elements);\n        return not_concatened;\n    }\n\n\n    return formated_elements;\n\n}\n\n DtwStringArray *DtwTree_list_files_recursively( DtwTree *self, const char *path,bool concat_path){\n    DtwStringArray *formated_elements = newDtwStringArray();\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart *current = self->tree_parts[i];\n        DtwPath *current_path = current->path;\n        char *current_path_string = DtwPath_get_path(current_path);\n\n\n        long size = strlen(current_path_string);\n        char last_char = current_path_string[size-1];\n        if(last_char =='/'){\n            continue;\n        }\n\n        if(dtw_starts_with(current_path_string,path)){\n            DtwStringArray_append(formated_elements,current_path_string);\n\n        }\n\n\n    }\n    if(!concat_path){\n\n        DtwStringArray  *not_concatened = private_dtw_remove_start_path(formated_elements,path);\n        DtwStringArray_free(formated_elements);\n        return not_concatened;\n    }\n\n\n    return formated_elements;\n}\n\n DtwStringArray *DtwTree_list_dirs_recursively( DtwTree *self, const char *path,bool concat_path){\n    DtwStringArray *formated_elements = newDtwStringArray();\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart *current = self->tree_parts[i];\n        DtwPath *current_path = current->path;\n        char *current_path_string = DtwPath_get_path(current_path);\n\n        long size = strlen(current_path_string);\n        char last_char = current_path_string[size-1];\n        if(last_char !='/'){\n            continue;\n        }\n\n        if(dtw_starts_with(current_path_string,path)){\n            DtwStringArray_append(formated_elements,current_path_string);\n\n        }\n\n    }\n    if(!concat_path){\n\n        DtwStringArray  *not_concatened = private_dtw_remove_start_path(formated_elements,path);\n        DtwStringArray_free(formated_elements);\n        return not_concatened;\n    }\n\n\n    return formated_elements;\n}\n\n\n DtwStringArray *DtwTree_list_all_recursively( DtwTree *self, const char *path,bool concat_path){\n    DtwStringArray *formated_elements = newDtwStringArray();\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart *current = self->tree_parts[i];\n        DtwPath *current_path = current->path;\n        char *current_path_string = DtwPath_get_path(current_path);\n\n\n\n        if(dtw_starts_with(current_path_string,path)){\n            DtwStringArray_append(formated_elements,current_path_string);\n\n        }\n\n    }\n    if(!concat_path){\n\n        DtwStringArray  *not_concatened = private_dtw_remove_start_path(formated_elements,path);\n        DtwStringArray_free(formated_elements);\n        return not_concatened;\n    }\n\n\n    return formated_elements;\n}\n\n"
	}, {
		"path":	"src/tree/tree/tree.c",
		"original_path":	"src/tree/tree/tree.c",
		"dir":	"src/tree/tree/",
		"full_name":	"tree.c",
		"name":	"tree",
		"extension":	"c",
		"hardware_sha256":	"200403a052566f0391aacdceac66db21ad60a426fbbf8e10f1897489c0eb27d1",
		"last_modification_in_unix":	1719387318,
		"hardware_content_size":	5298,
		"last_modification":	"2024-06-26 04:35:18",
		"content_size":	5298,
		"content_sha256":	"200403a052566f0391aacdceac66db21ad60a426fbbf8e10f1897489c0eb27d1",
		"is_binary":	false,
		"content":	"\n\n\nstruct  DtwTree * newDtwTree(){\n\n    struct DtwTree *self = (struct DtwTree*)malloc(sizeof(struct DtwTree));\n    self->size = 0;\n    self->tree_parts = (struct DtwTreePart**)malloc(1);\n\n    return self;\n}\n\n\nstruct DtwTree *DtwTree_get_sub_tree(struct DtwTree *self, const char *path, bool copy_content){\n    struct DtwTree *sub_tree = newDtwTree();\n    for(int i = 0; i < self->size; i++){\n        struct DtwTreePart *tree_part = self->tree_parts[i];\n        char *current_path =  DtwPath_get_path(tree_part->path);\n        if(dtw_starts_with(current_path,path)){\n            if(copy_content){\n                DtwTree_add_tree_part_copy(sub_tree,tree_part);\n            }\n            if(!copy_content){\n                DtwTree_add_tree_part_referencing(sub_tree, tree_part);\n            }\n        }\n    }\n    return sub_tree;\n}\n\nvoid DtwTree_add_tree_part_referencing(struct DtwTree *self, struct DtwTreePart *tree_part) {\n    self->size++;\n    self->tree_parts =  (struct DtwTreePart**)realloc(self->tree_parts, self->size * sizeof(struct DtwTreePart *));\n    self->tree_parts[self->size - 1] = tree_part;\n}\n\nvoid DtwTree_add_tree_part_copy( DtwTree *self,  DtwTreePart *tree_part){\n    self->size++;\n    self->tree_parts =  (struct DtwTreePart**)realloc(self->tree_parts, self->size * sizeof(struct DtwTreePart *));\n    DtwTreePart *copy = DtwTreePart_self_copy(tree_part);\n    copy->owner = (void*)self;\n    self->tree_parts[self->size - 1] = copy;\n       \n}\n\nvoid DtwTree_remove_tree_part(struct DtwTree *self, int position){\n\n    self->size--;\n    DtwTreePart_free(self->tree_parts[position]);\n\n    for(int i = position; i<self->size; i++){\n        self->tree_parts[i] = self->tree_parts[i+1];\n    }\n\n\n}\n\nstruct DtwTreeTransactionReport * DtwTree_create_report(struct DtwTree *self){\n    struct DtwTreeTransactionReport *report = newDtwTreeTransactionReport();\n    for(int i = 0; i < self->size; i++){\n        struct DtwTreePart *tree_part = self->tree_parts[i];\n        int pending_action = tree_part->pending_action;\n        char *path = DtwPath_get_path(tree_part->path);\n\n        if (pending_action == DTW_WRITE){\n            DtwStringArray_append(report->write, path);\n        }\n\n        else if (pending_action == DTW_MODIFY){\n            DtwStringArray_append(report->modify, path);\n        }\n\n        else if (pending_action == DTW_REMOVE){\n            DtwStringArray_append(report->remove, path);\n        }\n\n\n    }\n    return report;\n}\n\n\nvoid DtwTree_add_tree_part_getting_onwership( DtwTree *self,  DtwTreePart *tree_part){\n    DtwTree_add_tree_part_referencing(self,tree_part);\n    tree_part->owner = (void*)self;\n}\n\n\n\nvoid DtwTree_represent( DtwTree *self){\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart_represent(self->tree_parts[i]);\n    }\n}\n\nvoid DtwTree_add_tree_parts_from_string_array( DtwTree *self,  DtwStringArray *paths,DtwTreeProps props){\n    for(int i = 0; i < paths->size; i++){\n\n        const char *current_path = paths->strings[i];\n         DtwTreePart *tree_part = newDtwTreePart(\n                current_path,\n                props\n        );\n\n        DtwTree_add_tree_part_getting_onwership(self, tree_part);\n    }\n}\n\n\nvoid DtwTree_add_tree_from_hardware( DtwTree *self,const char *path, DtwTreeProps props){\n    DtwTreeProps formated_props = DtwTreeProps_format_props(props);\n    struct DtwStringArray *path_array = dtw_list_all_recursively(path,DTW_CONCAT_PATH);\n    DtwStringArray_sort(path_array);\n    DtwTree_add_tree_parts_from_string_array(self, path_array,props);\n    DtwStringArray_free(path_array);\n\n\n    if(formated_props.path_atributes == DTW_INCLUDE){\n        return;\n    }\n    if(self->size == 0){\n        return;\n    }\n    DtwTree_remove_tree_part(self,0);\n\n    int size_to_remove = strlen(path);\n    if(!dtw_ends_with(path,\"/\")){\n        size_to_remove+=1;\n    }\n\n    for(int i =0; i < self->size; i++){\n         DtwTreePart *current_part = self->tree_parts[i];\n         DtwPath *current_path = current_part->path;\n        char *current_path_string = DtwPath_get_path(current_path);\n        //remove the size toremove from string\n\n        memmove(\n                current_path_string,\n                current_path_string+size_to_remove,\n                strlen(current_path_string) - size_to_remove +1\n                );\n        DtwPath_set_path(current_path,current_path_string);\n\n        current_path->original_path_string = current_path_string;\n\n    }\n\n}\n\nvoid DtwTree_free( DtwTree *self){\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart * part = self->tree_parts[i];\n        if(part->owner == (void*)self) {\n            DtwTreePart_free(part);\n\n        }\n\n    }\n    \n    free(self->tree_parts);\n    free(self);\n}\nvoid DtwTree_insecure_hardware_remove_tree(struct DtwTree *self){\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart_hardware_remove(self->tree_parts[i],DTW_EXECUTE_NOW);\n    }\n}\n\nvoid DtwTree_insecure_hardware_write_tree(struct DtwTree *self){\n    \n    for(int i = 0; i < self->size; i++){\n        struct DtwTreePart *tree_part = self->tree_parts[i];\n        DtwTreePart_hardware_write(tree_part,DTW_EXECUTE_NOW);\n    }\n}\n\nvoid DtwTree_hardware_commit_tree(struct DtwTree *self){\n    for(int i = 0; i < self->size; i++){\n        DtwTreePart_hardware_commit(self->tree_parts[i]);\n    }\n}\n"
	}, {
		"path":	"src/tree/tree/tree.h",
		"original_path":	"src/tree/tree/tree.h",
		"dir":	"src/tree/tree/",
		"full_name":	"tree.h",
		"name":	"tree",
		"extension":	"h",
		"hardware_sha256":	"52c7ff6072be963ee673ccccec39479513e66598c84bb6e2b062bdb98bd316a2",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2343,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2343,
		"content_sha256":	"52c7ff6072be963ee673ccccec39479513e66598c84bb6e2b062bdb98bd316a2",
		"is_binary":	false,
		"content":	"\n\n\ntypedef struct  DtwTree{\n    int size;\n     DtwTreePart **tree_parts;\n\n}DtwTree;\n\n\n DtwTree *DtwTree_get_sub_tree(\n     DtwTree *self,\n    const char *path,\n    bool copy_content\n);\n\n DtwTreePart *DtwTree_find_tree_part_by_function(DtwTree *self,bool (*caller)(  DtwTreePart *part));\n\n\n DtwTree *DtwTree_map(DtwTree *self, DtwTreePart* (*caller)( DtwTreePart *part));\n\n\n DtwTree *DtwTree_filter(DtwTree *self,bool (*caller)(struct  DtwTreePart *part));\n\n\n DtwTreePart *DtwTree_find_tree_part_by_name( DtwTree *self, const char *name);\n DtwTreePart *DtwTree_find_tree_part_by_path( DtwTree *self, const char *path);\n\n//listages\n DtwStringArray *DtwTree_list_files( DtwTree *self, const char *path,bool concat_path);\n\n DtwStringArray *DtwTree_list_dirs( DtwTree *self, const char *path,bool concat_path);\n\n DtwStringArray *DtwTree_list_all( DtwTree *self, const char *path,bool concat_path);\n\n DtwStringArray *DtwTree_list_files_recursively( DtwTree *self, const char *path,bool concat_path);\n\n DtwStringArray *DtwTree_list_dirs_recursively( DtwTree *self, const char *path,bool concat_path);\n\n DtwStringArray *DtwTree_list_all_recursively( DtwTree *self, const char *path,bool concat_path);\n\n\nvoid DtwTree_remove_tree_part( DtwTree *self, int position);\n\nvoid DtwTree_add_tree_part_copy( DtwTree *self,  DtwTreePart *tree_part);\n\nvoid DtwTree_add_tree_part_getting_onwership( DtwTree *self,  DtwTreePart *tree_part);\n\nvoid DtwTree_add_tree_part_referencing( DtwTree *self,  DtwTreePart *tree_part);\n\nvoid DtwTree_free( DtwTree *self);\nvoid DtwTree_represent( DtwTree *self);\n\nvoid DtwTree_add_tree_parts_from_string_array(DtwTree *self,DtwStringArray *paths,DtwTreeProps props);\n\nvoid DtwTree_add_tree_from_hardware(DtwTree *self,const char *path,DtwTreeProps props);\n\n DtwTreeTransactionReport * DtwTree_create_report( DtwTree *self);\n\n\n\nvoid DtwTree_insecure_hardware_remove_tree( DtwTree *self);\n\nvoid DtwTree_insecure_hardware_write_tree( DtwTree *self);\n\nvoid DtwTree_hardware_commit_tree( DtwTree *self);\n\nbool DtwTree_loads_json_tree( DtwTree *self, const char *content);\n\nbool DtwTree_loads_json_tree_from_file( DtwTree *self, const char *path);\n\nchar * DtwTree_dumps_tree_json(DtwTree *self,DtwTreeProps  props);\n\nvoid DtwTree_dumps_tree_json_to_file(DtwTree *self,const char *path,DtwTreeProps  props);\n\n  DtwTree * newDtwTree();\n\n"
	}, {
		"path":	"src/tree/tree/tree_finding.c",
		"original_path":	"src/tree/tree/tree_finding.c",
		"dir":	"src/tree/tree/",
		"full_name":	"tree_finding.c",
		"name":	"tree_finding",
		"extension":	"c",
		"hardware_sha256":	"dee19529b9b6af6e01b867727a094513d6b46cba21c3c9145dd8f555f62e68b7",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	2159,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	2159,
		"content_sha256":	"dee19529b9b6af6e01b867727a094513d6b46cba21c3c9145dd8f555f62e68b7",
		"is_binary":	false,
		"content":	"//\n// Created by jurandi on 11-04-2023.\n//\nstruct DtwTreePart *DtwTree_find_tree_part_by_function(\n        struct DtwTree *self,\n        bool (*caller)(struct  DtwTreePart *part)\n){\n    for(int i = 0;i < self->size; i++){\n        struct DtwTreePart *current = self->tree_parts[i];\n        bool result = caller(current);\n        if(result){\n            return current;\n        }\n    }\n    return NULL;\n}\n\nstruct DtwTree *DtwTree_filter(\n        struct DtwTree *self,\n        bool (*caller)(struct  DtwTreePart *part)\n){\n    DtwTree *filtered_tree = newDtwTree();\n\n    for(int i = 0;i < self->size; i++){\n\n        DtwTreePart *current = self->tree_parts[i];\n\n        bool result = caller(current);\n\n        if(result){\n            DtwTree_add_tree_part_copy(filtered_tree,current);\n        }\n\n    }\n    return filtered_tree;\n}\n\n\n DtwTree *DtwTree_map(DtwTree *self,DtwTreePart *(*caller)( DtwTreePart *part)){\n     DtwTree *mapped_tree = newDtwTree();\n\n    for(int i = 0;i < self->size; i++){\n         DtwTreePart *current = self->tree_parts[i];\n         DtwTreePart *copy = DtwTreePart_self_copy(current);\n         DtwTreePart *result = caller(copy);\n        DtwTree_add_tree_part_getting_onwership(mapped_tree, result);\n    }\n    return mapped_tree;\n}\n\n\n DtwTreePart *DtwTree_find_tree_part_by_name( DtwTree *self, const char *name){\n    for(int i = 0;i < self->size; i++){\n        DtwTreePart *current = self->tree_parts[i];\n        DtwPath *current_path = current->path;\n        char *current_name = DtwPath_get_full_name(current_path);\n        if(current_name){\n\n            if(strcmp(current_name, name) == 0){\n                return current;\n            }\n        }\n\n    }\n\n    return NULL;\n}\n\n DtwTreePart *DtwTree_find_tree_part_by_path( DtwTree *self, const char *path){\n    for(int i = 0;i < self->size; i++){\n         DtwTreePart *current = self->tree_parts[i];\n         DtwPath *current_path = current->path;\n        char *current_path_string = DtwPath_get_path(current_path);\n        if(current_path_string){\n            if(strcmp(current_path_string, path) == 0){\n                return current;\n            }\n        }\n\n    }\n\n    return NULL;\n}"
	}, {
		"path":	"src/tree/tree_part/",
		"original_path":	"src/tree/tree_part/",
		"dir":	"src/tree/tree_part/"
	}, {
		"path":	"src/tree/tree_part/hardware_tree_part.c",
		"original_path":	"src/tree/tree_part/hardware_tree_part.c",
		"dir":	"src/tree/tree_part/",
		"full_name":	"hardware_tree_part.c",
		"name":	"hardware_tree_part",
		"extension":	"c",
		"hardware_sha256":	"58f5b316b6530bb594111abf7b0faa2289ab79e8e6ccef577254cd77c00472cd",
		"last_modification_in_unix":	1719387169,
		"hardware_content_size":	4165,
		"last_modification":	"2024-06-26 04:32:49",
		"content_size":	4165,
		"content_sha256":	"58f5b316b6530bb594111abf7b0faa2289ab79e8e6ccef577254cd77c00472cd",
		"is_binary":	false,
		"content":	"\n\n\n\n\n\nvoid DtwTreePart_load_content_from_hardware(struct DtwTreePart *self){\n\n    char *path = DtwPath_get_path(self->path);\n\n    if(path == NULL){\n        return;\n    }\n\n\n    if(dtw_entity_type(path) != DTW_FILE_TYPE){\n        return;\n    }\n\n    DtwTreePart_free_content(self);\n    self->content = dtw_load_any_content(path,&self->content_size,&self->is_binary);\n    self->hardware_content_size = self->content_size;\n    self->content_exist_in_hardware = true;\n\n\n}\n\n\n\nbool DtwTreePart_hardware_remove(struct DtwTreePart *self, int transaction){\n     if(self->ignore == true){\n        return false;\n     }\n     if(transaction == DTW_SET_AS_ACTION){\n        self->pending_action = DTW_REMOVE;\n        return false;\n     }\n\n    char *path =DtwPath_get_path(self->path);\n\n    remove(path);\n    \n    self->content_exist_in_hardware = false;\n    return true;\n}\n\nbool DtwTreePart_hardware_write(struct DtwTreePart *self, int transaction){\n    if(self->ignore == true){\n        return false;\n    }\n    if(transaction == DTW_SET_AS_ACTION){\n        self->pending_action = DTW_WRITE;\n        return false;\n    }   \n    //means that the content not exist in memory\n    if(self->content == NULL){\n        char *path = DtwPath_get_path(self->path);\n        char *dir = DtwPath_get_dir(self->path);\n        int entity_type = dtw_entity_type(path);\n       \n        if(entity_type== DTW_NOT_FOUND && dir!= NULL){\n            dtw_create_dir_recursively(dir);\n        \n        }\n \n\n        return true;\n    }\n    char *path = DtwPath_get_path(self->path);\n\n    dtw_write_any_content(path,self->content,(long)self->content_size);\n    free(self->hawdware_content_sha);\n    self->hawdware_content_sha = dtw_generate_sha_from_any(self->content,self->content_size);\n    self->content_exist_in_hardware = true;\n    long now = dtw_get_time();\n    self->last_modification_time = now;\n    self->last_modification_in_str = dtw_convert_unix_time_to_string(self->last_modification_time);\n    return true;\n  \n}\n\nbool DtwTreePart_hardware_modify(struct DtwTreePart *self, int transaction){\n    if(self->ignore == true){\n        return false;\n    }\n    if(transaction == DTW_SET_AS_ACTION){\n        self->pending_action = DTW_MODIFY;\n        return false;\n    }\n    bool changed_path =DtwPath_changed(self->path);\n\n    \n    if(changed_path == true && self->content == NULL){\n        char *old_path = self->path->original_path_string;\n        char *new_path = DtwPath_get_path(self->path);\n        remove(old_path);\n        dtw_create_dir_recursively(new_path);\n        return true;\n    }\n\n    if(changed_path == false  && self->content == NULL){\n        return  false;\n    }\n\n    bool write = false;\n    if(changed_path == true){\n        char *old_path = self->path->original_path_string;\n        remove(old_path);\n        write = true;\n    }\n\n    if(changed_path== false){\n        if(self->metadata_loaded == true){\n            char *hardware_sha = self->hawdware_content_sha;\n            char *memory_sha = DtwTreePart_get_content_sha(self);\n            if(strcmp(hardware_sha,memory_sha) != 0){\n                write = true;\n            }\n        }\n        else{\n            write = true;\n        }\n    }\n\n    if(write){\n        char *path = DtwPath_get_path(self->path);\n        dtw_write_any_content(\n            path,\n            self->content,\n            (long)self->content_size\n        );\n        free(self->hawdware_content_sha);\n        self->hawdware_content_sha = dtw_generate_sha_from_string((const char *)self->content);\n        self->content_exist_in_hardware = true;\n        long now = dtw_get_time();\n        self->last_modification_time = now;\n\n        return true;\n    }\n    return false;\n}\n\nbool DtwTreePart_hardware_commit(struct DtwTreePart *self){\n    if(self->ignore == true){\n        return false;\n    }\n    if(self->pending_action == DTW_REMOVE){\n        return DtwTreePart_hardware_remove(self,DTW_EXECUTE_NOW);\n    }\n    if(self->pending_action == DTW_WRITE){\n        return DtwTreePart_hardware_write(self,DTW_EXECUTE_NOW);\n    }\n    if(self->pending_action == DTW_MODIFY){\n        return DtwTreePart_hardware_modify(self,DTW_EXECUTE_NOW);\n    }\n    return false;\n}\n"
	}, {
		"path":	"src/tree/tree_part/tree_part.c",
		"original_path":	"src/tree/tree_part/tree_part.c",
		"dir":	"src/tree/tree_part/",
		"full_name":	"tree_part.c",
		"name":	"tree_part",
		"extension":	"c",
		"hardware_sha256":	"e76d87b217dc5a811c6d8650721ce9073f9bc670b670bb1754817e725dcca51b",
		"last_modification_in_unix":	1719387449,
		"hardware_content_size":	5774,
		"last_modification":	"2024-06-26 04:37:29",
		"content_size":	5774,
		"content_sha256":	"e76d87b217dc5a811c6d8650721ce9073f9bc670b670bb1754817e725dcca51b",
		"is_binary":	false,
		"content":	"\n\n\nstruct DtwTreePart * newDtwTreePart(const char *path, DtwTreeProps props){\n    DtwTreeProps formated_props = DtwTreeProps_format_props(props);\n\n    DtwTreePart *self = (DtwTreePart *)malloc(sizeof(struct DtwTreePart));\n    *self = (DtwTreePart){0};\n    self->path = newDtwPath(path);\n\n\n    if(formated_props.content == DTW_INCLUDE || formated_props.hadware_data == DTW_INCLUDE){\n        \n        DtwTreePart_load_content_from_hardware(self);\n        if(formated_props.hadware_data == DTW_INCLUDE && self->content){\n\n            self->metadata_loaded = true;\n            self->last_modification_time = dtw_get_entity_last_motification_in_unix(path);\n            self->last_modification_in_str = dtw_convert_unix_time_to_string(self->last_modification_time);\n            free(self->hawdware_content_sha);\n            self->hawdware_content_sha = dtw_generate_sha_from_string((const char*)self->content);\n        }\n\n        if(formated_props.content == DTW_HIDE){\n            DtwTreePart_free_content(self);\n        }\n    }\n\n    return self;\n}\nchar *DtwTreePart_get_content_string_by_reference(struct DtwTreePart *self){\n    return (char *)self->content;\n}\n\nunsigned char *DtwTreePart_get_content_binary_by_reference(struct DtwTreePart *self){\n    return self->content;\n}\n\n\nstruct  DtwTreePart * DtwTreePart_self_copy( DtwTreePart *self){\n    char *path = DtwPath_get_path(self->path);\n\n    DtwTreeProps props = {.content =DTW_NOT_LOAD,.hadware_data = DTW_NOT_LOAD};\n    DtwTreePart *new_tree_part = newDtwTreePart(\n            path,\n            props\n    );\n\n    new_tree_part->content_exist_in_hardware = self->content_exist_in_hardware;\n    new_tree_part->is_binary = self->is_binary;\n    new_tree_part->ignore = self->ignore;\n    new_tree_part->content_size = self->content_size;\n\n    char * current_sha = DtwTreePart_get_content_sha(self);\n\n    if(current_sha) {\n        new_tree_part->current_sha = strdup(current_sha);\n    }\n\n    if(self->hawdware_content_sha){\n        new_tree_part->hawdware_content_sha = strdup(self->hawdware_content_sha);\n    }\n\n    if(self->content) {\n        new_tree_part->content = (unsigned char *)malloc(self->content_size + 2);\n        memcpy(new_tree_part->content,self->content,self->content_size);\n\n        if(self->is_binary == false){\n            new_tree_part->content[self->content_size] = '\\0';\n        }\n\n    }\n\n\n    \n    return new_tree_part;\n}\n\nvoid DtwTreePart_set_any_content( DtwTreePart *self, unsigned char *content, long content_size, bool is_binary){\n\n    DtwTreePart_free_content(self);\n    self->is_binary = is_binary;\n    self->content = (unsigned char *)malloc(content_size+2);\n    memcpy(self->content,content,content_size);\n    self->content_size = content_size;\n\n\n}\n\nvoid DtwTreePart_set_string_content( DtwTreePart *self, const char *content){\n    DtwTreePart_set_any_content(\n        self,\n        (unsigned char*)content,\n        strlen(content),\n        false\n    );\n    \n    self->content[self->content_size] = '\\0';\n}\n\nvoid DtwTreePart_set_binary_content( DtwTreePart *self, unsigned char *content, long content_size){\n    DtwTreePart_set_any_content(self,content,content_size,true);\n}\n\n\nchar *DtwTreePart_get_content_sha( DtwTreePart *self){\n    if(self->content == NULL) {\n        return NULL;\n    }\n    if(self->current_sha) {\n        free(self->current_sha);\n    }\n    self->current_sha =dtw_generate_sha_from_any(self->content,self->content_size);;\n    return self->current_sha;\n}\n\n\n\n\n\n\n\nvoid DtwTreePart_represent(struct DtwTreePart *self){\n    printf(\"------------------------------------------------------------\\n\");\n    DtwPath_represent(self->path);\n    printf(\"Content Exist in Memory: %s\\n\",self->content ? \"true\" : \"false\");\n    printf(\"Ignore: %s\\n\",self->ignore ? \"true\" : \"false\");\n\n    printf(\"Content Exist In Hardware: %s\\n\",self->content_exist_in_hardware ? \"true\" : \"false\");\n    printf(\"Is Binary: %s\\n\",self->is_binary ? \"true\" : \"false\");\n\n    if(self->last_modification_in_str){\n        printf(\"Last Modification Time in Unix: %li\\n\",self->last_modification_time);\n        printf(\"Last Modification Time: %s\\n\",self->last_modification_in_str);\n    }\n\n    printf(\"Content Size: %ld\\n\",(long)self->content_size);\n\n    char *content_sha = DtwTreePart_get_content_sha(self);\n    if(content_sha){\n        printf(\"Content SHA:  %s\\n\",content_sha);\n    }\n    if(self->content && self->is_binary == false){\n        printf (\"Content: %s\\n\",(char*)self->content);\n    }\n\n    if(self->hawdware_content_sha) {\n        printf(\"Original Hardware SHA:%s\\n\",self->hawdware_content_sha);\n    }\n\n    if(self->is_binary == true){\n        printf(\"Content: Binary\\n\");\n    }\n    \n    const char *action = private_dtw_convert_action_to_string(self->pending_action);\n    if(action){\n        printf(\"Pending Action: %s\\n\",action);\n\n    }\n\n}\n\n\nvoid DtwTreePart_free_content(struct DtwTreePart *self){\n    if(self->content){\n        free(self->content);\n    }\n    self->content = NULL;\n\n}\nvoid DtwTreePart_free(struct DtwTreePart *self){\n    if(self->path) {\n        DtwPath_free(self->path);\n    }\n\n    if(self->hawdware_content_sha) {\n        free(self->hawdware_content_sha);\n    }\n    if(self->current_sha) {\n        free(self->current_sha);\n    }\n    if(self->last_modification_in_str) {\n        free(self->last_modification_in_str);\n    }\n    DtwTreePart_free_content(self);\n    free(self);\n}\n\n DtwTreePart * newDtwTreePartEmpty(const char *path){\n    DtwTreeProps  props = {.content =DTW_NOT_LOAD,.hadware_data = DTW_NOT_LOAD};\n    return newDtwTreePart(\n            path,\n         props\n    );\n\n}\n\n\n DtwTreePart * newDtwTreePartLoading(const char *path){\n    DtwTreeProps  props = {.content =DTW_LOAD,.hadware_data = DTW_LOAD};\n    return newDtwTreePart(\n            path,\n            props\n    );\n}\n"
	}, {
		"path":	"src/tree/tree_part/tree_part.h",
		"original_path":	"src/tree/tree_part/tree_part.h",
		"dir":	"src/tree/tree_part/",
		"full_name":	"tree_part.h",
		"name":	"tree_part",
		"extension":	"h",
		"hardware_sha256":	"6f11b5b0a4b1ced62a83ae31367989ab2318adc7c9490175dc3980ae7708f92b",
		"last_modification_in_unix":	1719387145,
		"hardware_content_size":	1977,
		"last_modification":	"2024-06-26 04:32:25",
		"content_size":	1977,
		"content_sha256":	"6f11b5b0a4b1ced62a83ae31367989ab2318adc7c9490175dc3980ae7708f92b",
		"is_binary":	false,
		"content":	"\n\n#define DTW_IS_BINARY true\n#define DTW_IS_NOT_BINARY false\n#define DTW_IGNORE true\n#define DTW_NOT_IGNORE false\n\n#define DTW_SET_AS_ACTION 1\n#define DTW_EXECUTE_NOW 2\n\n#define DTW_MODIFY 1\n#define DTW_WRITE 2\n#define DTW_REMOVE 3\n\ntypedef struct DtwTreePart{\n    \n     DtwPath *path;\n    void *owner;\n    long content_size;\n    long  hardware_content_size;\n    bool content_exist_in_hardware;\n    bool ignore;\n    bool is_binary;\n    bool metadata_loaded;\n    char *current_sha;\n    char * last_modification_in_str;\n    long last_modification_time;\n    char *hawdware_content_sha;\n\n    unsigned char *content;\n    int pending_action;\n\n\n}DtwTreePart;\n\n\nchar *DtwTreePart_get_content_string_by_reference(struct DtwTreePart *self);\nunsigned char *DtwTreePart_get_content_binary_by_reference(struct DtwTreePart *self);\nchar *DtwTreePart_get_content_sha(struct DtwTreePart *self);\nvoid DtwTreePart_set_any_content(struct DtwTreePart *self, unsigned char *content, long content_size, bool is_binary);\nvoid DtwTreePart_set_string_content(struct DtwTreePart *self, const char *content);\nvoid DtwTreePart_set_binary_content(struct DtwTreePart *self, unsigned char *content, long content_size);\nvoid DtwTreePart_load_content_from_hardware(struct DtwTreePart *self);\nvoid DtwTreePart_free_content(struct DtwTreePart *self);\nvoid DtwTreePart_represent(struct DtwTreePart *self);\n\nbool DtwTreePart_hardware_remove(struct DtwTreePart *self,int transaction);\nbool DtwTreePart_hardware_write(struct DtwTreePart *self,int transaction);\nbool DtwTreePart_hardware_modify(struct DtwTreePart *self,int transaction);\n\n\nbool DtwTreePart_hardware_commit(struct DtwTreePart *self);\n\nvoid DtwTreePart_free(struct DtwTreePart *self);\nstruct DtwTreePart * DtwTreePart_self_copy(struct DtwTreePart *self);\n\nstruct DtwTreePart * newDtwTreePart(const char *path, DtwTreeProps props);\nstruct DtwTreePart * newDtwTreePartEmpty(const char *path);\nstruct DtwTreePart * newDtwTreePartLoading(const char *path);\n"
	}, {
		"path":	"src/tree/tree_props/",
		"original_path":	"src/tree/tree_props/",
		"dir":	"src/tree/tree_props/"
	}, {
		"path":	"src/tree/tree_props/tree_props.c",
		"original_path":	"src/tree/tree_props/tree_props.c",
		"dir":	"src/tree/tree_props/",
		"full_name":	"tree_props.c",
		"name":	"tree_props",
		"extension":	"c",
		"hardware_sha256":	"fbddc395a85ffef279fa4b7041490fa0daf03f3191fa0a8db15697f26b4fafd3",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	634,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	634,
		"content_sha256":	"fbddc395a85ffef279fa4b7041490fa0daf03f3191fa0a8db15697f26b4fafd3",
		"is_binary":	false,
		"content":	"//\n// Created by jurandi on 01-07-2023.\n//\n\nDtwTreeProps DtwTreeProps_format_props(DtwTreeProps props){\n    DtwTreeProps result = props;\n\n    if(!result.minification){\n        result.minification = DTW_NOT_MIMIFY;\n    }\n    if(!result.content){\n        result.content = DTW_INCLUDE;\n    }\n    if(!result.path_atributes){\n        result.path_atributes = DTW_INCLUDE;\n    }\n    if(!result.hadware_data){\n        result.hadware_data = DTW_INCLUDE;\n    }\n    if(!result.content_data){\n        result.content_data = DTW_INCLUDE;\n    }\n    if(!result.ignored_elements){\n        result.ignored_elements = DTW_HIDE;\n    }\n    return result;\n}"
	}, {
		"path":	"src/tree/tree_props/tree_props.h",
		"original_path":	"src/tree/tree_props/tree_props.h",
		"dir":	"src/tree/tree_props/",
		"full_name":	"tree_props.h",
		"name":	"tree_props",
		"extension":	"h",
		"hardware_sha256":	"7323783a96a90606d076eb9a5aa3f1b8c2d33bb375438ac1183977193890ea75",
		"last_modification_in_unix":	1719144965,
		"hardware_content_size":	369,
		"last_modification":	"2024-06-23 09:16:05",
		"content_size":	369,
		"content_sha256":	"7323783a96a90606d076eb9a5aa3f1b8c2d33bb375438ac1183977193890ea75",
		"is_binary":	false,
		"content":	"\n\n#define DTW_NOT_MIMIFY 1\n#define DTW_MIMIFY 2\n\n#define DTW_NOT_LOAD 1\n#define DTW_LOAD 2\n\n#define DTW_HIDE 1\n#define DTW_INCLUDE 2\n\ntypedef struct DtwTreeProps{\n   int minification;\n   int content;\n   int path_atributes;\n   int hadware_data;\n   int content_data;\n   int ignored_elements;\n\n}DtwTreeProps;\n\n\n\nDtwTreeProps DtwTreeProps_format_props(DtwTreeProps props);\n"
	}]